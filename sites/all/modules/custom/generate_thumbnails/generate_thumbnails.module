<?php

/**
 * @file module for thumbnail generation that happens after image upload
 */

require_once 'generate_thumbnails.inc';

/**
 * hook_menu
 * @return type
 * return menu items
 */
function generate_thumbnails_menu() {
  $items['admin/image-style-manage'] = array(
      'title' => 'Manage image style',
      'description' => 'Manage the image style',
      'page callback' => 'manage_image_style',
      'access arguments' => array('Administer image styles '),
      'type' => MENU_CALLBACK,
  );
  return $items;
}
/**
 * page callback function for
 * mange image style
 * @return type
 */
function manage_image_style() {
  return drupal_render(drupal_get_form('manage_image_style_form'));
}
/**
 * Form for manage image style
 * @return string
 */
function manage_image_style_form() {
  $form = array();
  $form['preview-image'] = array(
      '#type' => 'textfield',
      '#title' => 'Preview image',
      '#description' => 'Enter the preview image style name ',
      '#default_value' => variable_get('preview-image-style'),
      '#required' => TRUE,
  );
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Submit',
  );
  return $form;
}
/**
 * submit function manage image style form
 * @param type $form
 * @param type $form_state
 */
function manage_image_style_form_submit($form, &$form_state) {
  $prev_img_style_name = $form['preview-image']['#value'];
  variable_set('preview-image-style', $prev_img_style_name);
}

/**
 * Implementation of hook_cron()
 * Function for generating thumbnail images
 */
function generate_thumbnails_cron() {

  $styles = _pre_image_cache_styles();
  $queue = DrupalQueue::get('create_image_cache');
  //Pull items out one at a time.
  while ($item = $queue->claimItem()) {
    //Try saving the data.
    _generate_image_styles($item->data, $styles);
    $queue->deleteItem($item);
    watchdog('Queue Item', 'Items in the queue == ' . $queue->numberOfItems(), array(), WATCHDOG_DEBUG);
  };

}

/**
 * 
 * Get image style by name
 * @param string $name name of the image style 
 */
function image_style($name) {
  foreach (image_styles() as $style) {
    if ($style['name'] == $name) {
      return $style;
    }
  }
  return NULL;
}

/*
 *  Function creates imagecache for styles that appear on the search page
 *
 *  @param $file - contains image details
 */
function _generate_image_styles($file, $styles) {
  
  foreach ($styles as $style_name) { 
    $style = image_style($style_name);
     
    if (!$style) {
      watchdog('Image caching', 'Style does not exists: ' . $style_name . '.', array(), WATCHDOG_WARNING);
      return;
    }

    $derivative_uri = image_style_path($style['name'], $file->uri);
    
    if (!file_exists($derivative_uri)) {
      $success = image_style_create_derivative($style, $file->uri, $derivative_uri);
      if (!$success) {
        watchdog('Image caching', 'Failed to create image cache for style: ' . $style['name'] . '.');
      }
    }     
  };

  $S3_queue = DrupalQueue::get('send_images_to_S3');
  $S3_queue->createItem($file);
}