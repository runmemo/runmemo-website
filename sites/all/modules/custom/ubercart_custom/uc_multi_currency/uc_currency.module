<?php

/**
 * @file
 * Add multiple currency configurations features to ubercart
 */

/**
 * switcher select list
 */
define('UC_CURRENCY_SELECT', '1');

/**
 * switcher radio button
 */
define('UC_CURRENCY_RADIOS', '2');


/**
 * switcher select list
 */
define('UC_CURRENCY_RATE_AUTO', '1');

/**
 * switcher radio button
 */
define('UC_CURRENCY_RATE_MANUAL', '2');

/**
 * switcher radio button
 */
define('UC_CURRENCY_DEFAULT_CURRENCY', 'GBP');

/**
 * Implements hook_init()
 */
function uc_currency_init() {
   if ('search-result' === arg(0)) {
     // here we change the currency code of the session based on the 
     // country of the event
      $nid = arg(1);
      $currency = uc_currency_get_event_currency($nid);
      uc_currency_set_code($currency);
   }
}

/**
 * Implements hook_menu().
 */
function uc_currency_menu() {
  $items = array();

  $items['admin/store/settings/currency'] = array(
    'title' => 'Currency',
    'description' => 'Change currency configurations',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_currency_settings_form'),
    'access arguments' => array('administer currency'),
    'file' => 'uc_currency.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function uc_currency_permission() {
  return array(
    'administer currency' => array(
      'title' => t('Administer Currency'),
      'description' => t('Allow administratior to administer currency configurations'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function uc_currency_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'uc_currency') . '/views',
  );
}

/**
 * Implements hook_block_info().
 */
function uc_currency_block_info() {

  $blocks['uc_currency_block'] = array(
    'info' => t('Currency Switcher'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => FALSE,
    'region' => -1,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function uc_currency_block_view($delta = '') {

  switch ($delta) {
    case 'uc_currency_block':
      $product_count = count(uc_cart_get_contents());
      if (!variable_get('uc_cart_block_empty_hide', FALSE) || $product_count) {
        $block['subject'] = '';
        $block['content'] = drupal_get_form('uc_currency_switcher_form');
      }
      break;
  }
  return $block;
}

/**
 * Implements theme_registry_alter().
 */
function uc_currency_theme_registry_alter(&$theme_registry) {
  unset($theme_registry['uc_price']['includes']);

  $module_path = drupal_get_path('module', 'uc_currency');
  $theme_registry['uc_price'] = array(
    'file' => 'uc_currency.module',
    'type' => 'module',
    'theme path' => $module_path,
    'function' => 'theme_uc_price_multiple_currency',
    'variables' => array('price' => NULL, 'suffixes' => NULL),
  );
}

/**
 * Implements hook_uc_cart_alter().
 */
function uc_currency_uc_cart_alter(&$items) {
  $default_currency_code = default_currency_code();
  $code = isset($_SESSION['currency_switcher']) ? $_SESSION['currency_switcher'] : $default_currency_code;

  foreach ($items as $key => $item) {
    $items[$key]->order->currency = $code;
  }
}

function uc_currency_order($op, &$order, $arg2) {
  switch ($op) {
    case 'save':
      $order->currency = uc_currency_get_code();
      break;
  }
}

/**
 *
 * Implements hook_formatter_info()
 */
function uc_currency_formatter_info() {
  return array(
    'uc_price_field_converted' => array(
      'label' => t('Currency converted to currency of user.'),
      'field types' => array('field_example_rgb'),
    ),
  );
}

/**
 * Implements hook_field_formater_view()
 */
function uc_currency_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'uc_price_field_converted':
      
      
      break;
  }
}

/**
 * Overrided callback function of theme_uc_price.
 * @see uc_currency_theme_registry_alter
 *
 * @param array $variables
 *   associative array containing:
 *   - price = ubercart item price (base price)
 *   - suffixes = Price suffixes
 *
 * @ingroup themeable
 */
function theme_uc_price_multiple_currency($variables) {

 
  $code = uc_currency_get_code();
  $symbol = currency_api_get_symbol($code);
  $price = $variables['price'];
  
  $output = '<span class="uc-price">' . uc_currency_format($price, $symbol) . '</span>';

  if (!empty($variables['suffixes'])) {
    $output .= '<span class="price-suffixes">' . implode(' ', $variables['suffixes']) . '</span>';
  }
  return $output;
}

/**
 * Implements hook_form_submit().
 */
function uc_currency_switcher_form($form, $form_state) {
  $form = array();

  drupal_add_js('
    jQuery(document).ready(function($){
      $("#edit-currency-switcher").change(function(){
        $("#edit-currency-switcher-submit").click();
      });
    });    
  ', array('type' => 'inline'));

  $default_currency_code = variable_get('uc_currency_base', UC_CURRENCY_DEFAULT_CURRENCY);


  $currencies_arr[$default_currency_code] = $default_currency_code;

  $currency_convert = unserialize(variable_get('uc_currency_convert', ''));
  if (!empty($currency_convert)) {
    $currencies_arr = array_merge($currencies_arr, $currency_convert);
  }

  $form['currency_switcher'] = array(
    '#type' => 'select',
    '#options' => $currencies_arr,
    '#default_value' => isset($_SESSION['currency_switcher']) ? $_SESSION['currency_switcher'] : $default_currency_code,
  );

  $form['currency_switcher_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
    '#attributes' => array('style' => 'display:none;'),
  );
  
  return $form;
}

/**
 * Implements uc_currency_switcher_form_submit().
 */
function uc_currency_switcher_form_submit(&$form, $form_state) {

  $input = $form_state['input'];

  // Store currencies code to session.
  $_SESSION['currency_switcher'] = $input['currency_switcher'];
}

/**
 * Manually Convert the currency
 *
 * @param string $to
 *   Currency code target
 *
 * @param number $value
 *   value of price
 *
 * @return ArrayIterator
 *   array price
 */
function uc_currency_manual_convertion($to, $value) {

  if ($to == variable_get('uc_currency_base')) {
    $result['code'] = $to;
    $result['value'] = 1 * $value;
  }
  else {
    $currencies_rate = unserialize(variable_get('uc_currency_rates'));

    $result['value'] = $currencies_rate[$to] * $value;
    $result['code'] = $to;
  }
  return $result;
}

/**
 * Gets currency code for current user session
 * @return string ISO currency code of the session
 */
function uc_currency_get_code() {
  $code = isset($_SESSION['currency_switcher']) ? $_SESSION['currency_switcher'] : default_currency_code();
  watchdog('currency', $code);
  return $code;
}
/**
 * Returns currency code from the settings
 * @return string ISO currency code set in the setting of Drupal
 */
function default_currency_code() {
  return variable_get('uc_currency_code', UC_CURRENCY_DEFAULT_CURRENCY);
}
/**
 * Converts country code to corresponding currency code 
 * @param string $country ISO country code
 * @return string ISO currency code 
 */
function uc_currency_country_currency($country) {
  $codes = array(
    'RU' => 'RUB',
    'GB' => 'GBP',
    'DE' => 'EUR',
    'FR' => 'EUR',
    'US' => 'USD',
  );
  return isset($codes[$country]) ? $codes[$country] : default_currency_code(); 
}


/**
 * Sets the currency of the session.
 * @param string $currency ISO code of the currency to be set
 */
function uc_currency_set_code($currency) {
  
  $_SESSION['currency_switcher'] = $currency;
  //variable_set('uc_paypal_wpp_currency', $currency);
}

/**
 *
 * Implements hook_module_implements_alter
 */
function uc_currency_module_implements_alter(&$implementations, $hook){
  if ($hook === "load") {
    // here we move execution of hook_load in this module to the end
    $group = $implementations['uc_currency'];
    unset($implementations['uc_currency']);
    $implementations['uc_currency'] = $group;
  }
}
/**
 * Implements hook_load().
 */
function uc_currency_node_load($nodes) {
  $vids = array();
  foreach ($nodes as $node) {
    $vids[$node->nid] = $node->vid;
  }
  $result = db_query('SELECT nid FROM {uc_products} WHERE vid IN (:vids)', array(':vids' => $vids));
  foreach ($result as $node) {
    $nodes[$node->nid]->price = uc_currency_get_node_price($nodes[$node->nid]);
  }
}

/**
 * Gets currency for the event node based on the country in the address field.
 * @param integer $nid nid of the node for wich we need to find default currency
 * @return string currency code that corresponds to the country of the event.
 */
function uc_currency_get_event_currency($nid) {
 
  $node = node_load($nid);
  $items = field_get_items('node', $node, 'field_address');
  if($items) {
    foreach ($items as $address) {
      $country = $address['country'];
      break;
    }
  } 
  else {
    return default_currency_code();
  }
    
  $currency = uc_currency_country_currency($country);
  return $currency;
}


function uc_currency_get_node_price($node, $currency_to = NULL) {
  if ($currency_to == NULL) {
    $currency_to = uc_currency_get_code();
  }
 
  $items = field_get_items('node', $node, 'field_currency', LANGUAGE_NONE);
  if ($items) {
    foreach ($items as $item) {
     $code = $item['value'];
     break;
    }
    $amount = currency_api_convert($code, $currency_to, $node->sell_price);
    return $amount['value'];
  }
  else {
    $amount = currency_api_convert(default_currency_code(), $currency_to, $node->sell_price);
    return $amount['value'];
  }
}


/**
 * Converts amount to USD if currency is not supported by PayPal
 * @param number $amount
 * @param string $currency
 * @return array 
 *  An associative array that contains the following:
 * result['value'] - original or converted amount.
 * result['currency'] - currency of the amount.
 * result['status'] - shows whether amount was calculated correctly
 */
function uc_currency_paypal_convert($amount, $currency = NULL) {
  if (is_null($currency)) {
    $currency = uc_currency_get_code();
  }
  watchdog('paypal', 'Amount: ' . $amount . '; current currency: ' . $currency);
  if (in_array($currency, _uc_paypal_currency_array())) {
    // Currency is supported by PayPal, do nothing.
    return array('value' => $amount, 'currency' => $currency, 'status' => TRUE);
  } 
  else { // currency is not supported by PayPal, convert to USD.
    $usd_amount = currency_api_convert($currency, 'USD', $amount);
    if ($usd_amount['status']) { // successful conversion to USD
      return array(
          'value' => $usd_amount['value'], 
          'currency' => 'USD', 
          'status' => TRUE);
    }
    else { // failed to convert amount in unsupported currency to USD.
      watchdog('uc_paypal', 'Failed to convert from ' . $currency . ' to USD.' .
              $usd_amount['message']);
      return array(
          'value' => $amount, 
          'currency' => $currency,
          'status' => FALSE);
    }
  }
}

/**
 * Implements hook_uc_payment_method_alter(&$methods).
 */
function uc_currency_uc_payment_method_alter(&$methods) {
  $methods['paypal_wps']['redirect'] = 'uc_currency_paypal_wps_form';
}

/**
 * this form is copy of uc_paypal_wps_form with amounts converted
 * to USD for unsupported currencies
 */
function uc_currency_paypal_wps_form($form, &$form_state, $order) {
  watchdog('form', 'uc_currency_paypal_wps_form');
  $shipping = 0;
  foreach ($order->line_items as $item) {
    if ($item['type'] == 'shipping') {
      $shipping += $item['amount'];
    }
  }

  $tax = 0;
  if (module_exists('uc_taxes')) {
    foreach (uc_taxes_calculate($order) as $tax_item) {
      $tax += $tax_item->amount;
    }
  }

  $address = variable_get('uc_paypal_wps_address_selection', 'billing');

  $country = uc_get_country_data(array('country_id' => $order->{$address . '_country'}));
  if ($country === FALSE) {
    $country = array(0 => array('country_iso_code_2' => 'US'));
  }

  $phone = '';
  for ($i = 0; $i < strlen($order->{$address . '_phone'}); $i++) {
    if (is_numeric($order->{$address . '_phone'}[$i])) {
      $phone .= $order->{$address . '_phone'}[$i];
    }
  }

  /**
   * night_phone_a: The area code for U.S. phone numbers, or the country code
   *                for phone numbers outside the U.S.
   * night_phone_b: The three-digit prefix for U.S. phone numbers, or the
   *                entire phone number for phone numbers outside the U.S.,
   *                excluding country code.
   * night_phone_c: The four-digit phone number for U.S. phone numbers.
   *                (Not Used for UK numbers)
   */
  if ($country[0]['country_iso_code_2'] == 'US' || $country[0]['country_iso_code_2'] == 'CA') {
    $phone = substr($phone, -10);
    $phone_a = substr($phone, 0, 3);
    $phone_b = substr($phone, 3, 3);
    $phone_c = substr($phone, 6, 4);
  }
  else {
    $phone_a = $phone_b = $phone_c = '';
  }
  
  $shipping_amount = uc_currency_paypal_convert($shipping);
  $tax_amount = uc_currency_paypal_convert($tax);
  

  $data = array(
    // PayPal command variable.
    'cmd' => '_cart',

    // Set the correct codepage.
    'charset' => 'utf-8',

    // IPN control notify URL.
    'notify_url' => url('uc_paypal/ipn/' . $order->order_id, array('absolute' => TRUE)),

    // Display information.
    'cancel_return' => url('uc_paypal/wps/cancel', array('absolute' => TRUE)),
    'no_note' => 1,
    'no_shipping' => variable_get('uc_paypal_wps_no_shipping', 1),
    'return' => url('uc_paypal/wps/complete/' . $order->order_id, array('absolute' => TRUE)),
    'rm' => 2,

    // Transaction information.
    'currency_code' => uc_currency_get_code(),// variable_get('uc_paypal_wps_currency', 'USD'),
    'handling_cart' => uc_currency_format($shipping_amount['value'], FALSE, FALSE, '.'),
    'invoice' => $order->order_id . '-' . uc_cart_get_id(),
    'tax_cart' => uc_currency_format($tax_amount['value'], FALSE, FALSE, '.'),

    // Shopping cart specific variables.
    'business' => trim(variable_get('uc_paypal_wps_email', '')),
    'upload' => 1,
 
    'lc' => variable_get('uc_paypal_wps_language', 'US'),

    // Prepopulating forms/address overriding.
    'address1' => substr($order->{$address . '_street1'}, 0, 100),
    'address2' => substr($order->{$address . '_street2'}, 0, 100),
    'city' => substr($order->{$address . '_city'}, 0, 40),
    'country' => $country[0]['country_iso_code_2'],
    'email' => $order->primary_email,
    'first_name' => substr($order->{$address . '_first_name'}, 0, 32),
    'last_name' => substr($order->{$address . '_last_name'}, 0, 64),
    'state' => uc_get_zone_code($order->{$address . '_zone'}),
    'zip' => $order->{$address . '_postal_code'},
    'night_phone_a' => $phone_a,
    'night_phone_b' => $phone_b,
    'night_phone_c' => $phone_c,
  );

  if (variable_get('uc_paypal_wps_address_override', TRUE)) {
    $data['address_override'] = 1;
  }

  // Account for stores that just want to authorize funds instead of capture.
  if (variable_get('uc_paypal_wps_payment_action', 'Sale') == 'Authorization') {
    $data['paymentaction'] = 'authorization';
  }

  if (variable_get('uc_paypal_wps_submit_method', 'single') == 'itemized') {
    // List individual items.
    $i = 0;
    foreach ($order->products as $item) {
      $i++;
      $item_amount = uc_currency_paypal_convert($item->price);
      $data['amount_' . $i] = uc_currency_format($item_amount['value'], FALSE, FALSE, '.');
      $data['item_name_' . $i] = $item->title;
      $data['item_number_' . $i] = $item->model;
      $data['quantity_' . $i] = $item->qty;

      // PayPal will only display the first two...
      if (!empty($item->data['attributes']) && count($item->data['attributes']) > 0) {
        $o = 0;
        foreach ($item->data['attributes'] as $name => $setting) {
          $data['on' . $o . '_' . $i] = $name;
          $data['os' . $o . '_' . $i] = implode(', ', (array)$setting);
          $o++;
        }
      }
    }

    // Apply discounts (negative amount line items). For example, this handles
    // line items created by uc_coupon.
    $discount = 0;

    foreach ($order->line_items as $item) {
      if ($item['amount'] < 0) {
        // The minus sign is not an error! The discount amount must be positive.
        $discount -= $item['amount'];
      }
    }
    $discount_amount = uc_currency_paypal_convert($discount);
    if ($discount != 0) {
      $data['discount_amount_cart'] = $discount_amount['value'];
    }
  }
  else {
    // List the whole cart as a single item to account for fees/discounts.
    $total_amount = uc_currency_paypal_convert($order->order_total - $shipping - $tax); 
    $data['amount_1'] = uc_currency_format($total_amount['value'], FALSE, FALSE, '.');
    $data['item_name_1'] = t('Order @order_id at !store', array('@order_id' => $order->order_id, '!store' => uc_store_name()));
    $data['on0_1'] = t('Product count');
    $data['os0_1'] = count($order->products);
  }

  $form['#action'] = variable_get('uc_paypal_wps_server', 'https://www.sandbox.paypal.com/cgi-bin/webscr');

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => variable_get('uc_paypal_wps_checkout_button', t('Submit Order')),
  );

  return $form;
}

function uc_currency_paypal_convert_back($amount, $currency) {
  if (in_array($currency, _uc_paypal_currency_array())) {
    // Currency is supported by PayPal, do nothing.
    return array('amount' => $amount, 'currency' => $currency);
  } 
  else { // Currency is not supported by PayPal, convert back from USD.
    $new_amount = currency_api_convert('USD', $currency, $amount);
    if ($new_amount['status']) {
      return array('amount' => $new_amount['value'], 'currency' => $currency);
    }
    else { // Failed to convert to USD.
      watchdog('uc_paypal', 'Failed to convert from ' . $currency . ' to USD.' .
              $new_amount['message']);
      return array('amount' => $amount, 'currency' => $currency);
    }
  }
    
}