<?php

/**
 * product Node view function
 */
/*function ubercart_custom_node_view($node, $view_mode, $langcode) {
 global $user;
 $uid = $user->uid;
 $node_type = $node->type;
 if (($uid != 1) && (arg(0) == 'node') && ($node_type == 'product')) {
 drupal_goto();
 }
 if ($node->type == 'product' && $view_mode == 'full') {

 $xyobject = new ubercart_custom_model();
 $xyvalues = $xyobject->getxyvalues($node->nid);

 $header = array(
 array('data' => t('Sl.no')), array('data' => t('Runner Number')), array('data' => t('X-Value')), array('data' => t('Y-Value')),array('data' => t('Probability'))
 );
 $rows = array();
 $xycount = 0;
 foreach($xyvalues as $xyvalue){

 $xycount++;
 $rows[] = array(
 array('data' => $xycount),
 array('data' => $xyvalue->number),
 array('data' => $xyvalue->position_left),
 array('data' => $xyvalue->position_top),
 array('data' => $xyvalue->probability)
 );

 }


 if($xycount>0){
 $node->content['body'][0]['#markup'] =  theme('table', array('header' => $header, 'rows'=> $rows));
 }



 }
 }
 */

/**
 * Implements hook_views_api().
 */
function ubercart_custom_views_api() {
  return array(
        'version' => '3.0', 
        'path' => drupal_get_path('module', 'ubercart_custom') . '/views');
}

/**
 * Alter the menu items
 */
function ubercart_custom_menu_alter(&$items) {
  unset($items['cart']);
}


/**
 * Init function for adding the external file
 */
function ubercart_custom_init() {
  require_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'ocr') . '/ocr_product_node_saver.inc');

  drupal_add_css( 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.13/themes/start/jquery-ui.css', 'external');
  drupal_add_js('https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.13/jquery-ui.min.js', 'external');

  drupal_add_css(drupal_get_path('module', 'ubercart_custom') . '/ubercart_custom.css');
  drupal_add_js(drupal_get_path('module', 'ubercart_custom') . '/jquery.tagsinput.js');
  drupal_add_js(drupal_get_path('module', 'ubercart_custom') . '/ubercart_custom.js');

  //for redirect the cart page
  //when no products in the shopping cart
  if (arg(0) == 'cart' && arg(1) == '') {
    $no_of_cart_items = count(uc_cart_get_contents());
    if ($no_of_cart_items == '0') {
      drupal_set_message(t('There are no products in your shopping cart'));
      drupal_goto();
    }
  }
}


/**
 * Create the hook menu for each page
 * by using this we can map to the related page
 * @return
 * return menu items
 */
function ubercart_custom_menu() {
  //AJAX urls
  $items['cart_remove_item'] = array(
    'title' => '',
    'description' => '',
    'page callback' => 'cart_remove_item',
    'access arguments' => array('search photos'),
    'type' => MENU_CALLBACK
  );
  $items['cart_add_item'] = array(
    'title' => '',
    'description' => '',
    'page callback' => 'cart_add_item',
    'access arguments' => array('search photos'),
    'type' => MENU_CALLBACK
  );
  $items['ajax/cart_list_items'] = array(
    'title' => '',
    'description' => 'api point that returns json with list of items in the cart',
    'page callback' => 'cart_list_items',
    'access arguments' => array('search photos'),
    'type' => MENU_CALLBACK
  );
  $items['ajax/cart_clear'] = array(
    'title' => '',
    'description' => 'api point that clears cart of current user',
    'page callback' => 'cart_clear',
    'access arguments' => array('search photos'),
    'type' => MENU_CALLBACK
  );
  $items['ajax/save_numbers'] = array(
    'title' => '',
    'description' => 'api point that saves numbers on product',
    'page callback' => 'save_numbers',
    'access arguments' => array('edit own product content'),
    'type' => MENU_CALLBACK
  );
  $items['ajax/change_price'] = array(
    'title' => '',
    'description' => 'api point that saves new price on product',
    'page callback' => 'change_price',
    'access arguments' => array('edit own product content'),
    'type' => MENU_CALLBACK
  );

  $items['admin/store/settings/checkout/edit/fields_lang'] = array(
    'title' => 'Translate address fields',
    'description' => 'Translate the address field names',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ubercart_custom_uc_store_address_fields'),  
    'access arguments' => array('administer store'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 8,
  );


  return $items;
}

/**
 *
 * Function that adds product to cart for the AJAX calls on /cart_add_item?nid={nid}
 */
function cart_add_item() {
  if (!isset($_GET['nid'])) {
    echo json_message(FALSE, array('message' => t('Required parameter nid is not set.')));
    return;
  }
  $nid = $_GET['nid'];
  $cid = uc_cart_get_id($create = TRUE);

  // check whether item is already in the cart
  foreach (uc_cart_get_contents($cid) as $item) {
    if ($nid == $item->nid) {
      echo json_message(FALSE, array('message' => t('Did not add item. Item @nid is already in the cart.', array('@nid' => $nid ))));
      return;
    }
  }
  // add item to cart
  $url = uc_cart_add_item($nid, $qty = 1, $data = NULL, $cid);
  echo json_message(TRUE, array('message' => 'Added item to cart: ' . $url . '. Node Id: ' . $nid . '. cid:' . $cid));
   
}

function ubercart_custom_uc_order ($op, &$order, $arg2) {
  $max_order_value = 12;

  switch ($op) {
    case 'load':
      break;
    case 'save':
      // The first thing we do is remove the line item if it exists. Since users can go back and forth from the order review page to the checkout page, they may make different selections each time. By defaulting to having the line item removed, we prevent accidentally adding it multiple times, as well as preventing adding it if the user hasn't selected it when reviewing the page. So we loop through the existing line items searching for our specific line item, and removing it if it exists. We will add it afterwards if it needs to be added.
      foreach($order->line_items as $key => $line_item)
      {
        if($line_item['type'] == 'gift_discount') // 'gift_wrap' is the line item ID that will be defined after this loop.
        {
          unset($order->line_items[$key]);
          db_query('DELETE FROM {uc_order_line_items} WHERE order_id = :oid AND type = :type',  array(':oid' => $order->order_id, ':type' => 'gift_discount'));
          break;
        }
      }

      // Now we can get the total value of the order
      $subtotal = 0;
      foreach ($order->line_items as $item) {
        // need to get price from the node in case it was set to 0 already...
        if($item['type'] == 'subtotal')
        $subtotal += $item['amount'];
      }

      $discount = 0;
      if($subtotal > $max_order_value) {
        $discount = $subtotal - $max_order_value;
      }
      else {
        break;
      }

      // We will enter this conditional when the checkbox was selected.
      // In this tutorial, the amount of the line item is a fixed amount, 3 pounds, but in my real tutorial the value was a percentage of the total, as I explained above in the hook_line_order() explanation. You will most likely need to re-calculate the value of the line item again here, however in this tutorial it is a fixed amount.
      $line_item_value = $discount;
      // Next we add the line item
      uc_order_line_item_add
      (
      $order->order_id, // This is the order ID.
          'gift_discount', // This is the line item ID. We used this ID to remove the line item in the loop above.
      t('Package Discount'), // This is the text that will be shown on the order review page to describe what the line item is
      -1 * $discount, // This is the value of the line item. Discounts will be a negative number, surcharges a positive number
      NULL, // This is the weight of the line item
      array() // Here you can pass any data that your module will use for itself when the order is submitted. In the case of my real module, I passed the value of the message that should be attached to the order when the user purchases gift wrapping. In this module there is no custom value so I actually wouldn't even pass the empty array normally. I just put it here to explain how it can be used.
      );

      break;

    case 'total':
      // Here we return a value that will be added to the order total. For discounts we would return a negative value, for surcharges we return a positive value. We do NOT return the new total, only the change in the total.
      // We loop through each of the line items to see if ours has been added. If it has, we adjust the order total accordingly.
      foreach($order->line_items as $line_item)
      {
        if($line_item['type'] == 'gift_discount') // 'gift_wrap' is the ID of the line item as defined when $op equals 'save'
        {
          // If we enter this, the line item exists, so we need to return the value of the line item. This will adjust the order total.
          return $line_item['amount'];
        }
      }
      break;

    case 'delete':
      // Delete existing order codes

      //TO DO: determine if uses should be deleted or put global setting in for user to decide
      break;
    case 'update':
      if ($arg2 == 'abandoned') {
        rules_invoke_event('ubercart_custom_order_abandoned', $order);
      }
      break;
  }
}


/**
 *
 * Function that removes product from cart for the AJAX calls on /cart_add_item?nid={nid}
 */
function cart_remove_item() {
  if (!isset($_GET['nid'])) {
    echo json_message(FALSE, array('message' => t('Required parameter nid is not set.')));
    return;
  }

  $nid = $_GET['nid'];
  $cart_ids = array();
  $cid = uc_cart_get_id($create = TRUE);
  $items = count_cart_items($cid);
  $photographers = count_cart_photographers($cid);
  $subtotal = cart_total_amount($cid);
  foreach (uc_cart_get_contents($cid) as $item) {
    if ($nid == $item->nid) {
      uc_cart_remove_item($nid, $cid, $data = array('module' => 'uc_product')); //, $cid = $uid, $data = array('module' => 'uc_product'));

      echo json_message(TRUE,
      array(
            		'message' => t('Removed item from the cart.'), 
      				'nid' => $nid,
                    'items' => $items - 1,
                    'photographers' => count_cart_photographers($cid),
                    'subtotal' => $subtotal - $item->price * $item->qty,
      )
      );
      return;
    }
  }

  echo json_message(FALSE, array('message' => t('Item was not found in the cart.'), 'nid' => $nid));
}

function order_summary_text() {

}

/**
 *
 * Counts number of items in the cart for given cart id
 * @param integer $cid
 */
function count_cart_items($cid) {
  return count(uc_cart_get_contents($cid));
}

/**
 * Gets subtotal of the cart for given cart id
 *
 * @param integer $cid - cart id
 */
function cart_total_amount($cid) {
  $subtotal = 0;
  foreach (uc_cart_get_contents($cid) as $item) {
    $subtotal += $item->price * $item->qty;
  }
  return $subtotal;
}


/**
 *
 * Counts number of photographers who took photos that were selected in the cart.
 * @param integer $cid
 */
function count_cart_photographers($cid) {
  $cart = uc_cart_get_contents($cid);

  foreach ($cart as $index=> $product) {
    $photographer[] = $product->uid;
  }

  return count(array_unique($photographer));

}

/**
 *
 * Function that generates JSON message that can be returned for AJAX call
 * @param boolean $success shows whether request was actioned successfully
 * @param string $message message that will be added to the response.
 * 	Message attribute will be ignored if not provided or NULL.
 */
function json_message($success, $attributes = array()) {
  $result = array('success' => $success);

  foreach ($attributes as $index => $attribute) {
    $result[$index] = $attribute;
  }
  return json_encode($result);
}

/**
 * AJAX call
 * returns json with the list of items in the cart of current user
 */
function cart_list_items() {
  $event = $_POST['event'];
  $number = $_POST['number'];
  
  $cid = uc_cart_get_id($create = TRUE);
  
  // remove cart items selected in previous searches
  ucr_cart_remove_items_new_search($cid, $event, $number);
  
  
  $subtotal = 0;
  $items = array();
  foreach (uc_cart_get_contents($cid) as $item) {
    $subtotal += $item->price * $item->qty;
    $items[]=array('nid' => $item->nid, 'price' => $item->price, 'qty' => $item->qty);
  }

  $result = array('total' => $subtotal, 'items' => $items, 'event' => $event, 'number' => $number);
  echo json_encode($result);
  
  
}

/**
 * 
 * Remove items from cart that don't match the search
 * @param integer $event_id
 * @param integer $number
 */
function ucr_cart_remove_items_new_search($cid, $event, $number) {
  
  $items = uc_cart_get_contents($cid);
  
  foreach ($items as $item) {
    $nid = $item->nid;
    $node = node_load($nid);
    $item_numbers = field_get_items('node', $node, 'ocr_numbers', $node->language);
    $item_event = field_get_items('node', $node, 'field_event_reference', $node->language);
   
    if ($item_event[0]['nid'] == $event) {
    	/* Find a better way to restrict cart items
       $same_number = FALSE;
       foreach ($item_numbers as $item_number) {
         if (partial_match($item_number['value'], $number)) {
           $same_number = TRUE;
         }
       }
       if (!$same_number) {
         watchdog('debug', 'Removing item from cart due to different number: ' . $nid);
          uc_cart_remove_item($nid, $cid, $data = array('module' => 'uc_product'));   
       } */
    } 
    else { // event in the search is different
      watchdog('debug', 'Removing item from cart due to different event: ' . $nid);
      uc_cart_remove_item($nid, $cid, $data = array('module' => 'uc_product'));
    } 
    
  }

}
/**
 * 
 * Checks whether one of the values contains the other value
 * @param unknown_type $val1
 * @param unknown_type $val2
 */
function partial_match($val1, $val2) {
  // convert values to string
  $strval1 = strval($val1);
  $strval2 = strval($val2);
  // check if there is a partial match
  if(strpos($strval1, $strval2) !== FALSE || strpos($strval2, $strval1) !== FALSE) {
    return TRUE;
  } 
  else {
    return FALSE;
  }
}

/**
 * AJAX call
 * Clears the cart of the current user
 */
function cart_clear() {
  uc_cart_empty(uc_cart_get_id());
  echo json_message(TRUE, array('message' => 'Cart was cleared.'));
}

/**
 * Form alter function
 * by using this form_alter function we can alter the form without editing core module
 * @param $form,$form_state,$form_id
 * $form give the form value
 * $form_id is the form id
 */
function ubercart_custom_form_alter(&$form, $form_state, $form_id) {

  //alter the product node edit form
  if ($form['#form_id'] == 'product_node_form') {
    $nid = $form['nid']['#value'];
    $node_order_status = new ubercart_custom_model();
    $status_of_image = $node_order_status->image_order_status($nid);
    //Check the product already sold or not
    //if sold means disable the selling price in the product edit forms
    if ($status_of_image != 0) {
      $form['base']['prices']['sell_price']['#disabled'] = 'TRUE';
    }
    /*
     $xyobject = new ubercart_custom_model();
     $xyvalues = $xyobject->getxyvalues($nid);
     $header = array(
     array('data' => t('Sl.no')), array('data' => t('Runner Number')), array('data' => t('X-Value')), array('data' => t('Y-Value')),array('data' => t('Probability'))
     );
     $rows = array();
     $xycount = 0;
     foreach($xyvalues as $xyvalue){

     $xycount++;
     $rows[] = array(
     array('data' => $xycount),
     array('data' => $xyvalue->runner_number),
     array('data' => $xyvalue->xvalue),
     array('data' => $xyvalue->yvalue),
     array('data' => $xyvalue->probability)
     );

     }

     if($xycount>0){
     $form['ocr_xydetails'] = array(
     '#markup' => theme('table', array('header' => $header, 'rows'=> $rows))
     );
     }

     */

  }

  //alter the checkout form
  if ($form['#form_id'] == 'uc_cart_checkout_form') {

    //$form['panes']['payment']['payment_method']['#options']['paypal_wps'] = 'Paypal Standard';
    //$form['panes']['payment']['details']['#markup'] = '';


    $form['panes']['billing']['#type'] = '';
    $form['panes']['customer']['#type'] = '';
    $form['panes']['cart']['#type'] = '';

    $form['panes']['customer']['email_text']['#prefix'] =  '<span class="checkout-email">';
    $form['panes']['customer']['email_text']['#suffix'] =  '</span>';


    $form['panes']['payment']['payment_method']['#type'] = 'hidden';
    $form['panes']['payment']['details']['cc_number']['#required'] = TRUE;
    $form['panes']['payment']['details']['cc_cvv']['#required'] = TRUE;


    $form['panes']['payment']['details']['cc_policy']['#markup'] = '';
    $form['panes']['payment']['details']['cc_number']['#size'] = '32';
    $form['panes']['payment']['details']['cc_exp_month']['#title'] = 'Expiration Month';
    $form['actions']['cancel'] = '';
    $form['actions']['continue']['#value'] = '';

  }

  //alter for review order page
  if ($form['#form_id'] == 'uc_cart_checkout_review_form') {
    $form['actions']['back']= '';
    $form['actions']['back']['#markup'] = l("", "cart/checkout", array(
                                          'attributes' => array(
                                            'id' => 'edit-back',

    )));


    $form['actions']['submit']['#value'] = t('');

  }

}


/**
 * Add to cart submit button in the search result page
 * @param type $form
 * @param type $form_state
 * @return string
 */

function search_result_cart($form, &$form_state) {
  $form = array();

  $form['cart_hidden']   = array('#type' => 'textfield', '#value' => '', '#id' => 'cart_hidden', '#prefix' => '<div style="display:none;">', '#suffix' => '</div>');
  $form['selected_product'] = array('#type' => 'textfield', '#title' => '', '#id' => 'selected_cart_products', '#prefix' => '<div style="display:none;">', '#suffix' => '</div>');
  $url = url('cart/checkout');
  // @todo move this html block from here to theme
  $form['cart_summary'] = array('#markup' =>
    "<div class='cart_summ'>
    	<div id='currency-sign' style='display:none'>" . variable_get('uc_currency_sign') . "</div>
  		<div class='summary_item_cost'>
  			<span class='cart-block-icon-full' title=" . t('View your shopping cart.') . "></span>
			<span class='shop_cart_title'>" . t('Shopping Cart') . "</span>
		</div>
		<div class='proceed_to_cart'>
			<a href='$url'></a>
			
		</div>
		<div>
			<span class='summary_selected_photos'>"
  . t('Photos') . ':&nbsp;' .
            "<span class='placeholder'></span>
			</span>
				<span class='summary_cost'>" . t('Total') . ":&nbsp;" . variable_get('uc_currency_sign') . 
                                      "<span class='placeholder'></span>
				</span>
		</div>
	</div>");
  $form['prev_img_det'] = array('#markup' =>
 	'<div class="cost_auth_det">
  		<span id="photo_cost">' . t('Price') .':<label class="photo_cost"></label>
  		</span><br/>
  		<span id="photo_author">' . t('Photo by') . ':<label class="photo_author"></label>
  		</span></div>', '#prefix' => '<div class="prev_img_details">', );
  $form['add_to_cart'] = array('#type' => 'submit', '#value' => '', '#id' => 'add_to_cart', '#suffix' => '<div id="prev_img"><img  id="preview_image"  src="" alt="preview-image"/></div></div>', );

  return $form;
}


/**
 * AJAX call
 * Function that adds/removes runners' numbers from product node
 * @return
 * JSON message that can be returned for AJAX call
 */
function save_numbers() {
  $nid = $_POST['nid'];
  $number = $_POST['number'];
  $option = $_POST['option'];

  if (empty($nid) || empty($number) || empty($option)) {
    echo json_message(FALSE, array('message' => t('Required parameter is not set')));
    return;
  }

  $number_int = (int) $number;

  if ((string)$number_int != $number) {
    echo json_message(FALSE, array('message' => t('Number is not int')));
    return;
  }

  //check permission
  $node = node_load($nid);
  if (!node_access("update", $node)) {
    echo json_message(FALSE, array('message' => t('Has no permissions')));
    return;
  }

  $productSaver = new ProductNodeSaver($nid);

  switch ($option) {
    case "add":
      $productSaver->AddNumber($number);
      break;

    case "remove":
      $productSaver->RemoveNumber($number);
      break;

    default:
      echo json_message(FALSE, array('message' => t('Parametr option=@option is not supported', array('@option' => $option))));
      return;
  }

  $productSaver->Save();

  echo json_message(TRUE, array('message' => 'node=' . $nid . ',number=' . $number . ',option=' . $option));
  return;
}

/**
 * AJAX call
 * Function that changes price from product node
 * @return
 * JSON message that can be returned for AJAX call
 */
function change_price() {
  $nid = $_POST['nid'];
  $price  = $_POST['price'];
  if (empty($nid) || empty($price)) {
    echo json_message(FALSE, array('message' => t('Required parametr is not set')));
    return;
  }

  //check permission
  $node = node_load($nid);
  if (!node_access("update", $node)) {
    echo json_message(FALSE, array('message' => t('Has no permissions')));
    return;
  }

  $productSaver = new ProductNodeSaver($nid);
  $productSaver->SetPrice($price);
  $productSaver->Save();

  echo json_message(TRUE, array('message' => t('New price was set to @price', array('@price' => $price)), 'nid' => $nid, 'price' =>  $price));
  return;
}

/*
 * Enable traslation of the uberacart Adress fields.
 */
function ubercart_custom_uc_store_address_fields() {
  $form = array();
  //Copied from uc_store_address_fields_form
  $fields = array(
    'first_name' => array(t('First name'), TRUE),
    'last_name' => array(t('Last name'), TRUE),
    'phone' => array(t('Phone number'), TRUE),
    'company' => array(t('Company'), TRUE),
    'street1' => array(t('Street address 1'), TRUE),
    'street2' => array(t('Street address 2'), TRUE),
    'city' => array(t('City'), TRUE),
    'zone' => array(t('State/Province'), TRUE),
    'country' => array(t('Country'), TRUE),
    'postal_code' => array(t('Postal code'), TRUE),
    'address' => array(t('Address'), FALSE),
    'street' => array(t('Street address'), FALSE),
  );
  //Just loop and build the fields
  foreach ($fields as $field => $data) {
    $form['uc_field_'.$field] = array(
        '#type' => 'textfield',
        '#title' => $data[0],
        '#default_value' => $data[0],//variable_get('uc_field_'.$field, $data),    
    );
  }
  //Magic happens
  return system_settings_form($form);
}