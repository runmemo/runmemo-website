<?php

/**
 * product Node view function
 */
/*function ubercart_custom_node_view($node, $view_mode, $langcode) {
 global $user;
 $uid = $user->uid;
 $node_type = $node->type;
 if (($uid != 1) && (arg(0) == 'node') && ($node_type == 'product')) {
 drupal_goto();
 }
 if ($node->type == 'product' && $view_mode == 'full') {

 $xyobject = new ubercart_custom_model();
 $xyvalues = $xyobject->getxyvalues($node->nid);

 $header = array(
 array('data' => t('Sl.no')), array('data' => t('Runner Number')), array('data' => t('X-Value')), array('data' => t('Y-Value')),array('data' => t('Probability'))
 );
 $rows = array();
 $xycount = 0;
 foreach($xyvalues as $xyvalue){

 $xycount++;
 $rows[] = array(
 array('data' => $xycount),
 array('data' => $xyvalue->number),
 array('data' => $xyvalue->position_left),
 array('data' => $xyvalue->position_top),
 array('data' => $xyvalue->probability)
 );

 }


 if($xycount>0){
 $node->content['body'][0]['#markup'] =  theme('table', array('header' => $header, 'rows'=> $rows));
 }



 }
 }
 */

/**
 * Implements hook_views_api().
 */
function ubercart_custom_views_api() {
  return array(
        'version' => '3.0', 
        'path' => drupal_get_path('module', 'ubercart_custom') . '/views');
}

/**
 * Alter the menu items
 */
function ubercart_custom_menu_alter(&$items) {
  unset($items['cart']);
}


/**
 * Init function for adding the external file
 */
function ubercart_custom_init() {

  drupal_add_css(drupal_get_path('module', 'ubercart_custom') . '/ubercart_custom.css');

  //for redirect the cart page
  //when no products in the shopping cart
  if (arg(0) == 'cart' && arg(1) == '') {
    $no_of_cart_items = count(uc_cart_get_contents());
    if ($no_of_cart_items == '0') {
      drupal_set_message(t('There are no products in your shopping cart'));
      drupal_goto();
    }
  }
}


/**
 * Create the hook menu for each page
 * by using this we can map to the related page
 * @return
 * return menu items
 */
function ubercart_custom_menu() {
  //AJAX urls
  $items['cart_remove_item'] = array(
    'title' => '',
    'description' => '',
    'page callback' => 'cart_remove_item',
    'access arguments' => array('search photos'),
    'type' => MENU_CALLBACK
  );
  $items['cart_add_item'] = array(
    'title' => '',
    'description' => '',
    'page callback' => 'cart_add_item',
    'access arguments' => array('search photos'),
    'type' => MENU_CALLBACK
  );
  $items['cart_list_items'] = array(
    'title' => '',
    'description' => '',
    'page callback' => 'cart_list_items',
    'access arguments' => array('search photos'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * 
 * Function that adds product to cart for the AJAX calls on /cart_add_item?nid={nid}
 */
function cart_add_item() {
  if (!isset($_GET['nid'])) {
    echo cart_action_message(FALSE, 'Required parameter nid is not set.');
    return;
  }
  $nid = $_GET['nid'];
  $cid = uc_cart_get_id($create = TRUE);
  
  // check whether item is already in the cart
  foreach (uc_cart_get_contents($cid) as $item) {
    if ($nid == $item->nid) {
      echo cart_action_message(FALSE, 'Did not add item. Item ' . $nid . ' is already in the cart.');
      return;
    }
  }
  // add item to cart
  $url = uc_cart_add_item($nid, $qty = 1, $data = NULL, $cid);
  echo cart_action_message(TRUE, 'Added item to cart: ' . $url . '. Node Id: ' . $nid . '. cid:' . $cid);
   
}

/**
 * 
 * Function that removes product from cart for the AJAX calls on /cart_add_item?nid={nid}
 */
function cart_remove_item() {
  if (!isset($_GET['nid'])) {
    echo cart_action_message(FALSE, 'Required parameter nid is not set.');
    return;
  }
 
  $nid = $_GET['nid'];
  $cart_ids = array();
  $cid = uc_cart_get_id($create = TRUE);
  foreach (uc_cart_get_contents($cid) as $item) {
    if ($nid == $item->nid) {
      uc_cart_remove_item($nid, $cid, $data = array('module' => 'uc_product')); //, $cid = $uid, $data = array('module' => 'uc_product'));
  
      echo cart_action_message(TRUE, 'Removed item from the cart:' . $nid);
      return;
    }
  }
  
  echo cart_action_message(FALSE, 'Item was not found in the cart.');
}

/**
 * 
 * Function that generates JSON message that can be returned for AJAX call 
 * @param boolean $success shows whether request was actioned successfully
 * @param string $message message that will be added to the response. 
 * 	Message attribute will be ignored if not provided or NULL.
 */
function cart_action_message($success, $message = NULL) {
  if (!isset($message)) {
    $result = array('success' => $success);
  }
  else {
     $result = array('success' => $success, 'message' => $message);
  }
   return json_encode($result);
}

/*
 * AJAX cart add,remove function
 */
function cart_list_items() {
  $cid = uc_cart_get_id($create = TRUE);
  $subtotal = 0;
  $items = array();
  foreach (uc_cart_get_contents($cid) as $item) {
    $subtotal += $item->price * $item->qty;
    $items[]=array('nid' => $item->nid, 'price' => $item->price, 'qty' => $item->qty);
  }
  
  $result = array('total' => $subtotal, 'items' => $items);
  echo json_encode($result);
}




/**
 * Form alter function
 * by using this form_alter function we can alter the form without editing core module
 * @param $form,$form_state,$form_id
 * $form give the form value
 * $form_id is the form id
 */
function ubercart_custom_form_alter(&$form, $form_state, $form_id) {

  //alter the product node edit form
  if ($form['#form_id'] == 'product_node_form') {
    $nid = $form['nid']['#value'];
    $node_order_status = new ubercart_custom_model();
    $status_of_image = $node_order_status->image_order_status($nid);
    //Check the product already sold or not
    //if sold means disable the selling price in the product edit forms
    if ($status_of_image != 0) {
      $form['base']['prices']['sell_price']['#disabled'] = 'TRUE';
    }
    $form['#validate'][] = 'product_pricing_validation';
    /*
     $xyobject = new ubercart_custom_model();
     $xyvalues = $xyobject->getxyvalues($nid);
     $header = array(
     array('data' => t('Sl.no')), array('data' => t('Runner Number')), array('data' => t('X-Value')), array('data' => t('Y-Value')),array('data' => t('Probability'))
     );
     $rows = array();
     $xycount = 0;
     foreach($xyvalues as $xyvalue){

     $xycount++;
     $rows[] = array(
     array('data' => $xycount),
     array('data' => $xyvalue->runner_number),
     array('data' => $xyvalue->xvalue),
     array('data' => $xyvalue->yvalue),
     array('data' => $xyvalue->probability)
     );

     }

     if($xycount>0){
     $form['ocr_xydetails'] = array(
     '#markup' => theme('table', array('header' => $header, 'rows'=> $rows))
     );
     }

     */

  }

  //alter the checkout form
  if ($form['#form_id'] == 'uc_cart_checkout_form') {

    //$form['panes']['payment']['payment_method']['#options']['paypal_wps'] = 'Paypal Standard';
    //$form['panes']['payment']['details']['#markup'] = '';


    $form['panes']['billing']['#type'] = '';
    $form['panes']['customer']['#type'] = '';
    $form['panes']['cart']['#type'] = '';

    $form['panes']['customer']['email_text']['#prefix'] =  '<span class="checkout-email">';
    $form['panes']['customer']['email_text']['#suffix'] =  '</span>';


    $form['panes']['payment']['payment_method']['#type'] = 'hidden';
    $form['panes']['payment']['details']['cc_number']['#required'] = TRUE;
    $form['panes']['payment']['details']['cc_cvv']['#required'] = TRUE;


    $form['panes']['payment']['details']['cc_policy']['#markup'] = '';
    $form['panes']['payment']['details']['cc_number']['#size'] = '32';
    $form['panes']['payment']['details']['cc_exp_month']['#title'] = 'Expiration Month';
    $form['actions']['cancel'] = '';
    $form['actions']['continue']['#value'] = '';

  }

  //alter for review order page
  if ($form['#form_id'] == 'uc_cart_checkout_review_form') {
    $form['actions']['back']= '';
    $form['actions']['back']['#markup'] = l("", "cart/checkout", array(
                                          'attributes' => array(
                                            'id' => 'edit-back',

    )));


    $form['actions']['submit']['#value'] = t('');

  }

}


//validate the sell price when edit the product node
function product_pricing_validation($form, &$form_state) {

  $img_cost = $form['base']['prices']['sell_price']['#value'];

  if (!(($img_cost >= 2) && ($img_cost <= 100))) {
    form_set_error('field_sell_price', t('Enter sell price between 2 to 100 only'));
  }

}

/**
 * Add to cart submit button in the search result page
 * @param type $form
 * @param type $form_state
 * @return string
 */

function search_result_cart($form, &$form_state) {
  $form = array();

  $form['cart_hidden']   = array('#type' => 'textfield', '#value' => '', '#id' => 'cart_hidden', '#prefix' => '<div style="display:none;">', '#suffix' => '</div>');
  $form['selected_product'] = array('#type' => 'textfield', '#title' => '', '#id' => 'selected_cart_products', '#prefix' => '<div style="display:none;">', '#suffix' => '</div>');
  $url = url('cart/checkout');
  // @todo move this html block from here to theme
  $form['cart_summary'] = array('#markup' => 
    "<div class='cart_summ'>
  		<div class='summary_item_cost'>
  			<span class='cart-block-icon-full' title='View your shopping cart.'></span>
			<span class='shop_cart_title'>" . t('Shopping Cart') . "</span>
		</div>
		<div class='proceed_to_cart'>
			<a href='$url'></a>
		</div>
		<div>
			<span class='summary_selected_photos'>
				<span class='placeholder'></span>" 
                                . t('Items') .
                                "</span>
				<span class='summary_cost'>Total:&nbsp;" . variable_get('uc_currency_sign') . 
                                      "<span class='placeholder'></span>
				</span>
		</div>
	</div>");
  $form['prev_img_det'] = array('#markup' =>
   t('<div class="cost_auth_det">
  		<span id="photo_cost">Price:<label class="photo_cost">' . variable_get('uc_currency_sign') . '</label>
  		</span><br/>
  		<span id="photo_author">Photo by:<label class="photo_author"></label>
  		</span></div>'), '#prefix' => '<div class="prev_img_details">', );
  $form['add_to_cart'] = array('#type' => 'submit', '#value' => '', '#id' => 'add_to_cart', '#suffix' => '<div id="prev_img"><img  id="preview_image"  src="" alt="preview-image"/></div></div>', );

  return $form;
}


/**
 * Implements hook_form_FORM_ID_alter() for the node form.
 * Adds additional fields and "Save" button on node-product page.
 * @param type $form
 * @param type $form_state
 * @param type $form_id
 * @return renderable array
 */
function ubercart_custom_form_product_node_custom_form_alter(&$form, &$form_state, $form_id) {

  
  $node = menu_get_object();
  if ($node == FALSE) {
    watchdog('Callback', 'Form called from a wrong place: ubercart_custom_form_product_node_form_alter()', array($form), WATCHDOG_ERROR);
    return;
  }
  
  //check permission
  if (!node_access("update", $node)) {
    return;
  }
  
  //Save nid for ajax callback
  $form['product_id'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );   
   
  //Price field
  $form['product_price'] = array(
      '#type' => 'textfield',
      '#size' => 10,
      '#title' => t('Price'),       
      //'#description' => t('Set the price'),
      '#default_value' => number_format($node->price, 2),
//      '#ajax' => array(
//        'callback' => 'set_price_callback',
//        'wrapper' => 'product-edit-price-container',
//        'effect' => 'fade',
//      )
  );
  
  
   $form['save_button'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 15,      
    '#attributes' => array('class' => array('button')),
//   '#submit' => array('set_price_callback'),
    '#ajax' => array(
      'callback' => 'set_price_callback',
      'wrapper' => 'product-edit-price-container',
      'effect' => 'fade',
    )      
  );
   
//    $form['product_runners_numbers'] = array(
//      '#type' => 'textfield',
//      '#size' => 10,
//      '#title' => t('Runn'),
//      '#description' => t('Set price'),
//      '#default_value' => $node->price,
//      '#ajax' => array(
//        'callback' => 'set_price_callback',
//        'wrapper' => 'product-edit-price-container',
//        'effect' => 'fade',
//      )
//    ); 

   
  //Placeholder for "Changes was saved" message
  $form['container'] = array(
    '#prefix' => '<div id="product-edit-price-container" style="height:20px">',
    '#suffix' => '</div>',
  );
    
  return $form;
  
}

/**
 * Implements AJAX callback for "Save" button on node-product page.
 * @param type $form
 * @param type $form_state
 * @return renderable array
 */
function set_price_callback($form, $form_state) {
  
  $nid = $form['product_id']['#value'];
  $node = node_load($nid);
  
  //check permission
  if (!node_access("update", $node)) {
    return;
  }
  
  //check input value
  $price = $form_state['values']['product_price'];
  if (!is_numeric($price) || $price < 2 || $price > 100) {
    $markup = '<div id="product-edit-price-container" style="color: red;">' . t('Price must be between 2.00 and 100.00!') . '</div>';
    return $markup;
  }
  
  //change sell_price
  $node->sell_price = $price;
  node_save($node);
    
  $markup = '<div id="product-edit-price-container" style="color: green;">' . t('Price was updated!') . '</div>';
  return $markup;
 
}

/**
 * Validates product sell price.
 * @param type $form
 * @param type $form_state
 */
//function product_price_validate($form, &$form_state) {
//  $price = $form_state['values']['product_price'];
//  if (!is_numeric($price) || $price < 2 || $price > 100) {
//    form_set_error('product_price', t('Price must be between 2.00 and 100.00'));
//  }
//}
