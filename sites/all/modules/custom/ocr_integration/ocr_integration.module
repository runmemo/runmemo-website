<?php

/**
 * @file
 * Module file for OCR Integration
 */
 
	
	
	require_once DRUPAL_ROOT . '/sites/all/libraries/Amazon/SQS/client.php';
 
 

/**
 * Implements hook_menu().
 *
 * 
 */
function ocr_integration_menu() {
  $items['sendmessage'] = array(
    'title'           => 'Send Message to OCR',
    'description'     => 'Send Message to OCR',
	'page callback' => array('invokeSendMessage'),
	'access arguments' => array('administer store'),
	
  );
  $items['receivemessage'] = array(
    'title'           => 'Receive Message from OCR',
    'description'     => 'Receive Message from OCR',
	'page callback' => array('invokeReceiveMessage'),
	'access arguments' => array('administer store'),
	
  );
  return $items;
}

/**
*Configuration settings for amazon
*/
function amazonsqs_config(){

	$aws_access_key = variable_get('aws_access_key', '');
    $aws_secret_key = variable_get('aws_secret_key', '');
	$service = new Amazon_SQS_Client($aws_access_key,$aws_secret_key);
	return $service;
}

/**
* The SendMessage action delivers a message to the specified queue.
*   
* @param Amazon_SQS_Interface $service instance of Amazon_SQS_Interface
* @param mixed $request Amazon_SQS_Model_SendMessage or array of parameters
*/
function invokeSendMessage($nid=0,$fname="") { 
    require_once DRUPAL_ROOT . '/sites/all/libraries/Amazon/SQS/Model/SendMessageRequest.php';
    $service = amazonsqs_config();
    $request = new Amazon_SQS_Model_SendMessageRequest();
	//create message
	$bucket = variable_get('amazons3_bucket', '');
	
	$message_arr = array(
						'ExternalReference' => $nid,
						'ImageKey' => $fname,
						'ImageBucket' => $bucket,
						'OutQueue' => "http://eu-west-1.queue.amazonaws.com/test-ocr-results",
						);  
	$message = json_encode($message_arr);									
	//$message = "Message from RunmemoTest access key...";
	$request->setQueueUrl('https://eu-west-1.queue.amazonaws.com/374933304004/test-ocr-requests');
	$request->setMessageBody($message);
	//$response = invokeSendMessage($service, $request);
	$response = $service->sendMessage($request);
	

 }
 /*
  * Retrieves one or more messages from the specified queue.  For each message returned, the response includes the message body; MD5 digest of the message body; receipt handle, which is the identifier you must provide when deleting the message; and message ID of each message. Messages returned by this action stay in the queue until you delete them. However, once a message is returned to a ReceiveMessage request, it is not returned on subsequent ReceiveMessage requests for the duration of the VisibilityTimeout. If you do not specify a VisibilityTimeout in the request, the overall visibility timeout for the queue is used for the returned messages.
  *   
  * @param Amazon_SQS_Interface $service instance of Amazon_SQS_Interface
  * @param mixed $request Amazon_SQS_Model_ReceiveMessage or array of parameters
  */
  function invokeReceiveMessage() 
  {
	require_once DRUPAL_ROOT . '/sites/all/libraries/Amazon/SQS/Model/ReceiveMessageRequest.php';
    $service = amazonsqs_config();
	$request = new Amazon_SQS_Model_ReceiveMessageRequest();
	$request->setQueueUrl('https://eu-west-1.queue.amazonaws.com/374933304004/test-ocr-results');
	$request->SetMaxNumberOfMessages(10);
	$request->SetVisibilityTimeout(1000);
	$responsebody = "";
	$response = $service->receiveMessage($request);
	if ($response->isSetReceiveMessageResult()) { 
                   
			$receiveMessageResult = $response->getReceiveMessageResult();
			$messageList = $receiveMessageResult->getMessage();
			foreach ($messageList as $message) {
				
				if ($message->isSetMessageId()) 
				{
				   
					
					
					$messageid = $message->getMessageId() ;
					
				}
				if ($message->isSetBody()) 
				{
					echo $responsebody = $message->getBody();
					
					
				}
             }  
        }	
		
		$reponsearr   = json_decode(trim($responsebody));
			
		$nid         = $reponsearr->ExternalReference;
		$imagekey    = $reponsearr->ImageKey;
		$imagebucket = $reponsearr->ImageBucket;exit;
		$success     = $responsearr->Success;
		$number[]    = $responsearr->Numbers;
		if($success == true){
			//inserting runner number
			if($responsearr->ExternalReference){
			
				foreach($responsearr->Numbers as $photo){	
					$values = array(
					array(
					'entity_id' => $nid ,
					'field_runner_number_value' => $photo['Number'],
					
					),
					
					);
				}
				$query = db_insert('field_data_field_runner_number')->fields(array('entity_id', 'field_runner_number_value'));
				foreach ($values as $record) {
				$query->values($record);
				}
				$query->execute();
		    }	
		}
        $insert = db_insert('ocr_messages')
		->fields(array(
		'ocr_response' => $responsebody,
		'ocr_status' => $success,
		'received' => REQUEST_TIME,
		))
		->execute();		
			
	
 }
 

/*
* hook_cron()
*/
function ocr_integration_cron(){
	$response     = invokeReceiveMessage();
	
	
}