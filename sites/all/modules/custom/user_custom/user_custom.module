<?php

/**
 * Implements hook_menu_default_menu_custom().
 */
function user_custom_menu_default_menu_custom() {
  $menus = array();

  // Exported menu: menu-anonymous-menu.
  $menus['anonymous-menu'] = array(
    'menu_name' => 'anonymous-menu',
    'title' => 'Anonymous Menu',
    'description' => '',
  );
  // Translatables
  // Included for use with string extractors like potx.
  t('Anonymous Menu');
 
  return $menus;
}

/**
 * Implements hook_menu_default_menu_links().
 */
function anonymous_menu_menu_default_menu_links() {
  $menu_links = array();

  // Exported menu link: menu-anonymous-menu:user
  $menu_links['anonymous-menu:user'] = array(
    'menu_name' => 'menu-anonymous-menu',
    'link_path' => 'user',
    'router_path' => 'user',
    'link_title' => 'Login',
    'options' => array(
      'attributes' => array(
        'title' => '',
      ),
      'alter' => TRUE,
    ),
    'module' => 'menu',
    'hidden' => '0',
    'external' => '0',
    'has_children' => '0',
    'expanded' => '0',
    'weight' => '0',
  );
  // Exported menu link: menu-anonymous-menu:user/register
  $menu_links['anonymous-menu:user/register'] = array(
    'menu_name' => 'menu-anonymous-menu',
    'link_path' => 'user/register',
    'router_path' => 'user/register',
    'link_title' => 'Register',
    'options' => array(
      'attributes' => array(
        'title' => '',
      ),
    ),
    'module' => 'menu',
    'hidden' => '0',
    'external' => '0',
    'has_children' => '0',
    'expanded' => '0',
    'weight' => '0',
  );
  // Exported menu link: navigation:photographer/upload
  $menu_links['navigation:photographer/upload'] = array(
    'menu_name' => 'navigation',
    'link_path' => 'photographer/upload',
    'router_path' => 'photographer/upload',
    'link_title' => 'Upload Photos',
    'options' => array(
      'attributes' => array(
        'title' => 'View the objects in a bucket on your Amazon S3 account.',
      ),
    ),
    'module' => 'system',
    'hidden' => '0',
    'external' => '0',
    'has_children' => '0',
    'expanded' => '0',
    'weight' => '1',
  );
  
  // Exported menu link: user-menu:user/logout
  $menu_links['user-menu:user/logout'] = array(
    'menu_name' => 'user-menu',
    'link_path' => 'user/logout',
    'router_path' => 'user/logout',
    'link_title' => 'Logout',
    'options' => array(
      'alter' => TRUE,
      'attributes' => array(
        'title' => '',
      ),
    ),
    'module' => 'system',
    'hidden' => '0',
    'external' => '0',
    'has_children' => '0',
    'expanded' => '0',
  );
  // Translatables
  // Included for use with string extractors like potx.
  t('Login');
  t('Logout');
  t('Register');
  t('Upload Photos');
 
  return $menu_links;
}

/**
 * Form alter function
 * by using this form_alter function we can alter the form without editing core module
 * @param $form,$form_state,$form_id
 * $form give the form value
 * $form_id is the form id
 */
function user_custom_form_user_login_alter(&$form, $form_state) {
      $form['fake-password'] = array(
         '#id' => 'edit-pass-fake', 
         '#type' => 'textfield',
         '#default_value' => 'Password',    
         '#title' => t('Password'),
         '#maxlength' => 60,
         '#size' => 15,
         '#required' => FALSE ,
        ); 
       
       if(drupal_is_front_page()) {
        // hide the real password field
        $form['pass']["#attributes"]['style'] = 'display: none;';
       }
      $form['join-text'] = array('#markup' => '<span id="join-us-text">' . t('Not a member?') . ' ' . '</span>', );
      
      $form['join-link'] = array(
        '#markup' => l(t('Join us!'), 'user/register',
        array('attributes' => array('id' => 'user-login-register'))));
    
       //  $form['#validate'][] = 'cookie_check_validate';
      //  $form['new-password-text'] = array('#markup' => '<span id="new-password-text">' . t('Forgot your password? ') . '</span>', );
        $form['new-password-link'] = array(
        '#markup' => l(t('Request new password.'), 'user/password', 
         array('attributes' => array('id' => 'new-password-link'))));
        dvm($form, 'Form');
}


/**
 * implements hook_form_alter for user_register_form 
 */  
function user_custom_form_user_register_form_alter(&$form, $form_state) {
  
  drupal_set_title(t('New photographer account'));
  
  $form['#submit']['set_photographer_role_submit'] = 'user_set_photographer_role'; 
 
}

function user_custom_form_user_profile_form_alter(&$form, $form_state) {
   drupal_set_title(t('Edit account details'));
  
}

/**
 *Function for insert the user role in the users table when submit the create account submit button
 * @param $form
 * $form gives form values from the user registration page
 */
function user_set_photographer_role($form, &$from_state) {
  $rid = user_custom_helper::get_photographer_rid();

  $account =  $form['#user'];
 
  if (isset($account->uid) && $account->uid > 0) {
    user_custom_helper::user_role_id_insert($rid, $account->uid);
  }
}


/**
 * Validate callback for user login form submission.
 *
 * If the cookie set previously is not present, redirect.
 */
function cookie_check_validate($form, &$form_state) {
  if (!$_COOKIE) {
    $domain = ini_get('session.cookie_domain') ? ini_get('session.cookie_domain') : $_SERVER['HTTP_HOST'];
    form_set_error('', t('It seems your browser does not accept cookies. To log into this site, you need to accept cookies from the domain @domain.', array('@domain' => $domain)));
  }
}


/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function user_custom_block_info() {
  
  $blocks['grey_line'] = array(
    'info' => t('Grey line'),
    'status' => TRUE,
    'region' => 'header', 
    'visibility' => BLOCK_VISIBILITY_LISTED,  
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function user_custom_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'grey_line':
       $block['subject'] = '<none>';
      $block['content'] = array('#markup' => '<div class="gray-bdr"></div>');
    break;
  }
  return $block;
}
