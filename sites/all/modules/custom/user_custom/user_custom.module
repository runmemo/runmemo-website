<?php

/**
 * Form alter function
 * by using this form_alter function we can alter the form without editing core module
 * @param $form,$form_state,$form_id
 * $form give the form value
 * $form_id is the form id
 */
function user_custom_form_user_login_alter(&$form, $form_state) {
      
        $form['fake-password'] = array (
         '#id' => 'edit-pass-fake', 
         '#type' => 'textfield',
         '#default_value' => 'Password',    
         '#title' => t('Password'),
         '#maxlength' => 60,
         '#size' => 15,
         '#required' => FALSE ,
        ); 
       
      $form['join-text'] = array('#markup' => '<span id="join-us-text">' . t('Not a member? ') . '</span>', );
      
      $form['join-link'] = array(
      	'#markup' => l(t('Join us!'), 'login', 
        array('attributes' => array('id' => 'user-login-register'))));
    
       //  $form['#validate'][] = 'cookie_check_validate';
      //  $form['new-password-text'] = array('#markup' => '<span id="new-password-text">' . t('Forgot your password? ') . '</span>', );
        $form['new-password-link'] = array(
        '#markup' => l(t('Request new password.'), 'user/password', 
         array('attributes' =>array('id' => 'new-password-link'))));
      
  
}


/**
 * implements hook_form_alter for user_register_form 
 */  
function user_custom_form_user_register_form_alter(&$form, $form_state) {
   $form['#submit'][''] = 'user_set_photographer_role'; 
}

function user_custom_form_user_profile_form_alter(&$form, $form_state) {
  
}

/**
 *Function for insert the user role in the users table when submit the create account submit button
 * @param $form
 * $form gives form values from the user registration page
 */
function user_set_photographer_role($form, &$from_state) {

    $uid = $form['#user']->uid;
    $rid = user_custom_helper::get_photographer_rid();

    $new_user = user_load($uid);
    user_save($new_user, array ('roles'=>array($rid => 'Photographer')));

}


/**
 * Validate callback for user login form submission.
 *
 * If the cookie set previously is not present, redirect.
 */
function cookie_check_validate($form, &$form_state) {
  if (!$_COOKIE) {
    $domain = ini_get('session.cookie_domain') ? ini_get('session.cookie_domain') : $_SERVER['HTTP_HOST'];
    form_set_error('', t('It seems your browser does not accept cookies. To log into this site, you need to accept cookies from the domain @domain.', array('@domain' => $domain)));
  }
}


/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function user_custom_block_info() {
  
  $blocks['grey_line'] = array(
    'info' => t('Grey line'),
    'status' => TRUE,
    'region' => 'header', 
    'visibility' => BLOCK_VISIBILITY_LISTED,  
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function user_custom_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'grey_line':
       $block['subject'] = '<none>';
      $block['content'] = array('#markup' => '<div class="gray-bdr"></div>');
    break;
  }
  return $block;
}
