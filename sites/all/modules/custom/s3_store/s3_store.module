<?php

/**
 * @file contains S3 Store module for pre-caching of images in Amazon S3.
 * @author Bulat Yapparov
 */

/**
 * Implementation of hook_cron()
 * Function for getting images from local and pushing to s3
 */
function s3_store_cron() {
  $queue = DrupalQueue::get('send_images_to_S3');

  //$queue->deleteQueue();
  watchdog('S3 info', 'Started S3 cron job for jobs = ' . $queue->numberOfItems(), array(), WATCHDOG_DEBUG);
  //Pull items out one at a time.
  while ($item = $queue->claimItem(15)) {
    watchdog('S3 info', 'Items in the queue(S3) == ' . $queue->numberOfItems(), array(), WATCHDOG_DEBUG);
    //Try saving the data.
    $file = $item->data;
    try {
      // send file and associated image cache files to s3
      _send_file_to_s3($file);
      // send file to OCR queue
      _ocr_send_request($file);
    }
    catch (Exception $e) {
      watchdog_exception('S3 error', $e);
    }
    $queue->deleteItem($item);
  };
  watchdog('S3 info', 'Finished S3 cron job.', array(), WATCHDOG_DEBUG);
}

/**
 *
 * Sends file to S3 backet with image cache
 * @param object $file contains properties of the file
 */
function _send_file_to_s3($file) {
  // Check whether file exists
  if (!file_exists($file->uri)) {
    throw new InvalidArgumentException('Sending file to S3 failed as image does not exist: ' . $file->uri);
  }

  $bucket = variable_get('image-store-bucket');
  // Send original file to S3
 
  $path_prefix = 'public://';
  $acl = 'public-read'; //S3::ACL_PUBLIC_READ;

  $s3_mover = new s3_mover($path_prefix, $bucket);

  // Send cache images to S3
  $precached_styles = _pre_image_cache_styles();
  foreach ($precached_styles as $style_name) {
    $style = image_style($style_name);
    if ($style) {
      $s3_mover->move_imagecache($file, $style_name);
    }
    else {
      watchdog('S3 info', 'Style does not exists: ' . $style_name, array(), WATCHDOG_WARNING);
    }

  };
  // move original file
  $s3_mover->move_file($file, $acl);
}

/**
 * function to create signed url to download orginal image
 */
function get_s3_signed_url($resource) {
  $bucket = variable_get('image-store-bucket', '');
  $AWS_S3_KEY        = variable_get('aws_access_key', '');
  $AWS_s3_secret_key = variable_get('aws_secret_key', '');
  $expires = time()+63072000;
  // S3 Signed URL creation
  $string_to_sign = "GET\n\n\n{$expires}\n/" . str_replace(".s3.amazonAWS.com", "", $bucket) . "/$resource";
  $signature = urlencode(base64_encode((hash_hmac("sha1", utf8_encode($string_to_sign), $AWS_s3_secret_key, TRUE))));

  $authentication_params = "AWSAccessKeyId=" . $AWS_S3_KEY;
  $authentication_params .= "&Expires={$expires}";
  $authentication_params .= "&Signature={$signature}";
  return $link = "http://s3-eu-west-1.amazonAWS.com/{$bucket}/{$resource}?{$authentication_params}";
}
