<?php 

module_load_include('inc', 'sport_event', 'sport_event');

/**
 * Init function for adding the external file
 */
function photo_upload_init() {
  //to add the js file
  drupal_add_css(drupal_get_path('theme', 'runmemo') . '/css/style.css');
 
}

function photo_upload_preprocess_page(&$variables) {
  if ('upload' === arg(1)) {
    drupal_add_js(drupal_get_path("module", "photo_upload") . "/js/photo_upload.js");
    drupal_add_css(drupal_get_path('module', 'photo_upload') . '/photo_upload.css');
  }
}

/**
 * Implements hook_views_api().
 */
function photo_upload_views_api() {
  return array("version" => "3.0");
}


/**
 * Create the hook menu for each page
 * by using this we can map to the related page
 * @return
 * return the custom created menus
 */
function photo_upload_menu() {
  //url for photographer
  $items['photographer/upload'] = array(
      'title' => 'Upload Photos',
      'menu_name' => 'navigation',
      'description' => 'View the objects in a bucket on your Amazon S3 account.',
      'page callback' => 'photographer_upload_photos',
      'access arguments' => array('access_photographer'),
      'weight' => '1',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/photographer/share'] = array(
      'title' => 'Managing share for Photographers',
      'description' => 'Managing share for Photographers ',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('photograher_share'),
      'access arguments' => array('administer store'),

  );

  return $items;

}

/**
 * Set the pemission for each url in the admin side
 * so we can the restrict the particular page to accessed by the anonymouse user
 * @return
 * Return the access permission
 */
function photo_upload_permission() {

  return array(
      'access_photographer' => array(
          'title' => t('Access photographer'),
          'description' => t('Access photographer'),
          'restrict access' => TRUE,
      ),
  );
}


/**
 * Photo Uploader Page
 * where the photographer can upload the photos by selecting the event
 * uploaded photos are stored in the amazon_s3
 */
function select_event_function() {

  $form = array();
  $events = get_events_upload();
  drupal_add_js(array("photo_upload" => $events), 'setting');
  
  $options = array();
  
  foreach ($events as $event) {
    $options[$event['nid']] = $event['title'];
  }
  
  $form['events_select'] = array(
    '#type' => 'select',
    '#title' => t('Upload to event:'),
    '#id' => 'event_select',
    '#options' => $options,
    '#empty_option' => 'Select Event',
    '#empty_value' => 'All',
  );

  if (is_numeric(arg(2)) && arg(2) != '') {
    $default = arg(2);
    $form['events_select']['#default_value'] = $default;
  }
  
  $form['price_slider'] =  get_slider();
   
  
  return $form;
}
/**
 * Drag and drop upload form creation
 */
function photographer_drag_and_drop_form($form, &$form_state) {
  $form = array();
  $form['#attributes'] = array('enctype' => 'multipart/form-data');

  $form['box'] = array(
      '#type' => 'fieldset',
      '#title' => t(''),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
  );

 
  $form['box']['file'] = array(
      '#type' => 'plupload',
      '#title' => t(''),
      '#description' => t(''),
      '#size' => 40,
  );

  $form['box']['upload'] = array(
    '#type' => 'submit',
    '#value' => 'Start Upload',
    '#validators' => array(),
    '#attributes' => array(
                       'onclick' => 'return drag_drop_upload_validation();')
  );
  $form['box']['selected_event'] = array(
  		'#type' => 'textfield', 
  		'#title' => '', 
  		'#id' => 'selected_event_nid',
  		'#attributes' => array('style' => 'display: none;'),
  );
  
  $form['box']['price_val'] = array(
    '#type' => 'textfield',
    '#id' => 'price_val',
    '#attributes' => array('style' => 'display: none;'),
    '#default_value' => variable_get('RUNMEMO_DEFAULT_PRICE', 3),
  );
  return $form;
}

/**
 * Drag and drop submit function
 * @param $form
 * $form gives the form values from the photographer upload form values
 */

function photographer_drag_and_drop_form_submit($form, &$form_state) {
  
  $saved_files = array();
  $scheme = 'public://'; // @todo research how to use s3 as a scheme so file is pushed to s3 straight away.
  // We can't use file_save_upload() because of http://www.jacobsingh.name/content/tight-coupling-no-not
  //file_uri_to_object();
  foreach ($form_state['values']['file'] as $uploaded_file) {
    if ($uploaded_file['status'] == 'done') {
      watchdog('photo_uload', 'File uploaded : %path', array('%file'=> serialize($uploaded_file)));
      /*
      $source = $uploaded_file['tmppath'];
      dvm($source);
      $destination = file_stream_wrapper_uri_normalize($scheme . $uploaded_file['name']);
      // Rename it to its original name, and put it in its final home.
      // Note - not using file_move here because if we call file_get_mime
      // (in file_uri_to_object) while it has a .tmp extension, it horks.
      $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);
      $file = plupload_file_uri_to_object($destination);
      file_save($file);
      $saved_files[] = $file;
      $event = $form_state['values']['selected_event'];
      $price = $form_state['values']['price_val'];
      $node = create_photo_node($file, $event, $price);
      */
    }
    else {
      // @todo: move this to element validate or something and clean up t().
      form_set_error('pud', "Upload of {$uploaded_file['name']} failed");
    }
  }
  
  $event_nid = $form_state['values']['selected_event'];
  sport_event_fill_field_count_photos($event_nid);
  
  $form_state['redirect'] = "photographer/myphotos";   
  
}
/**
 * 
 * Implements hook_file_uploaded
 * (see http://drupal.org/node/1715374)
 * @param unknown_type $fileinfo
 */
function photo_upload_file_uploaded($fileinfo) {
  if (isset($fileinfo['tmppath'])) {
    watchdog('photo_uload', 'File uploaded : %path', array('%path'=> serialize($fileinfo)));
  }
  $source =  $fileinfo['tmppath']; 
  $scheme = 'public://';
  
  $destination = file_stream_wrapper_uri_normalize($scheme . $fileinfo['name']);
  // Rename it to its original name, and put it in its final home.
  // Note - not using file_move here because if we call file_get_mime
  // (in file_uri_to_object) while it has a .tmp extension, it horks.
  $destination = file_unmanaged_move($source, $destination, FILE_EXISTS_RENAME);
  $file = plupload_file_uri_to_object($destination);
  if ($file->uid) {
    file_save($file);
 
    $event = isset($_REQUEST["event"]) ? $_REQUEST["event"] : 0;
    $price = isset($_REQUEST["price"]) ? $_REQUEST["price"] : 1;
 
    $node = create_photo_node($file, $event, $price);
  }
  else 
  {
    watchdog('photo_upload', 'File uploaded from anonymous user.');
  }
  
}

/**
 * Call back function for photographer
 * @return
 * return form in the page
 */
function photographer_upload_photos() {
  $select_event=drupal_render(drupal_get_form('select_event_function'));
  $file_upload_form = drupal_render(drupal_get_form('photographer_drag_and_drop_form'));
  $style="<div style='display:none' id='upload_section' >$file_upload_form</div>";
  return $select_event . $style;
}


function photo_upload_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['view']) && $form_state['view']->name == 'myphotos') {
    $form['field_event_reference_nid']['#options']['All'] = t('Select Event');
  }
}


/**
 * For Managing share of price for photographers
 */
function photograher_share()
{
  $form['share']  = array(
    '#type' => 'textfield',
    '#title' => 'Runmemo Share',
    '#size' => '20',
    '#required' => 'true',
    '#default_value' => variable_get('photographer_share'),
    '#prefix' => '<div class="pshare">',
    '#suffix' => '<span class="sharePer"></span></div>',
    '#description' => 'Share of runmemo', );

  $form['submit']  = array(
    '#type' => 'submit',
    '#title' => 'Submit',
    '#value' => 'Submit');
  return $form;
}

/**
 * Form validation for numeric values photograher_share()
 */
function photograher_share_validate($form, &$form_state) {

  $share = $form_state['values']['share'];
  if (!is_numeric($share) || $share < 0 || $share > 100) {
    form_set_error('share', t('Enter a Numeric Value'));
  }
}

/**
 * Form submission photograher_share()
 */
function photograher_share_submit($form, &$form_state) {
  drupal_set_message(t('Photographer Share set'));
  $share = $form_state['values']['share'];
  variable_set('photographer_share', $share);
}

/**
 * Implements photo node create().
 * @param $file object
 * @param $event id
 */
function create_photo_node($file, $event_nid, $price = 0) {
  
  // We create a new node object
  $node = new stdClass();
  // content type
  $node->type = 'product';
  //node title
  $node->title = $file->filename;
  //set language
  $node->language = LANGUAGE_NONE;
  //user id
  $node->uid = $file->uid;
  // Let's add standard body field

  $node->uc_product_image[LANGUAGE_NONE][0] = (array)$file; //associate the file object with the image field:

  $event = node_load($event_nid);
  // Determine currency code for product from country code in event's address
  $country = field_get_value($event, 'field_address', 'GB', 'country');
  $currency = uc_currency_country_currency($country);
  
  $defaults = default_currency_prices($currency);
  
  if ($price == 0) {
    $price = field_get_value($event, 'field_recommended_price', $defaults['recommended_price']);
  }
  // here we get sales fee from event to set sell price
  
  $sales_fee = field_get_value($event, 'field_sales_fee', $defaults['sales_fee']);
  
  $node->sell_price = $price + $sales_fee;
  
  $node->list_price = $price;
  $node->field_event_reference[LANGUAGE_NONE]['0']['nid'] = $event->nid;
  $node->field_currency[LANGUAGE_NONE][0]['value'] = $currency;
  
  node_object_prepare($node); // set default values
  $node = node_submit($node); // set author and creation date
  node_save($node); // After this call we'll get a nid
  $file->nid = $node->nid;
  
  // put file to the queue for further processing.
  $queue = DrupalQueue::get('create_image_cache');
  $queue->createItem($file);
  return $node;

}

function field_get_value($node, $field_name, $default, $index = 'value') {
  $items = field_get_items('node', $node, $field_name);
  if ($items) {
    foreach ($items as $item) {
      return $item[$index];
    }
  }
  return $default;
}
