<?php

/**
 *
 * implements hook_block_info()
 */
function sport_event_block_info() {

  $blocks['recent_event_left'] = array('info' => t('Recent Event Images - Left'), );
  $blocks['recent_event_right'] = array('info' => t('Recent Event Images - Right'), );
   
  return $blocks;
}


/**
 *
 * implements hook_block_view()
 */
function sport_event_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  $nid = 0;
  switch ($delta) {
    case 'recent_event_left':
      $nid = get_recent_event_id(0, 1);
      return recent_events_block($nid);
    case 'recent_event_right':
      $nid = get_recent_event_id(1, 1);
      return recent_events_block($nid);;
      break;
  }

}



/**
 *
 * Creates markup for first N promoted products.
 * @param integer $nid - nid of event node
 * @param integer $items - number of images to show
 */
function get_recent_event_images_view($nid, $items) {

  $style_name = 'search_thumbnail';
  // Select first N products associated with event
  $query = new EntityFieldQuery;
  $entities =  $query
  ->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'product')
  ->propertyCondition('status', 1)
  ->fieldCondition('field_event_reference', 'nid', $nid, '=')
  ->fieldCondition('field_promote', 'value', TRUE, '=')
  ->range(0, $items)
  ->execute();

  $products = node_load_multiple(array_keys($entities['node']));

  // build makrup for images
  $markup ='<div class="recent-event-images">';
  foreach ($products as $product) {
    // get html for the image style
    $image_file = $product->uc_product_image['und'][0];
    $img_url = image_style_s3_uri($image_file, $style_name);
    $markup = $markup . '<img src=' . $img_url . '>';
  }
  $markup = $markup . '</div>';
  return $markup;
}


/**
 *
 * Builds recent event block for event node id provided
 * @param integer $nid nid of Event
 */
function recent_events_block($nid) {
  
  $event = node_load($nid);
  $block = array();
  $block['subject'] = check_plain($event->title);

  // get first images for event
  $block['content'][] = array('#markup' => get_recent_event_images_view($nid, 4));
  // add form to search products from same event
  $block['content'][] = drupal_get_form('recent_event_search_form_' . $nid, $nid); ;

  return $block;

}

/**
 *
 * implements hook_forms
 * @param sting $form_id
 */
function photo_search_forms($form_id) {

  $forms = array();
  if (strpos($form_id, 'recent_event_search_form_') === 0) {
    // $nids = array_map('strrev', explode('_', strrev($form_id)));
    $forms[$form_id] = array(
      'callback' => 'recent_event_search_form',
    //   'callback arguments' => array($nids[0]),
    );
  }
  return $forms;

}

/**
 * Builds form for recent events regions
 * @return string
 */
//function recent_event1_image() {
function recent_event_search_form() {

  $form = array();
  $form['runner_number'] =
  array(
  	'#type' => 'textfield',
  	'#title' => 'Runner Number', 
  	'#size' => '20',
  	'#required' => 'true');
  $form['submit_button'] =
  array( // search button
  	'#type' => 'submit', 
  	'#value' => '', 
  	'#submit' => array('recent_event_search_submit'), 
  );

  return  $form;

}

function recent_event_search_validate($form, &$form_state) {

  if ($form['runner_number']['#value']  == 'My Number' || $form['runner_number']['#value']  == '') {
    form_set_error('runner_number', t('Please enter your number'));
  }
}


/**
 * For testing purpose
 * @param type $form
 * @param type $form_state
 */
function recent_event_search_submit($form, &$form_state) {
  // get event id and number
  $eid = $form['event_id']['#value'];
  $number = $form['runner_number']['#value'];
  // build path to the search page
  $path = 'search-result/' . $eid . '/' . $number;
  $form_state['redirect'] = 
  array(
    $path,
    array(),    // $options
    302,  // $http_response_code
  );
}

/**
 * impelements hook form_alter
 */
function sport_event_form_alter(&$form, &$form_state, $form_id) {
  /*
   if ($form_id == 'system_cron_settings') {
   $form['cron']['cron_safe_threshold']['#options'] = array(0 => 'Never', '900' => '15 Mins', '1800' => '30 Mins', '3600' => '1 hour', '10800' => '3 hours', '21600' => '6 hours', '43200' => '12 hours', '86400' => '1 day', '604800' => '1 week');
   } */
  // set event id into the hidden field of the form
  // so we could build correct path on submit.
  if (strpos($form_id, 'recent_event_search_form_') === 0) {
    $nid = $form_state['build_info']['args'][0];
    $form['event_id'] = array('#type' => 'hidden', '#value' => $nid, );
  }
}



/**
 * Gets path of the folder in S3 bucket for the style
 * @param string $styleName
 */
function image_style_s3_uri($file, $styleName) {

  if (strpos($file['uri'], 's3://') === 0) {
    return file_create_url('s3://') . 'styles/' . $styleName . '/s3/' . $file['filename'];
  }
  else {
    return image_style_url($style_name, $file['uri']);
  }
   
}



