<?php

function sport_event_init() {
  drupal_add_css(drupal_get_path('module', 'sport_event') . '/sport_event.css');
}


function sport_event_menu() {
  $items['director/event/add'] = array(
    'title' => 'Add event',
    'description' => 'Page with a form that allows users to create events.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sport_event_create_form'),
    'access arguments' => array('search photos'),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function sport_event_views_api() {
  return array(
    'version' => '3.0',
    'path' =>  drupal_get_path('module', 'sport_event') . '/views', 
  );
}


/**
 *
 * implements hook_block_info()
 */
function sport_event_block_info() {
  $blocks['registration_link'] = array('info' => t('Register to join our team link'), );
  $blocks['registration_button'] = array('info' => t('Event Registration Button'), );
  $blocks['search_by_number'] = array('info' => t('Search photos from an event'), );
  $blocks['sport_event_create'] = array('info' => t('Form to add new event'), );
  return $blocks;
}

/**
 *
 * implements hook_block_view()
 */
function sport_event_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  $nid = 0;
  switch ($delta) {
    case 'registration_link':
      return registration_link_block();
      break;
    case 'registration_button':
      return registration_button_block();
      break;
    case 'search_by_number':
      return search_by_number_block();
    case 'sport_event_create':
      return sport_event_create_block();
      break;    
  }

}

/**
 *
 * implements hook_forms
 * @param sting $form_id
 */
function sport_event_forms($form_id, $nid) {

  $forms = array();
  if (strpos($form_id, 'recent_event_search_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'recent_event_search',
      'callback arguments' => array($nid),
    );
  }
  return $forms;
}

/**
 * Builds form for recent events regions
 * @return string
 */
function recent_event_search($nid = 0) {

  $form = array();
  $form['runner_number'] = array(
      '#type' => 'textfield',
      '#title' => 'Runner Number',
      '#size' => '20',
      '#required' => 'true');
  $form['submit_button'] = array( // search button
      '#type' => 'submit', 
      '#value' => 'Search', 
      '#submit' => array('recent_event_search_submit'), 
    );

  return  $form;
}


/**
 * For testing purpose
 * @param type $form
 * @param type $form_state
 */
function recent_event_search_submit($form, &$form_state) {
  // get event id and number 
  $eid = $form_state['build_info']['args'][0];
  $number = $form['runner_number']['#value'];
  // build path to the search page
  $path = 'search-result/' . $eid . '/' . $number;
  // redirect to search page
  $form_state['redirect'] = $path;
 }

/**
 *
 * Builds "Register to join our team" link block
 */
function registration_link_block() {

  $node = menu_get_object();
  $block = array();
  $block['subject'] = 'Register to join our team link';
  $block['title'] = '<none>';
  $block['content'][] = array(
      '#markup' => 
        '<a href="/user/register/'
        . $node->nid
        . '" id="user-register">' . t('Register to join our team!') . '</a>',      
   );

  return $block;
}

function registration_button_block() {


  $block = array();
  $block['subject'] = t('Event Registration Button');
  // add form to search products from same event

  $block['content'][] = drupal_get_form('registration_button_form');

  return $block;

}

function search_by_number_block() {


  $block = array();
  $block['subject'] = t('Search photos from an event');
  $block['content'][] = drupal_get_form('search_by_number_form');

  return $block;

}


/**
 *
 * Ajax button implementation for photographer registration at an event
 * @param array $form
 * @param array $form_state
 */
function registration_button_form($form, &$form_state) {
  $nid = -1;

  // get node id for the event
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $nid = arg(1);
  }
  else { // it is not a node profile page, so don't show the button
    watchdog('Callback', 'Registration button is visible in a wrong place.', array($form), WATCHDOG_ERROR);
    return;
  }
  
  // check whether photographer is already registered. 
  global $user;   
  $is_registered = sport_event_is_registered_photographer($nid, $user->uid);
  if ($is_registered) { 
    return; // no need to show the button for registered photographer
  }
  
  // define the button with AJAX callback
  $form['submit'] =
  array( // search button
      '#type' => 'submit', 
      '#value' => t('I will be there!'), 
      '#prefix' => '<div id="registration-button">',
      '#suffix' => '</div>',
      '#submit' => array('event_registration_form_submit'), 
      '#ajax' => array(
        'callback' => 'registration_button_js',
        'wrapper' => 'registration-button',
        'effect' => 'fade',
      ),
  );

  // cache nid in the form as it will not be available in the callback overwise
  $form['nid'] =
  array(
    '#type' => 'hidden',
    '#value' =>  $nid,   
  );
  return $form;
}

function event_registration_form_submit($form, &$form_state) {
  // @todo put code here for graceful degradation if needed (when JavaScript is off on client side)
}

/**
 *
 * Callback function for event registration button
 * @param array $form
 * @param array $form_state
 */
function registration_button_js($form, $form_state) {
  global $user;
  $nid = $form['nid']['#value'];
  // register photographer to the event
  sport_event_register_photographer($nid, $user->uid);
  // replace button with disabled version
  $markup = '<div id="registration-button" class="button disabled">I will be there!</div>';
  // post registration message
  return $markup . '<div id="complete-registration" class="nice-message">' . t('Awesome, we are looking forward to see your photos!') . '</div>';

}

/**
 * Search photos from an event form implementation
 * @param array $form
 * @param array $form_state
 */
function search_by_number_form($form, &$form_state) {
  $nid = -1;
  $node = menu_get_object();
  if (isset($node)) {
    $nid = $node->nid;
  }
  else {
    watchdog('Callback', 'search_by_number_form is visible in a wrong place.', array($form), WATCHDOG_ERROR);    
    return;
  }
  
  $form['number'] = array(
      '#id' => 'field-number',
      '#type' => 'textfield',
      '#size' => 20,
      '#required' => TRUE,
  );
  $form['submit'] = array( // search button
      '#type' => 'submit', 
      '#value' => t('Search'), 
      '#prefix' => '<div id="search-by-number-button">',
      '#suffix' => '</div>',
      '#submit' => array('search_by_number_form_submit'), 
  );

  // cache nid in the form as it will not be available in the callback overwise
  $form['event_id'] = array(
    '#type' => 'hidden',
    '#value' =>  $nid,   
  );
  return $form;
}


function search_by_number_form_submit($form, &$form_state) {
  // get event id and number
  $eid = $form['event_id']['#value'];
  $number = $form['number']['#value'];
  // build path to the search page
  $path = 'search-result/' . $eid . '/' . $number;
  $form_state['redirect'] = array( 
      $path,    // http_path
      array(),  // $options
      302,      // $http_response_code
  );
}



/**
 * Impelements hook form_alter
 */
function sport_event_form_alter(&$form, &$form_state, $form_id) {
  /*
   if ($form_id == 'system_cron_settings') {
   $form['cron']['cron_safe_threshold']['#options'] = array(0 => 'Never', '900' => '15 Mins', '1800' => '30 Mins', '3600' => '1 hour', '10800' => '3 hours', '21600' => '6 hours', '43200' => '12 hours', '86400' => '1 day', '604800' => '1 week');
   } */
  // set event id into the hidden field of the form
  // so we could build correct path on submit.
  if (strpos($form_id, 'recent_event_search_form_') === 0) {
    $nid = $form_state['build_info']['args'][0];
    $form['event_id'] = array('#type' => 'hidden', '#value' => $nid, );
  }
}

/**
 * Implements hook_cron
 * 
 * Here we count number of photos in each event and update field_photos on
 * Event content type 
 */
function sport_event_cron() {
  
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'event')
    ->propertyCondition('status', 1, '=');
  $result = $query->execute();
  
  if (!empty($result['node'])) {
    $events = entity_load('node', array_keys($result['node']));
    foreach ($events as $event) {
      $count_photos = sport_event_get_photos_count($event->nid);
      $event->field_count_photos[LANGUAGE_NONE][0]['value'] = $count_photos;
      node_save($event);
    }
  }
}
  


/**
 * Gets number of product nodes linked to specified event nid
 * @param integer $nid id of the event
 */
function sport_event_get_photos_count($nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'product')
    ->propertyCondition('status', 1, '=')
    ->fieldCondition('field_event_reference', 'nid', $nid);
    
  $products = $query->count()->execute();
  return $products;
}

/**
 * Gets path of the folder in S3 bucket for the style
 * @param string $styleName
 */
function image_style_s3_uri($file, $styleName) {

  if (strpos($file['uri'], 's3://') === 0) {
    return file_create_url('s3://') . 'styles/' . $styleName . '/s3/' . $file['filename'];
  }
  else {
    return image_style_url($style_name, $file['uri']);
  }
}


function short_month_names() {
  return array(t('Jan'), t('Feb'), t('Mar'), t('Apr'), 
        t('May'), t('Jun'), t('Jul'), t('Aug'), 
        t('Sep'), t('Oct'), t('Nov'), t('Dec'));
}

/**
 * Event creation form
 */
function sport_event_create_form($form, &$form_state) {

  $form['#attached']['css'] = array(
    
    drupal_get_path('module', 'sport_event') . '/sport_event_create_form.css',
  );
  $form['#attributes']['class'][] = 'webform-client-form';
  $form['#attributes']['class'][] = 'event-add-form';
    
  
  
  global $user;

  // Contact fields 
  if ($user->uid == 0) { 
    
    $form['disclaimer'] = array(
      '#type' => 'markup',
      '#markup' => '<p>' . t('Let\'s get your event listed for runners and photographers') . '</p>',
      '#weight' => -1, 
    );
  
    $form['contact'] = array(
      '#type' => 'fieldset', 
      '#title' => t('Your details'), 
      '#weight' => 0, 
      '#collapsible' => FALSE, 
      '#collapsed' => FALSE,
   //   '#description' => 'this information will help us to keep in touch',
    );
    // we need collect contact details from anonymous user
    // to create new user
    $form['contact']['first_name'] = array(
      '#type' => 'textfield',
      '#title' => t('First Name'), 
      '#size' => 60,
      '#maxlength' => 25,
      '#required' => TRUE,
    );
    
    $form['contact']['last_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Last Name'),
      '#size' => 60,
      '#maxlength' => 25,
      '#required' => TRUE,
    );
   
    $form['contact']['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email'),
      '#size' => 60,
      '#maxlength' => 20,
      '#required' => TRUE,  
    );
    
    $form['contact']['phone'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone'),
      '#size' => 60,
      '#maxlength' => 20,
      '#required' => FALSE,
      '#description' => t('let\'s stay in touch'),
    );
    
     $form['contact']['username'] = array(
       '#type' => 'textfield',
       '#title' => t('Username'),
       '#size' => 60,
       '#maxlength' => 20,
       '#required' => TRUE,
      //'#description' => t(''),
      //  '#ajax' => array(
      //     'callback' => 'sport_event_create_form_username_callback'
      //   ),
    );
    
     $form['contact']['password'] = array(
       '#type' => 'password',
       '#title' => t('Password'),
       '#size' => 60,
       '#maxlength' => 20,
       '#required' => TRUE,
    );
  } 
  else { // existing user
    $form['disclamer'] = array(
      '#type' => 'markup',
      '#markup' => '<p>' . t('Time to add a new event, we are ready!') . '</p>',
      '#weight' => -1, 
    );
  }
  
  $form['event'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Event details'), 
    '#weight' => 2, 
    '#collapsible' => FALSE, 
    '#collapsed' => FALSE,
  );
  
  $form['event']['title'] = array(
    '#type' => 'textfield', 
    '#title' => t('Name'), 
    '#size' => 60, 
    '#maxlength' => 128, 
    '#required' => TRUE,
    '#description' => t('e.g. London Marathon 2013'),
  );   
  
  $form['event']['date'] = array(
    '#type' => 'date_popup',
    '#title' => t('When'),
    '#date_format' => 'Y-m-d',
    '#required' => TRUE,
    '#date_year_range' => '-0:+1',
    '#default_value' => date('Y-m-d'),
    '#wrapper_attributes' => array('class' => array('container-popup-date')),
    //'#title_display' => 'invisible',
  );
  
  $form['event']['website'] = array(
    '#type' => 'textfield',
    '#title' => t('Website'), 
    '#size' => 60, 
    '#maxlength' => 128,
    '#required' => FALSE,
    '#description' => t('preferably the home page')
  );
  
  $form['event']['distance'] = array(
    '#type' => 'select',
    '#title' => t('Distance'),
    '#options' => get_vocabulary_terms_by_name('distance'),
    '#empty_value' => -1, 
    '#empty_option' => t('Select distance'), 
  );
  
  $form['event']['country'] = array(
    '#type' => 'select',
    '#title' => 'Country',
    '#options' => country_get_list(),
    '#empty_value' => 'NONE',
    '#empty_option' => t('Select country'), 
  );
  
  $ip = ip_address();
  $country_code = ip2country_get_country($ip);
  if ($country_code) {
    $form['event']['country']['#default_value'] = $country_code;
  } 
  
  $form['event']['summary'] = array(
    '#type' => 'textarea',
    '#title' => t('Details')
  );

  $form['is_director'] = array(
    '#type' => 'checkbox',
    '#title' => t('I am race director.'),
    '#weight' => 3, 
  );
  
  $form['actions'] = array('#type' => 'actions');
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#name' => 'Create',
    '#button_type' => 'submit',
    '#value' => t('Create Event'),
  );
  
  return $form;
}


function sport_event_create_form_validate($form, &$form_state) {
 
  if (isset($form_state['values']['username'])) {
    // check whether user with this user name exists  
    $user = user_load_by_name($form_state['values']['username']);
    if (!$user) {
        // User doesn't exist
    } 
    else {
        // User exists
        form_set_error('username', 'User name already exists');
    }
  }
  
}
/*
function sport_event_create_form_username_callback($form, &$form_state) {
   
 
} */

/**
 * 
 * Implements hook_form_submit for Event creation form.
 * 
 */
function sport_event_create_form_submit($form, &$form_state) {

  global $user;
  
 
  if ($form_state['values']['is_director'] == 1) {
    $roles = array(user_custom_helper::get_rid('race director') => 'race director');
  } 
  else { 
     $roles = array(user_custom_helper::get_photographer_rid() => 'photographer');
  }
  
  if ($user->uid == 0) { // anonymous user
    // create new user
    
    $new_user = array(
      'name' =>  $form_state['values']['username'],
      'email' =>  $form_state['values']['email'],
      'status' => 1,
      'pass' => $form_state['values']['password'],
      'roles' => $roles,
    );
    
    $new_user['field_first_name'][LANGUAGE_NONE][0]['value'] = $form_state['values']['first_name'];
    $new_user['field_last_name'][LANGUAGE_NONE][0]['value'] = $form_state['values']['last_name'];
    $new_user['field_phone_number'][LANGUAGE_NONE][0]['value'] = $form_state['values']['phone'];
    
    $user = user_save(null, $new_user);
    
    drupal_session_regenerate();
  } 
  else { // existing user
    // add role to the user if director was selected
   if (!in_array('Photographer', $user->roles)) { 
      // user does not have photographer role yet
      $new_user = array(
        'roles' => $roles,
      );
      $user = user_save($user, $new_user);
      drupal_session_regenerate();
    }
  }
  
  $uid = $user->uid;
  
  // Create and save new event
  $node = new stdClass();
  
  $node->type = 'event';
  $node->status = 0; // we don't want event to be published yet
  $node->language = LANGUAGE_NONE; // @todo posibly need to set language depending on the country
  
  $node->title_field[$node->language][0]['value'] = $form_state['values']['title'];
  $node->body[$node->language][0]['format'] = 'plain_text';
  $node->body[$node->language][0]['value'] = $form_state['values']['summary'];
  
  //user id
  $node->uid = $uid;
 // $node->body[$node->language][0]['value'] = $form_state['values']['summary'];
 // $event_date = DateTime::createFromFormat('Y-m-d',$form_state['values']['date']);
  $node->field_date[LANGUAGE_NONE][0]['value']['date'] = $form_state['values']['date'];
  
  
  $tid = $form_state['values']['distance'];
  if ($tid != -1) {
    $node->field_distance[LANGUAGE_NONE][0]['tid'] = $tid;
  }
  $country = $form_state['values']['country'];
  if ($country != 'NONE') {
    $node->field_address[LANGUAGE_NONE][0]['country'] = $country;
  }
  
  $node->field_website[$node->language][0]['title'] = t('Event\'s home page');
  $node->field_website[LANGUAGE_NONE][0]['url'] = $form_state['values']['website'];
  
  
  if ($form_state['values']['is_director'] == 1) { 
    // user checked that he is race director of this event
    $node->field_director[LANGUAGE_NONE][]['uid'] = $user->uid;
  } 
  else { // Not race director so we assume its a photographer
    $node->field_photographers[LANGUAGE_NONE][]['uid'] = $user->uid; 
  }
  
  node_object_prepare($node); // set default values
  $node = node_submit($node);
  
  node_save($node);
  // redirect user to new
  $node_url = 'node/' . $node->nid;
  $form_state['redirect'] = array( 
      $node_url,    // http_path
      array(),  // $options
      302,      // $http_response_code
  );
}

function sport_event_create_block() {

  $block = array();
  $block['subject'] = t('Add Event');
  // add form to search products from same event

  $block['content'][] = drupal_get_form('sport_event_create_form');

  return $block;
  
}
