<?php

require_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'sport_event') . '/tests/' . 'sport_event.test.inc');
require_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'ocr')         . '/tests/' . 'ocr_test.inc');

/**
 *  @file contains test cases for Photo Search module.
 */

/**
 *
 * @author leonid@runmemo.com
 *
 */
class PhotoSearchRequestsTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Photo Search request test',
      'description' => 'Test that user can write photo request',
      'group' => 'Photo Search',
    );
  }

  function setUp() {
    parent::setUp('photo_search');
    $schema['photo_requests'] = drupal_get_schema('photo_requests');
    $this->installTables($schema);

    $this->addSampleData();
  }

  private function installTables($schema) {
    // This ends up being a test for table drop and create, too, which is nice.
    foreach ($schema as $name => $data) {
      if (db_table_exists($name)) {
        db_drop_table($name);
      }
      db_create_table($name, $data);
    }

    foreach ($schema as $name => $data) {
      $this->assertTrue(db_table_exists($name), t('Table @name created successfully.', array('@name' => $name)));
    }
  }

  private function addSampleData() {
    $initial_requests = array(
    array( // performed is set
            'email' => 'testQ@runmemo.com',
            'eventid' => '111',
            'number' => '123',
            'created' => REQUEST_TIME,
            'performed' => REQUEST_TIME,
        ),
    array( // not performed
            'email' => 'testW@runmemo.com',
            'eventid' => '222',
            'number' => '12345',
            'created' => REQUEST_TIME,
            'performed' => 0,
        ),
    );

    foreach ($initial_requests as $request) {
      db_insert(PhotoRequest::DBTABLE)->fields(
      array(
              'email'   => $request['email'],
              'eventid' => $request['eventid'],
              'number'  => $request['number'],
              'created' => $request['created'],
              'performed' => $request['performed'],
      ))
      ->execute();
    }
  }

  /**
   *
   * Checks that new request inserted into table
   */
  function testPhotoSearchInsertRequest() {
    $request = array(
      'email' => 'testPhotoSearchInsertRequest@runmemo.com',
      'eventid' => '111',
      'number' => '12345',        
    );

    $num_records_before = db_query('SELECT COUNT(*) FROM {photo_requests}')->fetchField();
    PhotoRequest::AddRequest($request['email'], $request['eventid'], $request['number']);
    $num_records_after = db_query('SELECT COUNT(*) FROM {photo_requests}')->fetchField();
    $this->assertIdentical($num_records_before + 1, (int) $num_records_after, t('Request was inserted.'));

  }

  /**
   *
   * Checks that new request cannot be inserted twice
   */
  function testPhotoSearchInsertRequestTwice() {
    $result = db_select(PhotoRequest::DBTABLE, 'r')
    ->fields('r')
    ->execute();
    $requsts = $result->fetchAll();

    foreach ($requsts as $req) {
      $num_records_before = db_query('SELECT COUNT(*) FROM {photo_requests}')->fetchField();
      PhotoRequest::AddRequest($req->email, $req->eventid, $req->number);
      $num_records_after = db_query('SELECT COUNT(*) FROM {photo_requests}')->fetchField();
      if($req->performed == 0) {
        $this->assertIdentical($num_records_before , $num_records_after,
        t('The same request cannot be inserted twice.'));
      } else {
        $this->assertIdentical($num_records_before + 1 , (int) $num_records_after,
        t('After request was performed, user can add new request with the same params'));
      }
    }

  }


  /**
   *
   * Checks that request can be marked as performed
   */
  function testPhotoSearchMarkRequest() {
    // take requests - non performed
    $result = db_select(PhotoRequest::DBTABLE, 'r')
    ->fields('r')
    ->condition('r.performed', 0, '=')
    ->execute();
    $requsts = $result->fetchAll();

    foreach ($requsts as $req) {
      PhotoRequest::RequestPerformed($req->id);
      $query = db_select(PhotoRequest::DBTABLE, 'r')
      ->fields('r')
      ->condition('r.id', $req->id, '=')
      ->condition('r.performed', 0, '>');
      $num_rows = $query->countQuery()->execute()->fetchField();
      $this->assertEqual($num_rows , 1, t('Request was marked as performed.'));
    }
  }

  /**
   *
   * Checks for GetRequests() function
   */
  function testPhotoSearchGetRequest() {
    $result = db_select(PhotoRequest::DBTABLE, 'r')
    ->fields('r')
    ->condition('r.performed', 0, '=')
    ->execute();
    $requsts = $result->fetchAll();

    $undone_reqs = PhotoRequest::GetRequests(0);

    $num1 = 1;
    $num2 = 2;
    $num1 = count($requsts);
    $num2 = count($undone_reqs);

    $this->assertIdentical($num1 , $num2, t('GetRequests done.'));

  }
}


/**
 * 
 * Test case for function: product_exists($nid, $number, $expire = 0)
 * @author Bulat Yapparov
 *
 */
class SearchProductsForRequestsTestCase extends DrupalWebTestCase {
  private $NewProduct;
  private $eventid;
  private $number;
  
  public static function getInfo() {
    return array(
      'name' => 'Product search for request test',
      'description' => 'Test that products are found for requests',
      'group' => 'Photo Search',
    );
  }

  function setUp() { //'field_sql_storage', 'field', 'options', 'references'
    parent::setUp('ubercart_custom', 'ocr');
      
    $this->number = 1501;
  }

  /**
   * 
   * Dummy function - workaround to get tests going.
   */
  function testProductAddedFields() {
    
  }
  
  /**
   * 
   * Test that product exists 
   *  - product is created 
   *  - $expire is not provided.
   */
  function testProductExistsWithoutExpire() {

    $this->NewProduct =  product_node_creator::getNewProductNode();
    $lang = $this->NewProduct->language;
    $this->eventid = $this->NewProduct->field_event_reference[$lang][0]['nid'];
    
    $ps = new ProductNodeSaver($this->NewProduct->nid);
    $ps->AddNumber($this->number);
    $ps->Save();
    
    $result = product_exists($this->eventid, $this->number);
    $this->assertTrue($result, 'New product was found for request.');

  }
  
 /**
  * 
  * Test that product exists
  * - product is created
  * - @expire is set to 1 day before creation
  */
function testProductExistsWithExpire() {

    $this->NewProduct =  product_node_creator::getNewProductNode();
   
    $lang = $this->NewProduct->language;
    $this->eventid = $this->NewProduct->field_event_reference[$lang][0]['nid'];
    
    $ps = new ProductNodeSaver($this->NewProduct->nid);
    $ps->AddNumber($this->number);
    $ps->Save();
    
    $expire = REQUEST_TIME - 3600*24; // 1 day before creation
    
    $result = product_exists($this->eventid, $this->number, $expire);

    $this->assertTrue($result, 'New product was found for request.');

  }
/**
 * 
 * Product is absent
 * - product is created
 * - expire is to 1 second after creation.
 */ 
function testProductIsAbsentWithExpire() {

    $this->NewProduct =  product_node_creator::getNewProductNode();
    $lang = $this->NewProduct->language;
     
    $this->eventid = $this->NewProduct->field_event_reference[$lang][0]['nid'];
    
    $ps = new ProductNodeSaver($this->NewProduct->nid);
    $ps->AddNumber($this->number);
    $ps->Save();
    
    $expire = REQUEST_TIME+1; // 1+ second after creation
    
    $result = product_exists($this->eventid, $this->number, $expire);

    $this->assertFalse($result, 'New product was found for request.');

  }
/**
 * 
 * Test product does not exists when product is not created.
 */
  function testProductIsAbsent() {
    $this->NewProduct =  product_node_creator::getNewProductNode();
    $lang = $this->NewProduct->language;
    $this->eventid = $this->NewProduct->field_event_reference[$lang][0]['nid'];
    
    $result = product_exists($this->eventid, $this->number);
    $this->assertFalse($result, 'New product was found for request.');
  }

}


/**
 * 
 * Test case for function: product_exists($nid, $number, $expire = 0)
 * @author Bulat Yapparov
 *
 */
class PhotoSearchCronTestCase extends DrupalWebTestCase {
    
  public static function getInfo() {
    return array(
      'name' => 'Requests notifications',
      'description' => 'Integration test case for cron that sends email notifications for requests',
      'group' => 'Photo Search',
    );
  }

  function setUp() { //'field_sql_storage', 'field', 'options', 'references'
    parent::setUp('user_reference',  'ubercart_custom', 'photo_search');
  }
  
 /**
   * 
   * Dummy function - workaround to get tests going.
  
  function testProductAddedFields() {

  }

  function testEmailsSentForRequests() {
    // create eventsl
    debug('creating events');
    $event1 = sport_event_node_creator::getNewEventNode();
    $event2 = sport_event_node_creator::getNewEventNode();
    debug('created events');
    // Create few requrests
    PhotoRequest::AddRequest('email1@test.test', $event1->nid, 100);
    PhotoRequest::AddRequest('email2@test.test', $event1->nid, 200);
    PhotoRequest::AddRequest('email3@test.test', $event2->nid, 300);
    PhotoRequest::AddRequest('email4@test.test', $event2->nid, 400);
    debug('created requests');
    // run cron - check that emails were not sent
    debug('sending notifications');
    $notifications = send_notifications(0);
    debug('notifications sent');
    $this->assertEqual($notifications, 0, 'Notifications were not sent as product does not exist.');

    // Create products tha match requests
    // 1st product
    $product1 = product_node_creator::getNewProductNode($event1->nid);
    $ps = new ProductNodeSaver($product1->nid);
    $ps->AddNumber(200);
    $ps->Save();
    // 2nd product
    $product2 = product_node_creator::getNewProductNode($event2->nid);
    $ps = new ProductNodeSaver($product2->nid);
    $ps->AddNumber(300);
    $ps->Save();

    // run cron - check that M emails were sent
    $notifications = send_notifications(0);
    $this->assertEqual($notifications, 2, 'Right number of notifications were sent.');
    $notifications = send_notifications(0);
    $this->assertEqual($notifications, 0, 'Notifications were not sent on second run.');

  }
   */
}