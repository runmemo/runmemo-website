<?php

module_load_include('inc', 'sport_event', 'sport_event');

/**
 * Implements hook_views_api().
 */
function photo_search_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'photo_search') . '/views',
  );
}



function photo_search_preprocess_page(&$variables) {
  if ('search-result' === arg(0)) {
    drupal_add_js(drupal_get_path('module', 'photo_search') . '/photo_search.js');
    $cart = cart_list_items(arg(1), arg(2));
   // print_nice($cart);
    drupal_add_js(array('cart' => $cart), 'setting');
  }
}

/**
 * Create the hook menu for each page
 * by using this we can map to the related page
 * @return
 * return menu items
 */
function photo_search_menu() {
  //url for runner
  $items['runner'] = array(
    'title' => 'Photo Gallery',
    'description' => 'View the objects in a event on your Amazon S3 account.',
    'page callback' => 'find_trade_section',
    'access arguments' => array('search photos'),
    'type' => MENU_CALLBACK
  );


  $items['search-result/%'] = array(
    'titile' => 'Search link without number',
    'description' => 'Need to redirect to working page',
    'page callback' => 'bad_search_event_redirect',
    'page arguments' => array(1),
    'access arguments' => array('search photos'), 
  );
  
  return $items;

}
/**
 * Set the pemission for each url in the admin side
 * so we can the restrict the particular page to accessed by the anonymouse user
 */
function photo_search_permission() {

  return array(
      'search photos' => array(
      'title' => t('Search photos'),
      'description' => t('Search photos'),
  ),

  );
}

function bad_search_event_redirect($eventid) {
  drupal_goto('node/' . $eventid);
}
 
/**
 * Implements photo_search_user_default_permissions().
 */
function photo_search_user_default_permissions() {
  $permissions = array();

  // Exported permission: access_runner.
  $permissions['search photos'] = array(
    'name' => 'search photos',
    'roles' => array(
  0 => 'administrator',
  1 => 'anonymous user',
  2 => 'authenticated user',
  ),
    'module' => 'photo_search',
  );

  return $permissions;
}

/**
 * creates the form for runner page
 * runner can search the photos by selecting the event name
 */
function search_photos_form($form, &$form_state) {

  global $user;
  $form = array();
  $form['search_filter']=array(
      '#type' => 'fieldset',
      '#title' => '',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#attached' => array(
          'css' => array(drupal_get_path('module', 'photo_search') . 
                          '/photo_search.css'), 
          ),
  );

  if (arg('0') != 'search-result') {
    $form['search_filter']['find'] =
    array(
    '#markup' => "<div id='find'>" . t('Find me') . "</div>");
   //div id='great_photos'>" . t('Find great photos of you') . "</div>");
  }
  $form['search_filter']['event'] = array(
    '#type' => 'select', 
    '#title' => t('I ran this event') . ':', 
    '#id' => 'event_runner',
    '#prefix' => "<div id='field-event'>",
    '#suffix' => '</div>',
    '#required' => 'true',
    '#default_value' => t('None'));

  $form['search_filter']['event']['#options']['None'] = t('Select Event');
  //$form['search_filter']['event']['#options'] = array('select_event' => "Select Event");
  //select event options from content type 'event'

  //get the event name from content type 'event'
  $events = get_events_search();
  foreach ($events as $nid => $event) {
    $form['search_filter']['event']['#options'][$event['nid']] = $event['title'];
  }
 
  if ((is_numeric(arg(1))) && (arg(1) != '')) {
    $default=arg(1);
    $form['search_filter']['event']['#default_value']=$default;
  }

  $form['search_filter']['runner_number'] = array(
    '#type' => 'textfield',
    '#title' => t('With number') . ':',
    '#size' => '20',
    '#id' => 'runner_number',
    '#prefix' => "<div id='field-number'>",
    '#suffix' => '</div>',
    '#required' => 'true',
    
  );
  
  //text field for get the runner number
  if (arg('0') == 'search-result') {
     
    if (arg('2') != '') {
      $form['search_filter']['runner_number']['#default_value'] = arg('2');
    }

  }
  else {
    $form['search_filter']['runner_number']['#title'] = t('Runner Number');
    $form['search_filter']['runner_number']['#attributes']['placeholder'] = t('My Number');
  }

  //submit get my photo in the runner side
  $form['search_filter']['search'] = array('#type' => 'submit', '#value' => t('Search'));

  return $form;

}

function search_photos_form_validate($form, &$form_state) {
  $event_selected = $form['search_filter']['event']['#value'];
  if ($event_selected == t('None')) {
    form_set_error('search_filter][event', t('Please select event'));
  }

  $runner_num = $form['search_filter']['runner_number']['#value'];
  if ($runner_num == t('My Number')) {
    form_set_error('runner_number', t('Please enter your number'));
  }

}



/**
 * Function for runner photo search submit.
 */
function search_photos_form_submit($form, &$form_state) {

  $event_id = $form['search_filter']['event']['#value'];
  $runner_number = $form['search_filter']['runner_number']['#value'];

  if (!empty($runner_number)) {
    $form_state['redirect'] = "search-result/" . $event_id . "/" . $runner_number;
  }
  else {
    $form_state['redirect'] = "search-result/" . $event_id;
  }

}

/**
 * Form that redirects to file uploader page.
 */
function sell_photos_form($form, &$form_state) {
  //for sell the photos in the runner side
  $form['sellfield'] = array(
      '#type' => 'fieldset',
      '#title' => '',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#attached' => array('css' => array(drupal_get_path('module', 'amazon_s3') . '/amazon_s3.css')),  
  // '#attributes' => array('class'=>'photo-search-fields'),
  );



  $form['sellfield']['event'] = array(
    '#type' => 'select',
    '#title' => '',
    '#id' => 'event_runner_sell');

  $form['sellfield']['event']['#options'] = array('select_event' => t('Select Event'));
  //select event options from content type 'event'

  //get the event name from content type 'event'
  $events = get_events_upload();
  foreach ($events as $event) {
    $event_title = $event['title'];
    $event_nid   = $event['nid'];
    $form['sellfield']['event']['#options'][$event_nid] = $event_title;
  }
  $form['sellfield']['get_started'] = array('#type' => 'submit', '#value' => t('Uploader'));


  return $form;
}


/**
 * Function for search the images by runner
 * @return
 *   return rendered drupal form
 */
function find_trade_section() {

  $find_photos = drupal_render(drupal_get_form('search_photos_form'));

  global $user;

  if (!$user->uid) {
    $trade_photos = drupal_render(drupal_get_form('user_login'));
  } 
  else {
    $trade_photos = drupal_render(drupal_get_form('sell_photos_form'));
  }
  $style = "<div id='front-search-photos'>
  				<div class='front-block-search'>
            $find_photos
          </div>
  				<div class='front-block-upload'>
    				<div id='trade'>" . t('Sell your photos') . "</div>" .
    				//"<div id='taken_picture'>" . t('Sell your photos') . "</div>
    				"<div id='front-trade-photos'>
    				$trade_photos
    				</div>
    			</div>	
  			</div>";

  return $style;
}

/**
 * Function for get started submit button in the home
 *
 */
function sell_photos_form_submit($form, &$form_state) {

  global $user;
  $uid = $user->uid;


  if (isset($user->roles['1'])) {
    $form_state['redirect'] = "login";
  }
  else {
    $selected_event_id = $form['sellfield']['event']['#value'];
    if ($selected_event_id != 'select_event') {
      $form_state['redirect'] = "photographer/upload/" . $selected_event_id;
    }
    else {
      $form_state['redirect'] = "photographer/upload";
    }
  }
}

/** 
 * 
 * Implements hook_mail
 */
function photo_search_mail($key, &$message, $params) {

  $node = node_load($params['nid']);
  $event_title = $node->title;
  
  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    // send confirmation for requests.
    case 'number_request_response':
      $message['subject'] = t('Confirmation from @site-name', array('@site-name' => variable_get('site_name', 'Runmemo.com')), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('Thank you for your request. We will notify you as soon as we find a photo from @event with bib number @number',
        array(
          '@event' => $event_title,
          '@number' => $params['number'])
         , $options);
      break;
    // email with link to the search results for the new number
    case 'number_found_notification':
      $message['subject'] = t('Check you photos at @site-name', array('@site-name' => variable_get('site_name', 'Runmemo.com')), $options);
      $message['body'][] = t('It looks like we found your photo from @event.', array('@event' => $event_title)
      , $options);
      global $base_url;
      // $search_url = url('search-result/' . $params['nid'] . '/' . $params['number'], array('absolute' => TRUE));
      $search_url = $base_url . '/search-result/' . $params['nid'] . '/' . $params['number'];
      $message['body'][] = t('Please follow the link to see photo(s) with bib @number:', array('@number' => $params['number'])) . ' ' . $search_url;
       
      break;
  };
}

define('PHOTO_SEARCH_CRON_LAST_RUN', variable_get('photo_search_cron_last_run', 0));
/**
 * 
 * Implements hook_cron
 */
function photo_search_cron() {

  // get time of last cron execution
  $expire = PHOTO_SEARCH_CRON_LAST_RUN;
  // set time of last cron execution to now
  variable_set('photo_search_cron_last_run', REQUEST_TIME);
  // send notifications to runners
  send_notifications($expire);
  
}

/**
 * 
 * Sends notifications in response to requests for new photos.
 * @param integer $expire - timestamp from which we need to check new photos
 */
function send_notifications($expire) {
  // get all items from requests after last execution
  $requests = PhotoRequest::getRequests(0);
  $counter = 0;
  foreach ($requests as $item) {
    if (product_exists($item->eventid, $item->number, $expire)) {

      // send email to user
      $to =  $item->email;
      $from = 'no-reply@runmemo.com';
      $values = array();
      $values['number'] = $item->number;
      $values['nid'] = $item->eventid;
      drupal_mail('photo_search', 'number_found_notification', $to, language_default(), $values, $from);
      $counter++;
       
      // mark result as complete
      $updated = PhotoRequest::RequestPerformed($item->id);      
      if (!$updated) {
        watchdog('search notifications', 'Did not update request with id =' . $item->id);
      }    
    }
  }
  
  watchdog('search notifications', 'Photo Search Cron sent ' . $counter . ' emails.');
  return $counter; 
}

/**
 * 
 * Checks whether new photos with specified number were added to the system.
 * @param integer $nid nid of the event
 * @param integer $number bib number of the runner
 * @param integer $expire timestamp after which the product was changed
 */
function product_exists($nid, $number, $expire = 0) {
  
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'product')
      ->propertyCondition('status', 1)
      ->propertyCondition('changed', $expire, '>=')
      ->fieldCondition('field_event_reference', 'nid', $nid, '=')
      ->fieldCondition('field_ocr_numbers', 'value', $number, '=');

   $count = $query->count()->execute();

   return ($count > 0) ? TRUE : FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Form(photo_request_form) to be shown on the search result page if no results were found,
 * asks user for an email address and a number
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 * @return renderable array
 */
function photo_search_request_form($form, &$form_state) {
    
  $number = '';
  $is_event = FALSE;
  if (arg(0) == 'search-result') {
    if (is_numeric(arg(1)) && (arg(1) != '')) {
      $eventid = arg(1);
      if($event = node_load($eventid)) {
        $message = t('Let me know when my photos from @event_name are ready', array('@event_name' => $event->title, ));      
      } 
      else { // event does not exist
        $message = t('Event does not exist. Please try new search.');
        $eventid = NULL;
      }
    }
    else { // format of event parameter is wrong
      $message = t('Event parameter is wrong. Please try new search.');
      $eventid = NULL;
    }
    if (is_numeric(arg(2)) && (arg(2) != '')) {
      $number = arg(2);
    }
    
    $form['message'] = array(
      '#type' => 'markup',
      '#prefix' => '<p>',
      '#suffix' => '</p>',
      '#id' => 'let-me-know-message',
      '#markup' => $message,
    );
    
  } 
  else { // we are on the event's content type page
    $is_event = TRUE;
    $eventid = arg(1);
    $form['message'] = array(
      '#type' => 'markup',
      '#prefix' => '<p>',
      '#suffix' => '</p>',
      '#id' => 'let-me-know-message',
      '#markup' => t('No photos were uploaded to this event yet, 
                    but we\'d like to let you know once we find your photos'),
    );
  }
  
  if ($eventid == NULL) {
    return $form;
  }
  
  $form['eventid'] = array(
    '#id' => 'eventid',
    '#type' => 'hidden',
    '#value' => $eventid,
  );   
  
  $form['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email') . ':',
      '#size' => 30,
      '#maxlength' => 255,
      '#description' => t('We will send an email to that address'),
  );
  
  $form['number'] = array(
      '#type' => 'textfield',
      '#title' => t('Bib number') . ':',
      '#size' => 30,
      '#maxlength' => 6,
      '#description' => t('Number that you were wearing'),
      '#default_value' => $number,  
  );
  if ($is_event) {
     $form['number']['#description'] = '';
  }
  $form['submit'] = array(
      '#type' => 'submit', 
      '#prefix' => '<div id="photo-request-submit-button">',
      '#suffix' => '</div>',
      '#value' => t('Submit'), 
      '#submit' => array('event_registration_form_submit'), 
      '#ajax' => array(
          'callback' => 'photo_request_form_js',
          'wrapper' => 'photo-search-request-form',
          'effect' => 'fade',
      ),
  );
  
  return $form;
}

/**
 * Implements validations for photo_request_form
 * @param array $form
 * @param array $form_state 
 */
 function photo_request_form_validate($form, &$form_state) {
  if ($form_state['values']['email'] == '') {
    form_set_error('email', t('Please enter a valid email address'));
  }
  
  $number = $form_state['values']['number'];
  if ($number == '' || !is_numeric($number)) {
    form_set_error('number', t('Please enter a bib number'));
  }

} 

/**
 * AJAX callback for submit button on photo_request_form
 * Adds photo request and sends a confirmation email
 * @param array $form
 * @param array $form_state 
 */
function photo_request_form_js($form, &$form_state) {
  $eventid = $form_state['values']['eventid'];
  $email = $form_state['values']['email'];
  $number = $form_state['values']['number'];
  
  if ($eventid == '' || $email == '' || $number == ''
      || !is_numeric($eventid) || !is_numeric($number)) {
    return $form;
  }

  PhotoRequest::AddRequest($email, $eventid, $number);
  
  $from = 'no-reply@runmemo.com';
  $values['number'] = $number;
  $values['nid'] = $eventid;
  
  drupal_mail('photo_search', 'number_request_response', $email, language_default(), $values, $from);
  
  $markup = '<div id="photo-request-form" class="message">'
    . '<p>' . t('Thank you for your request!') . '</p>'
    . '<p>' . t('We will let you know once we get any photos of you via email - @email', array('@email' => $email))
    . '</div>';
  
  // post registration message
  return $markup;
  
}

/**
 * Add to cart submit button in the search result page
 */
function photo_search_preview_area($img_uri) {
  $form = array();

  $form['cart_hidden']   = array('#type' => 'textfield', '#value' => '', '#id' => 'cart_hidden', '#prefix' => '<div style="display:none;">', '#suffix' => '</div>');
  $form['selected_product'] = array('#type' => 'textfield', '#title' => '', '#id' => 'selected_cart_products', '#prefix' => '<div style="display:none;">', '#suffix' => '</div>');
  $url = url('cart/checkout');
  
  $default_currency_code = variable_get('uc_currency_code', UC_CURRENCY_DEFAULT_CURRENCY);
  $code = isset($_SESSION['currency_switcher']) ? $_SESSION['currency_switcher'] : $default_currency_code;
  $symbol = currency_api_get_symbol($code);
  
  // @todo move this html block from here to theme
  $form['cart_summary'] = array('#markup' =>
    "<div class='cart_summ'>
    	<div id='currency-sign' style='display:none'>" . variable_get('uc_currency_sign') . "</div>
  		<div class='summary_item_cost'>
  			<span class='cart-block-icon-full' title=" . t('View your shopping cart.') . "></span>
			<span class='shop_cart_title'>" . t('Shopping Cart') . "</span>
		</div>
		<div class='proceed_to_cart'>
			<a href='$url'></a>
			
		</div>
		<div>
			<span class='search-summary-photos'>"
  . t('Photos') . ':&nbsp;' .
            "<span class='placeholder'></span>
			</span>
				<span class='search-summary-cost'>" . t('Total') . ":&nbsp;" . $symbol . 
                                      "<span class='placeholder'></span>
				</span>
		</div>
	</div>");

  $form['prev_img_det'] = array(
    '#markup' =>
      '<div class="cost_auth_det">
  	  <span id="photo_cost">' . t('Price') . ':<label class="photo_cost"></label>
  	  </span><br/>
  	  <span id="photo_author">' . t('Photo by') . ':<label class="photo_author"></label>
  	  </span></div>', 
    '#prefix' => '<div class="search-image-preview" style="height: 700px; ">', );
  $form['add_to_cart'] = array(
    '#type' => 'submit',
    '#value' => '',
    '#id' => 'add_to_cart', 
  );
  $form['fb_like'] = array(
      '#markup' => '<div class="fb-like search-fb-like" data-send="true" data-layout="button_count" data-width="200" data-show-faces="false" data-font="arial"></div>'
  );
  $img_url = image_style_url('search_preview', $img_uri); 
  $form['preview'] = array(
    '#markup' => '<div id="prev_img" class="image-preview-container">
    				<img class="image-preview" id="preview_image" src="' . $img_url . '" alt="preview-image"/>
  				  </div>
  				</div>',
  );

  return $form;
}


/**
 * Implements hook_preprocess_html
 */
function photo_search_preprocess_html(&$vars) {

  if (arg(0) == 'search-result') {
    $event = get_event(arg(1));
    // Add Open Graph title meta tag
    if ($event) {
      $og_title = t('Photos from @event on Runmemo.com', array('@event' => $event['title']));
    } 
    else {
      $og_title = t('Photos on Runmemo.com');
    }
    $open_graph_title = array(
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => array(
      'property' => 'og:title',
      'content' => $og_title,
      )
    );
    drupal_add_html_head($open_graph_title, 'meta_open_graph_title');

    // Add first image from search results as Open Graph image.
    
    $view = $vars['page']['#views_contextual_links_info']['views_ui']['view']->result;
    if (!empty($view)) {
      $image_uri = $view[0]->field_uc_product_image[0]['rendered']['#item']['uri'];
      $image_url = image_style_url('search_thumbnail', $image_uri);

      $open_graph_image = array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'property' => 'og:image',
        'content' =>  $image_url,
      )
      );

      drupal_add_html_head($open_graph_image, 'meta_open_graph_image');
    }
  }
}


/**
 *
 * implements hook_block_info()
 */
function photo_search_block_info() {
  $blocks['photo_search_from_event'] = 
    array('info' => t('Search block for Event page.'), 
          'cache' => DRUPAL_NO_CACHE);
  return $blocks;
}

/**
 *
 * implements hook_block_view()
 */
function photo_search_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'photo_search_from_event':
      return photo_search_event_search_block();
      break;
  }
}


/**
 * Block that allows users to search for their photo if photos where uploaded.
 * Otherwise users can leave request to be notified of their photos.
 * @return array 
 */
function photo_search_event_search_block() {
 
  $block = array();
  if (!search_event_has_photos()) { // show form for requests
    $block['subject'] = t('Leave Request');
    $block['content'][] = drupal_get_form('photo_search_request_form');
  }
  else { // show search form
    $block['subject'] = t('Find me by number');
    $block['content'][] = drupal_get_form('search_by_number_form');
  }
  
  return $block;
}

/**
 * Search photos from an event form implementation
 * @param array $form
 * @param array $form_state
 */
function search_by_number_form($form, &$form_state) {
  $nid = -1;
  $node = menu_get_object();
  if (isset($node)) {
    $nid = $node->nid;
  }
  else {
    watchdog('Callback', 'search_by_number_form is visible in a wrong place.', array($form), WATCHDOG_ERROR);    
    return;
  }
  
    $form['number'] = array(
        '#id' => 'field-number',
        //'#title' => t('Bib number'),
        '#type' => 'textfield',
        '#size' => 20,
        '#required' => TRUE,
    );
    $form['submit'] = array( // search button
        '#type' => 'submit', 
        '#value' => t('Search'), 
        '#prefix' => '<div id="search-by-number-button">',
        '#suffix' => '</div>',
        '#submit' => array('search_by_number_form_submit'), 
    );

    // cache nid in the form as it will not be available in the callback overwise
    $form['event_id'] = array(
      '#type' => 'hidden',
      '#value' =>  $nid,   
    );
  return $form;
}


function search_by_number_form_submit($form, &$form_state) {
  // get event id and number
  $eid = $form['event_id']['#value'];
  $number = $form['number']['#value'];
  // build path to the search page
  $path = 'search-result/' . $eid . '/' . $number;
  $form_state['redirect'] = array( 
      $path,    // http_path
      array(),  // $options
      302,      // $http_response_code
  );
}