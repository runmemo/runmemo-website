<?php
/**
 * Init function for adding the external file
 */

function photo_search_init() {
 
  //to add the js file
  drupal_add_js(drupal_get_path("module","photo_search")."/photo_search.js");
  drupal_add_css(drupal_get_path('module', 'photo_search') . '/photo_search.css');
}

///////////////////////////////////////////////////////////
/**  
 * Create the hook menu for each page 
 * by using this we can map to the related page
 * @return
 * return menu items
 */
function photo_search_menu() {
    //url for runner
  $items['runner'] = array(
    'title' => 'Photo Gallery',
    'description' => t('View the objects in a event on your Amazon S3 account.'),
    'page callback' => 'find_trade_section',
    'access arguments' => array('access_runner'),
    'type' => MENU_CALLBACK
  );
  
  $items['runner-test'] = array(
    'title' => 'Photo Gallery',
    'description' => t('View the objects in a event on your Amazon S3 account.'),
    'page callback' => 'runner_test',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

  //AJAX url
  $items['cart_add_remove'] = array(
    'title' => '',
    'description' => t(''),
    'page callback' => 'cart_add_remove',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

    return $items;

}

/*
 * AJAX cart add,remove function
 */
function cart_add_remove(){
 $nid = $_GET['nid'];
 
 if($nid == '') {
    $subtotal = 0;
    foreach (uc_cart_get_contents() as $item) {
      $subtotal += $item->price * $item->qty;
    }
    $items = 0;
    foreach (uc_cart_get_contents() as $item) {
      $items += 1;
    }
    echo $items .'|'.$subtotal;
    exit;
 }
 
 else {
  foreach (uc_cart_get_contents() as $item) {
    $cart_ids[]=$item->nid ;
  }
  if(in_array($nid,$cart_ids)) {
    uc_cart_remove_item($nid, $cid = NULL, $data = array('module' => 'uc_product'));
    echo 0 ;
    exit;
   }
  else {
    uc_cart_add_item($nid,1);
    echo 1;
    exit;
  }
 }
  
}




/**
 * Set the pemission for each url in the admin side
 * so we can the restrict the particular page to accessed by the anonymouse user
*/
function photo_search_permission() {

  return array(
      'access_runner' => array(
      'title' => t('Access runner'),
      'description' => t('Access runner'),
      'restrict access' => TRUE
    ),

  );
}


/**
 * Created the form for runner page
 * runner can search the photos by selecting the event name
 */

function select_event_runner_get_photos($form,&$form_state) {
  
  global $user;
  $form = array();
  $form['setfield']=array(
      '#type' => 'fieldset',
      '#title' => '',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#attached'=>array('css' => array(drupal_get_path('module', 'photo_search') . '/photo_search.css')),

      );

  //select event in the runner side
  
  if(arg('0') == 'search-result') {
    $form['setfield']['event_label'] = array('#markup' => "<div  id='event-search'>Event</div>");
    $form['setfield']['events_select_runner']=array('#type'=>'select','#title'=>"Event",'#id'=>'event_runner','#required' => 'true');
  }
  else{
    $form['setfield']['find'] = array('#markup' => "<div  id='find'>Find</div> <div id='great_photos'>great photos of you...</div>");
    $form['setfield']['events_select_runner']=array('#type'=>'select','#title'=>"Event",'#id'=>'event_runner',);
    
  }
  $form['setfield']['events_select_runner']['#options']=array('select_event'=>"Select Event");
  //select event options from content type 'event'
  $event_helper = new event_helper();
  //get the event name from content type 'event'
  $event_name = $event_helper->get_events();
  foreach($event_name as $event_name_value)
  {
      $event_title = $event_name_value->title;
      $event_title_nid = $event_name_value->nid;
      $form['setfield']['events_select_runner']['#options'][$event_title_nid]=$event_title;
  }

  if((is_numeric(arg(1))) && (arg(1) != ''))
  {
      $default=arg(1);
      $form['setfield']['events_select_runner']['#default_value']=$default;
  }

  //text field for get the runner number
  if(arg('0') == 'search-result') {
    $form['setfield']['my_number'] = array('#markup' => '<div id="my_number">My Number</div>');
    $form['setfield']['runner_number']=array('#type'=>'textfield','#title'=>'Runner Number','#size'=>'20','#id'=>'runner_number','#placeholder' => t('My Number'),'#prefix'=>"<div style='float:right' class= 'number_search'>",'#required' => 'true');
    if(arg('2') != '') {
      $form['setfield']['runner_number']['#default_value'] = arg('2');
    }

  }
  else {
    $form['setfield']['runner_number']=array('#type'=>'textfield','#title'=>'Runner Number','#size'=>'20','#id'=>'runner_number','#prefix'=>"<div style='float:left'>",'#required' => 'true',);
  }

  //submit get my photo in the runner side
  $form['setfield']['search']=array('#type'=>'submit','#value'=>'','#prefix'=>"<div style='float:right;margin-left:15px;'></div>",'#suffix' => '</div>');

  return $form;

}

function select_event_runner_get_photos_validate($form,&$form_state) {
 $event_selected = $form['setfield']['events_select_runner']['#value'];
 if($event_selected == 'select_event') {
   form_set_error('', t('Please select event'));
 }
 
 $runner_num = $form['setfield']['runner_number']['#value'];
 if($runner_num == 'My Number') {
   form_set_error('', t('Please enter your number'));
 }
 
}



/** 
 * Function for runner photo search submit.
 */
function select_event_runner_get_photos_submit($form,&$form_state) {

  $event_id = $form['setfield']['events_select_runner']['#value'];
  $runner_number = $form['setfield']['runner_number']['#value'];
  
  if(!empty($runner_number)) {
    $form_state['redirect'] = "search-result/" . $event_id . "/" . $runner_number;
  }
  else {
    $form_state['redirect'] = "search-result/" . $event_id;
  }

}

/** 
 * Function for buy the images
 * @return 
 *   return form values
 */
function select_event_runner_sell_photos($form,&$form_state) {
    
  global $user;
  //for sell the photos in the runner side
  $form['sellfield'] = array(
      '#type' => 'fieldset',
      '#title' => '',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#attached'=>array('css' => array(drupal_get_path('module', 'amazon_s3') . '/amazon_s3.css')),

      );

  $form['sellfield']['trade'] = array('#markup' => '<div id="trade">Trade</div>  <div id="taken_picture">pictures you have taken...</div>');

  if($user->roles['1']!=null) {
    $form['sellfield']['get_started'] = array('#type'=>'submit','#value'=>'');
  }
  else {
    $form['sellfield']['events_select_runner'] = array('#type'=>'select','#title'=>'','#id'=>'event_runner_sell');

    $form['sellfield']['events_select_runner']['#options'] = array('select_event'=>"Select Event");
    //select event options from content type 'event'
    $event_helper = new event_helper();
    //get the event name from content type 'event'
    $event_name=$event_helper->get_events();
    foreach($event_name as $event_name_value){
    $event_title = $event_name_value->title;
    $event_title_nid = $event_name_value->nid;
    $form['sellfield']['events_select_runner']['#options'][$event_title_nid] = $event_title;
    }
    $form['sellfield']['get_started'] = array('#type'=>'submit','#value'=>'');
  }


  return $form;
}

/**
 * Function for get started submit button in the home
 *  
 */

function select_event_runner_sell_photos_submit($form,&$form_state) {

  global $user;
  $uid = $user->uid;
  $selected_event_id = $form['sellfield']['events_select_runner']['#value'];    
  if($user->roles['1']!=null){
      $form_state['redirect'] = "login";
  }
  else{
      if($selected_event_id != 'select_event'){
        $form_state['redirect'] = "photographer/".$selected_event_id;
      }
      else{
        $form_state['redirect'] = "photographer";
      }
  }    
}

/**
 * Function for search the images by runner
 * @return 
 *   return rendered drupal form
 */
function find_trade_section() {
  
  
  $find_photos = drupal_render(drupal_get_form('select_event_runner_get_photos'));

  $trade_photos = drupal_render(drupal_get_form('select_event_runner_sell_photos'));

  $style="<span style='float:right'><div>$find_photos</div><div>$trade_photos </div></span>";

  return $style;
}

/**
 * For search the photo using runner number in the recent event section
 * @return string 
 */
function recent_event1_image(){
  
  $form = array();
  
  $form['runner_number'] = array('#type' => 'textfield','#title' => 'Runner Number','#size' => '20','#id' => 'number_recent_event1','#required' => 'true');
  
  $form['submit'] = array('#type' => 'submit','#value' => '',);
     
  return  $form;
  
}

function recent_event1_image_validate($form,&$form_state){
 $runner_num_event1 = $form['runner_number']['#value'];
 if($runner_num_event1 == 'My Number' || $runner_num_event1 == '') {
   form_set_error('', t('Please enter your number'));
 }
}

/**
 * For testing purpose
 * @param type $form
 * @param type $form_state 
 */
function recent_event1_image_submit($form,&$form_state){
  $event_helper = new event_helper();
  $recent_event1 = $event_helper->get_recent_event_id(0,1);
  $runner_number = $form['runner_number']['#value'];
  $path = 'search-result/' . $recent_event1 . '/' . $runner_number;
  drupal_goto($path);
}

/**
 * For search the photo using runner number in the recent event section
 * @return string 
 */
function recent_event2_image(){
  
  $form = array();
  
  $form['runner_number_event2'] = array('#type' => 'textfield','#title' => 'Runner Number','#size' => '20','#id' => 'number_recent_event2','#required' => 'true');
  
  $form['submit_event2'] = array('#type' => 'submit','#value' => '',);
       
  return  $form;
  
}

/**
 * Form validation 
 */

function recent_event2_image_validate($form,&$form_state){
 $runner_num_event2 = $form['runner_number_event2']['#value'];
 if($runner_num_event2 == 'My Number' || $runner_num_event2 == '') {
   form_set_error('', t('Please enter your number'));
 }
}
/**
 * For testing purpose
 * @param type $form
 * @param type $form_state 
 */

function recent_event2_image_submit($form,&$form_state){
  $event_helper = new event_helper();
  $recent_event2 = $event_helper->get_recent_event_id(1,1);
  $runner_number = $form['runner_number_event2']['#value'];
  $path = 'search-result/' . $recent_event2 . '/' . $runner_number;
  drupal_goto($path);
}


/**
 * Add to cart submit button in the search result page
 * @param type $form
 * @param type $form_state
 * @return string 
 */

function search_result_cart($form,&$form_state) {
  $form = array();
  
  $form['cart_hidden']   = array('#type' => 'textfield','#value' => '', '#id' => 'cart_hidden','#prefix' => '<div style="display:none;">', '#suffix'=>'</div>');
  $form['selected_product'] = array('#type' => 'textfield','#title' => '','#id' => 'selected_cart_products','#prefix' => '<div style="display:none;">','#suffix' => '</div>');
  $url = url('cart/checkout');
  $form['cart_summary'] = array('#markup' => t("<div class='cart_summ'><div class='summary_item_cost'><span class='cart-block-icon-full' title='View your shopping cart.'></span><span class='shop_cart_title'>Shopping Cart</span></div><div><span class='summary_selected_photos'><span class='placeholder'></span> Items</span><span class='summary_cost'>Total:&nbsp £<span class='placeholder'></span></span></div><div class='proceed_to_cart'><a href=$url></a></div></div>"));
  $form['prev_img_det'] = array('#markup' => t('<div class="cost_auth_det"><span id="photo_cost">Price:<label class="photo_cost">&euro  2870 </label></span><br/><span id="photo_author">Photo by:<label class="photo_cost">James Whyte </label></span></div>'),'#prefix' => '<div class="prev_img_details">',);
  $form['add_to_cart'] = array('#type' => 'submit', '#value' => '','#id' => 'add_to_cart','#suffix' => '<div id="prev_img"><img  id="preview_image"  src="/sites/default/files/logo.png"/></div></div>',);
 
  return $form;
}


/**
 * Cron form alter
 */
function photo_search_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'system_cron_settings') {
    $form['cron']['cron_safe_threshold']['#options'] = array(0 => 'Never', '900' => '15 Mins', '1800' => '30 Mins', '3600' => '1 hour', '10800' => '3 hours', '21600' => '6 hours', '43200' => '12 hours', '86400' => '1 day','604800' => '1 week');
  }
}

 /**
  * hook_cron
  */
function photo_search_cron() { 

 $filepath_drupal = variable_get('file_public_path') .'/';
 $dest = $filepath_drupal.'styles/thumbnail/public';
 $prev_dest = $filepath_drupal.'styles/preview-with-watermark/public';
 
  $user_helper_object = new user_helper_model();
 //$photos=$user_helper_object->get_local_photos();
 
 $thumbsize=$user_helper_object->get_thumbnail_size();
 $thumb=unserialize($thumbsize->data);
 
 $previewsize=$user_helper_object->get_preview_size();
 $prev_size=unserialize($previewsize->data);
 //print_r($prev_size);exit;
 
 foreach ($user_helper_object->get_local_photos() as $row) {//print_r($row);exit;
  $sourceimagename = "";
  $url = str_replace("public://", $filepath_drupal, $row->uri);
  
  //$url=$filepath_drupal.$filename;
  
  
  
  if (file_exists($url))
  { 
   //create the physical thumbnail image to its destination 
   // get the file name from the source file 
   $filearr = explode('/', $url);
   $sourceimagename = array_pop($filearr);
   if (!file_exists(url($dest.'/'.$sourceimagename, array('absolute' => TRUE))))
   {
      
      
      
      $item=array('uri'=>$row->uri,'width'=>$thumb['width'],'height'=>$thumb['height']);
      $path=array($dest.'/'.$sourceimagename);
      $variables=array('item'=>$item,'image_style'=>'thumbnail','path'=>$path);
      theme_image_formatter($variables);
      
    ////////////////////////////////////////////////////////////////
    $ch = curl_init();

    // set URL and other appropriate options
    curl_setopt($ch, CURLOPT_URL, url($dest.'/'.$sourceimagename, array('absolute' => TRUE)));
    curl_setopt($ch, CURLOPT_TIMEOUT_MS, 10000);
    curl_setopt($ch, CURLOPT_HEADER, 0);

    // grab URL and pass it to the browser
    curl_exec($ch);

    // close cURL resource, and free up system resources
    curl_close($ch);
    ////////////////////////////////////////////////////////////////
      
      
      
    
   }
   else
   {
    echo '<br>Found '.$dest.$sourceimagename.' already existing. Hence exiting.';
    break;
   }
   if (!file_exists(url($prev_dest.'/'.$sourceimagename, array('absolute' => TRUE))))
   {
      $item=array('uri'=>$row->uri,'width'=>$prev_size['width'],'height'=>$prev_size['height']);
      $path=array($prev_dest.'/'.$sourceimagename);
      $variables=array('item'=>$item,'image_style'=>'preview-with-watermark','path'=>$path);
      theme_image_formatter($variables);
      
    ////////////////////////////////////////////////////////////////
    $ch = curl_init();

    // set URL and other appropriate options
    curl_setopt($ch, CURLOPT_URL, url($prev_dest.'/'.$sourceimagename, array('absolute' => TRUE)));
    curl_setopt($ch, CURLOPT_TIMEOUT_MS, 10000);
    curl_setopt($ch, CURLOPT_HEADER, 0);

    // grab URL and pass it to the browser
    curl_exec($ch);

    // close cURL resource, and free up system resources
    curl_close($ch);
    ////////////////////////////////////////////////////////////////
   }
   
   if($thumb_status && $prev_status)
   {
    //Update the DB
    $status = $user_helper_object->update_thumb_status($row->fid);
   }
   
   
   
   
  }
  else {
   echo '<br>Did not find source  file '.$url;
  }
 }//for each
 
 //echo "<br>Process completed successfully.";
 //exit;
}

