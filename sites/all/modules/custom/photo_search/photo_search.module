<?php


/**
 * Implements hook_views_api().
 */
function photo_search_views_api() {
  return array("version" => "3.0");
}

/**
 * Init function for adding the external file
 */
function photo_search_init() {

}

function photo_search_preprocess_page(&$variables) {
  if('search-result' === arg(0)) {
    drupal_add_css(drupal_get_path('module', 'photo_search') . '/photo_search.css');
    drupal_add_js(drupal_get_path('module', 'photo_search') . '/photo_search.js');
  }
}
///////////////////////////////////////////////////////////
/**
 * Create the hook menu for each page
 * by using this we can map to the related page
 * @return
 * return menu items
 */
function photo_search_menu() {
  //url for runner
  $items['runner'] = array(
    'title' => 'Photo Gallery',
    'description' => 'View the objects in a event on your Amazon S3 account.',
    'page callback' => 'find_trade_section',
    'access arguments' => array('search photos'),
    'type' => MENU_CALLBACK
  );


  return $items;

}


/**
 * Set the pemission for each url in the admin side
 * so we can the restrict the particular page to accessed by the anonymouse user
 */
function photo_search_permission() {

  return array(
      'search photos' => array(
      'title' => t('Search photos'),
      'description' => t('Search photos'),
      'restrict access' => TRUE
  ),

  );
}

/**
 * Implements photo_search_user_default_permissions().
 */
function photo_search_user_default_permissions() {
  $permissions = array();

  // Exported permission: access_runner.
  $permissions['search photos'] = array(
    'name' => 'search photos',
    'roles' => array(
  0 => 'administrator',
  1 => 'anonymous user',
  2 => 'authenticated user',
  ),
    'module' => 'photo_search',
  );

  return $permissions;
}

/**
 *
 * implements hook_block_info()
 */
function photo_search_block_info() {

  $blocks['recent_event_left'] = array('info' => t('Recent Event Images - Left'),);
  $blocks['recent_event_right'] = array('info' => t('Recent Event Images - Right'),);
   
  return $blocks;
}

/**
 *
 * implements hook_lock_view()
 */
function  photo_search_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  $nid = 0;
  switch ($delta) {
    case 'recent_event_left':
      $nid = event_helper::get_recent_event_id(0, 1);
      return recent_events_block($nid);
    case 'recent_event_right':
      $nid = event_helper::get_recent_event_id(1, 1);
      return recent_events_block($nid);;
      break;
  }

}

/**
 *
 * Creates markup for first N promoted products.
 * @param integer $nid - nid of event node
 * @param integer $items - number of images to show
 */
function get_recent_event_images_view($nid, $items) {

  // Select first N products associated with event
  $query = new EntityFieldQuery;
  $entities =  $query
  ->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'product')
  ->propertyCondition('status', 1)
  ->fieldCondition('field_event_reference', 'nid', $nid, '=')
  ->fieldCondition('field_promote', 'value', TRUE, '=')
  ->range(0, $items)
  ->execute();

  $products = node_load_multiple(array_keys($entities['node']));

  // build makrup for images
  $markup ='<div class="recent-event-images">';
  foreach ($products as $product) {
    // get html for the image style
    $img_url = image_style_url('search_thumnail', $product->uc_product_image['und'][0]['uri']);
    $markup = $markup . '<img src=' . $img_url . '>';
  }
  $markup = $markup . '</div>';
  return $markup;
}

/**
 *
 * Builds recent event block for event node id provided
 * @param integer $nid nid of Event
 */
function recent_events_block($nid)
{
  $event = node_load($nid);
  $block = array();
  $block['subject'] = $event->title;

  // get first images for event
  $block['content'][] = array('#markup' => get_recent_event_images_view($nid, 4));
  // add form to search products from same event
  $block['content'][] = drupal_get_form('recent_event_search_form_' . $nid, $nid); ;

  return $block;

}

/**
 * Created the form for runner page
 * runner can search the photos by selecting the event name
 */

function select_event_runner_get_photos($form, &$form_state) {

  global $user;
  $form = array();
  $form['search_filter']=array(
      '#type' => 'fieldset',
      '#title' => '',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#attached' => array('css' => array(drupal_get_path('module', 'photo_search') . '/photo_search.css')),

  );

  if (arg('0') != 'search-result') {
    $form['search_filter']['find'] = array(
    		'#markup' => "<div id='find'>Find</div>
    					 <div id='great_photos'>great photos of you...</div>");
  }
  $form['search_filter']['events_select_runner'] = array(
    		'#type' => 'select', 
    		'#title' => "I ran this event: ", 
    		'#id' => 'event_runner', 
    		'#prefix' => "<div id='field-event'>", 
    		'#suffix' => '</div>', 
    		'#required' => 'true',
            '#default_value' => 'None');


  $form['search_filter']['events_select_runner']['#options']['None'] = t('Select Event');
  //$form['search_filter']['events_select_runner']['#options'] = array('select_event' => "Select Event");
  //select event options from content type 'event'

  //get the event name from content type 'event'
  $event_name = event_helper::get_events();
  foreach ($event_name as $event_name_value) {
    $event_title_nid = $event_name_value->nid;
    $event_title = $event_name_value->title;
    $form['search_filter']['events_select_runner']['#options'][$event_title_nid]=$event_title;
  }

  if ((is_numeric(arg(1))) && (arg(1) != '')) {
    $default=arg(1);
    $form['search_filter']['events_select_runner']['#default_value']=$default;
  }

  $form['search_filter']['runner_number'] = array(
    		'#type' => 'textfield', 
    		'#title' => 'With number:', 
    		'#size' => '20', 
    		'#id' => 'runner_number', 
    		'#prefix' => "<div id='field-number'>", 
    		'#suffix' => '</div>', 
    		'#required' => 'true');
  //text field for get the runner number
  if (arg('0') == 'search-result') {
     
    if (arg('2') != '') {
      $form['search_filter']['runner_number']['#default_value'] = arg('2');
    }

  }
  else {
    $form['search_filter']['runner_number']['#title'] = 'Runner Number';
  }

  //submit get my photo in the runner side
  $form['search_filter']['search'] = array('#type' => 'submit', '#value' => '');

  return $form;

}

function select_event_runner_get_photos_validate($form, &$form_state) {
  $event_selected = $form['search_filter']['events_select_runner']['#value'];
  if ($event_selected == 'None') {
    form_set_error('search_filter][events_select_runner', t('Please select event'));
  }

  $runner_num = $form['search_filter']['runner_number']['#value'];
  if ($runner_num == 'My Number') {
    form_set_error('runner_number', t('Please enter your number'));
  }

}



/**
 * Function for runner photo search submit.
 */
function select_event_runner_get_photos_submit($form, &$form_state) {

  $event_id = $form['search_filter']['events_select_runner']['#value'];
  $runner_number = $form['search_filter']['runner_number']['#value'];

  if (!empty($runner_number)) {
    $form_state['redirect'] = "search-result/" . $event_id . "/" . $runner_number;
  }
  else {
    $form_state['redirect'] = "search-result/" . $event_id;
  }

}

/**
 * Function for buy the images
 * @return
 *   return form values
 */
function select_event_runner_sell_photos($form, &$form_state) {

  global $user;
  //for sell the photos in the runner side
  $form['sellfield'] = array(
      '#type' => 'fieldset',
      '#title' => '',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#attached' => array('css' => array(drupal_get_path('module', 'amazon_s3') . '/amazon_s3.css')),

  );

  $form['sellfield']['trade'] = array('#markup' => '<div id="trade">Trade</div>  <div id="taken_picture">pictures you have taken...</div>');

  if (isset($user->roles['1'])) {
    $form['sellfield']['get_started'] = array('#type' => 'submit', '#value' => '');
  }
  else {
    $form['sellfield']['events_select_runner'] = array('#type' => 'select', '#title' => '', '#id' => 'event_runner_sell');

    $form['sellfield']['events_select_runner']['#options'] = array('select_event' => "Select Event");
    //select event options from content type 'event'

    //get the event name from content type 'event'
    $events = event_helper::get_events();
    foreach ($events as $event) {
      $event_title = $event->title;
      $event_nid   = $event->nid;
      $form['sellfield']['events_select_runner']['#options'][$event_nid] = $event_title;
    }
    $form['sellfield']['get_started'] = array('#type' => 'submit', '#value' => '');
  }


  return $form;
}

/**
 * Function for get started submit button in the home
 *
 */

function select_event_runner_sell_photos_submit($form, &$form_state) {

  global $user;
  $uid = $user->uid;


  if (isset($user->roles['1'])) {
    $form_state['redirect'] = "login";
  }
  else {
    $selected_event_id = $form['sellfield']['events_select_runner']['#value'];
    if ($selected_event_id != 'select_event') {
      $form_state['redirect'] = "photographer/" . $selected_event_id;
    }
    else {
      $form_state['redirect'] = "photographer";
    }
  }
}

/**
 * Function for search the images by runner
 * @return
 *   return rendered drupal form
 */
function find_trade_section() {

  $find_photos = drupal_render(drupal_get_form('select_event_runner_get_photos'));

  $trade_photos = drupal_render(drupal_get_form('select_event_runner_sell_photos'));

  $style = "<div id='front-search-photos'><div>$find_photos</div><div id='front-trade-photos'>$trade_photos </div></div>";

  return $style;
}

/**
 *
 * implements hook_forms
 * @param sting $form_id
 */
function photo_search_forms($form_id) {

  $forms = array();
  if (strpos($form_id, 'recent_event_search_form_') === 0) {
    $nids = array_map('strrev', explode('_', strrev($form_id)));
    $forms[$form_id] = array(
      'callback' => 'recent_event_search_form',
      'callback arguments' => array($nids[0]),
    );
  }
  return $forms;

}


/**
 * Builds form for recent events regions
 * @return string
 */
//function recent_event1_image() {
function recent_event_search_form() {

  $form = array();
  $form['runner_number'] =
  array (
  		'#type' => 'textfield', 
  		'#title' => 'Runner Number', 
  		'#size' => '20', 	
    	'#required' => 'true');
  $form['submit_button'] =
  array ( // search button
  				'#type' => 'submit', 
  				'#value' => '', 
  				'#submit' => array('recent_event_search_submit'), 
  );

  return  $form;

}

function ecent_event_search_validate($form, &$form_state) {

  if ($form['runner_number']['#value']  == 'My Number' || $form['runner_number']['#value']  == '') {
    form_set_error('runner_number', t('Please enter your number'));
  }
}

/**
 * For testing purpose
 * @param type $form
 * @param type $form_state
 */
function recent_event_search_submit($form, &$form_state) {


  $eid = $form['event_id']['#value'];
  $number = $form['runner_number']['#value'];

  $path = 'search-result/' . $eid . '/' . $number;
  $form_state['redirect'] = array (
                                  $path,
                                  array(),    // $options
                                  302,  // $http_response_code
                                );
}

/**
 * Cron form alter
 */
function photo_search_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'system_cron_settings') {
    $form['cron']['cron_safe_threshold']['#options'] = array(0 => 'Never', '900' => '15 Mins', '1800' => '30 Mins', '3600' => '1 hour', '10800' => '3 hours', '21600' => '6 hours', '43200' => '12 hours', '86400' => '1 day', '604800' => '1 week');
  }

  if (strpos($form_id, 'recent_event_search_form_') === 0) {
    $nid = $form_state['build_info']['args'][0];
    $form['event_id'] = array('#type' => 'hidden', '#value' => $nid, );
  }
}



