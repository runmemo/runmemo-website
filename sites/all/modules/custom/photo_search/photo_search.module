<?php

module_load_include('inc', 'sport_event', 'sport_event');

/**
 * Implements hook_views_api().
 */
function photo_search_views_api() {
  return array("version" => "3.0");
}

/**
 * Init function for adding the external file
 */
function photo_search_init() {

}

function photo_search_preprocess_page(&$variables) {
  if ('search-result' === arg(0)) {
    drupal_add_css(drupal_get_path('module', 'photo_search') . '/photo_search.css');
    drupal_add_js(drupal_get_path('module', 'photo_search') . '/photo_search.js');
  }
}
///////////////////////////////////////////////////////////
/**
 * Create the hook menu for each page
 * by using this we can map to the related page
 * @return
 * return menu items
 */
function photo_search_menu() {
  //url for runner
  $items['runner'] = array(
    'title' => 'Photo Gallery',
    'description' => 'View the objects in a event on your Amazon S3 account.',
    'page callback' => 'find_trade_section',
    'access arguments' => array('search photos'),
    'type' => MENU_CALLBACK
  );


  return $items;

}
/**
 * Set the pemission for each url in the admin side
 * so we can the restrict the particular page to accessed by the anonymouse user
 */
function photo_search_permission() {

  return array(
      'search photos' => array(
      'title' => t('Search photos'),
      'description' => t('Search photos'),
  ),

  );
}

/**
 * Implements photo_search_user_default_permissions().
 */
function photo_search_user_default_permissions() {
  $permissions = array();

  // Exported permission: access_runner.
  $permissions['search photos'] = array(
    'name' => 'search photos',
    'roles' => array(
  0 => 'administrator',
  1 => 'anonymous user',
  2 => 'authenticated user',
  ),
    'module' => 'photo_search',
  );

  return $permissions;
}

/**
 * creates the form for runner page
 * runner can search the photos by selecting the event name
 */
function select_event_runner_get_photos($form, &$form_state) {

  global $user;
  $form = array();
  $form['search_filter']=array(
      '#type' => 'fieldset',
      '#title' => '',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#attached' => array('css' => array(drupal_get_path('module', 'photo_search') . '/photo_search.css')),

  );

  if (arg('0') != 'search-result') {
    $form['search_filter']['find'] =
    array(
    '#markup' => "<div id='find'>Runners</div>
    <div id='great_photos'>Find great photos of you</div>");
  }
  $form['search_filter']['events_select_runner'] = array(
    '#type' => 'select', 
    '#title' => "I ran this event: ", 
    '#id' => 'event_runner',
    '#prefix' => "<div id='field-event'>",
    '#suffix' => '</div>',
    '#required' => 'true',
    '#default_value' => 'None');

  $form['search_filter']['events_select_runner']['#options']['None'] = t('Select Event');
  //$form['search_filter']['events_select_runner']['#options'] = array('select_event' => "Select Event");
  //select event options from content type 'event'

  //get the event name from content type 'event'
  $event_name = get_events();
  foreach ($event_name as $event_name_value) {
    $event_title_nid = $event_name_value->nid;
    $event_title = $event_name_value->title;
    $form['search_filter']['events_select_runner']['#options'][$event_title_nid]=$event_title;
  }

  if ((is_numeric(arg(1))) && (arg(1) != '')) {
    $default=arg(1);
    $form['search_filter']['events_select_runner']['#default_value']=$default;
  }

  $form['search_filter']['runner_number'] = array(
    '#type' => 'textfield',
    '#title' => 'With number:',
    '#size' => '20',
    '#id' => 'runner_number',
    '#prefix' => "<div id='field-number'>",
    '#suffix' => '</div>',
    '#required' => 'true');
  //text field for get the runner number
  if (arg('0') == 'search-result') {
     
    if (arg('2') != '') {
      $form['search_filter']['runner_number']['#default_value'] = arg('2');
    }

  }
  else {
    $form['search_filter']['runner_number']['#title'] = 'Runner Number';
  }

  //submit get my photo in the runner side
  $form['search_filter']['search'] = array('#type' => 'submit', '#value' => 'Search');

  return $form;

}

function select_event_runner_get_photos_validate($form, &$form_state) {
  $event_selected = $form['search_filter']['events_select_runner']['#value'];
  if ($event_selected == 'None') {
    form_set_error('search_filter][events_select_runner', t('Please select event'));
  }

  $runner_num = $form['search_filter']['runner_number']['#value'];
  if ($runner_num == 'My Number') {
    form_set_error('runner_number', t('Please enter your number'));
  }

}



/**
 * Function for runner photo search submit.
 */
function select_event_runner_get_photos_submit($form, &$form_state) {

  $event_id = $form['search_filter']['events_select_runner']['#value'];
  $runner_number = $form['search_filter']['runner_number']['#value'];

  if (!empty($runner_number)) {
    $form_state['redirect'] = "search-result/" . $event_id . "/" . $runner_number;
  }
  else {
    $form_state['redirect'] = "search-result/" . $event_id;
  }

}

/**
 * Function for buy the images
 * @return
 *   return form values
 */
function select_event_runner_sell_photos($form, &$form_state) {
  //for sell the photos in the runner side
  $form['sellfield'] = array(
      '#type' => 'fieldset',
      '#title' => '',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#attached' => array('css' => array(drupal_get_path('module', 'amazon_s3') . '/amazon_s3.css')),  
  // '#attributes' => array('class'=>'photo-search-fields'),
  );



  $form['sellfield']['events_select_runner'] = array(
    		'#type' => 'select',
      		'#title' => '', 
      		'#id' => 'event_runner_sell');

  $form['sellfield']['events_select_runner']['#options'] = array('select_event' => "Select Event");
  //select event options from content type 'event'

  //get the event name from content type 'event'
  $events = get_events();
  foreach ($events as $event) {
    $event_title = $event->title;
    $event_nid   = $event->nid;
    $form['sellfield']['events_select_runner']['#options'][$event_nid] = $event_title;
  }
  $form['sellfield']['get_started'] = array('#type' => 'submit', '#value' => 'Uploader');


  return $form;
}


/**
 * Function for search the images by runner
 * @return
 *   return rendered drupal form
 */
function find_trade_section() {

  $find_photos = drupal_render(drupal_get_form('select_event_runner_get_photos'));


  global $user;

  if(!$user->uid) {
    $trade_photos = drupal_render(drupal_get_form('user_login'));
  } else
  {
    $trade_photos = drupal_render(drupal_get_form('select_event_runner_sell_photos'));
  }
  $style = "<div id='front-search-photos'>
  				<div>$find_photos</div>
  				<div id='block-photographers'>
    				<div id='trade'>Photographers</div>  
    				<div id='taken_picture'>Sell your photos</div>
    				<div id='front-trade-photos'>
    				$trade_photos
    				</div>
    			</div>	
  			</div>";

    				return $style;
}

/**
 * Function for get started submit button in the home
 *
 */
function select_event_runner_sell_photos_submit($form, &$form_state) {

  global $user;
  $uid = $user->uid;


  if (isset($user->roles['1'])) {
    $form_state['redirect'] = "login";
  }
  else {
    $selected_event_id = $form['sellfield']['events_select_runner']['#value'];
    if ($selected_event_id != 'select_event') {
      $form_state['redirect'] = "photographer/upload/" . $selected_event_id;
    }
    else {
      $form_state['redirect'] = "photographer/upload";
    }
  }
}


function photo_search_mail($key, &$message, $params) {
  watchdog('email', 'Sending email.');
  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    // send confirmation for requests.
    case 'number_request_response':
      print_r('key: number_request_response');
      
      $message['subject'] = t('Confirmation from @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);
      // Note that the message body is an array, not a string.
      $message['body'][] = t('Thank you for your request. We will notify you as soon as we find a photo from @event with bib number @number',
      array(
                                	'@event' => $params['event'], 
                                	'@number' => $params['number'])
      , $options);
      break;
    case 'number_found_notification':
      $message['subject'] = t('Check you photo at @site-name', array('@site-name' => variable_get('site_name', 'Drupal')), $options);

      $message['body'][] = t('It looks like we found your photo from @event. Please follow the link bellow to get it.',
      array('@event' => $params['event'])
      , $options);
       
      $search_url = 'search-results/'. $params['nid'] . '/' . $params['number'];

      $message['body'][] = l(t('Get photo.'), $search_url);
       
      break;
  };
}

/**
 * 
 * Implements hook_cron
 */
function photo_search_cron() {

  // get time of last cron execution
  $expire = variable_get('photo_search_cron_last_run', REQUEST_TIME);
  send_notifications($expire);
  
}

/**
 * 
 * Sends notifications in response to requests for new photos.
 * @param integer $expire - timestamp from which we need to check new photos
 */
function send_notifications($expire) {
  // get all items from requests after last execution
  $requests = PhotoRequest::getRequests(0);
  $counter = 0;
  foreach ($requests as $item) {
    if (product_exists($item->eventid, $item->number, $expire)) {

      // send email to user
      $to =  $item->email;
      $from = 'no-reply@runmemo.com';
      $values = array();
      $values['number'] = $item->number;
      $values['nid'] = $item->eventid;
      drupal_mail('photo_search', 'number_found_notification', $to, language_default(), $values, $from);
      $counter++;
       
      // mark result as complete
      $updated = PhotoRequest::RequestPerformed($item->id);      
      if(!$updated) {
        watchdog('search notifications', 'Did not update request with id =' . $item->id);
      }    
    }
  }
  
  watchdog('search notifications', 'Notifications were sent to ' . $counter . ' emails.');
  return $counter; 
}

/**
 * 
 * Checks whether new photos with specified number were added to the system.
 * @param integer $nid
 * @param integer $number
 */
function product_exists($nid, $number, $expire = 0) {
  
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'product')
      ->propertyCondition('status', 1)
      ->propertyCondition('changed', $expire, '>=')
      ->fieldCondition('field_event_reference', 'nid', $nid, '=')
      ->fieldCondition('ocr_numbers', 'value', $number, '=');

   $count = $query->count()->execute();
   debug('count = ' . $count);      
   return ($count > 0) ? TRUE : FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Form(photo_request_form) to be shown on the search result page if no results were found,
 * asks user for an email address and a number
 * @param array $form
 * @param array $form_state
 * @param string $form_id
 * @return renderable array
 */
function photo_search_form_photo_request_form_alter(&$form, &$form_state, $form_id) {
    if (arg(0) == 'search-result') {
      if (is_numeric(arg(1)) && (arg(1) != '')) {
        $eventid = arg(1);
      }
      if (is_numeric(arg(2)) && (arg(2) != '')) {
        $number = arg(2);
      }
      
        
    }
//  $form['prefix'] = array(
//    '#type' => 'markup', 
//    '#value' => '<div class="photo-request">',      
//  );
  
  $form['message'] = array(
      '#type' => 'markup',
      '#markup' => '<p>Let me know when event photos are ready</p>',
  );
  
  $form['eventid'] = array(
    '#id' => 'eventid',
    '#type' => 'hidden',
    '#value' => $eventid,
  );   
  
  $form['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Email address'),
      '#size' => 30,
      '#maxlength' => 255,
      '#description' => t('Enter your email address'),
  );
  
  $form['number'] = array(
      '#type' => 'textfield',
      '#title' => t('Bib number '),
      '#size' => 30,
      '#maxlength' => 6,
      '#description' => t('Enter your bib number'),
      '#default_value' => $number
  );
  $form['submit'] = array(
      '#type' => 'submit', 
      '#prefix' => '<div id="photo-request-submit-button">',
      '#suffix' => '</div>',
      '#value' => t('Submit'), 
      '#submit' => array('event_registration_form_submit'), 
      '#ajax' => array(
          'callback' => 'photo_request_form_js',
          'wrapper' => 'photo-request-form',
          'effect' => 'fade',
      ),
  );
  
//  $form['suffix'] = array(
//    '#type' => 'markup', 
//    '#value' => '</div>',      
//  );
  return $form;
}

/**
 * Implements validations for photo_request_form
 * @param array $form
 * @param array $form_state 
 */
 function photo_request_form_validate($form, &$form_state) {
  if ($form_state['values']['email'] == '') {
    form_set_error('email', t('Please enter a valid email address'));
  }
  
  $number = $form_state['values']['number'];
  if ($number == '' || !is_numeric($number)) {
    form_set_error('number', t('Please enter a bib number'));
  }

} 

/**
 * AJAX callback for submit button on photo_request_form
 * Adds photo request and sends a confirmation email
 * @param array $form
 * @param array $form_state 
 */
function photo_request_form_js($form, &$form_state) {
  $eventid = $form_state['values']['eventid'];
  $email = $form_state['values']['email'];
  $number = $form_state['values']['number'];
  
  if ($eventid == '' || $email == '' || $number == ''
      || !is_numeric($eventid) || !is_numeric($number)) {
    return $form;
  }

  PhotoRequest::AddRequest($email, $eventid, $number);
  
  $node = node_load($eventid);
  $from = 'no-reply@runmemo.com';
  $values['number'] = $number;
  $values['event'] = $node->title;
  drupal_mail('photo_search', 'number_request_response', $email, language_default(), $values, $from);
  
  $markup = '<div id="photo-request-form" class="message">'
    . '<p>Thank you for your request!</p>'
    . '<p>We will let you know once we get any photos of you via email '
    . $email
    . '</div>';
  
  // post registration message
  return $markup;
  
}


