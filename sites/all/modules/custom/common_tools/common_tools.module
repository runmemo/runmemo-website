<?php

/**
 * @file
 * Common tools for Runmemo.com
 * 
 * This module provides common functions that can be reused in other
 * custom modules.
 */

require_once(DRUPAL_ROOT . '/' . drupal_get_path('module', 'ocr') . '/ocr_product_node_saver.inc');

/**
 * Returns rendered price slider
 * @return rendered array
 */
function get_rendered_slider() {
  $slider =  
    '<div id="price-container" class="price-slider">
      <div>
      	<label for="amount" class="field-label" style="float: left">My price:</label>
      	<span id="amount" style="margin-left: 10px"></span>    
      </div>
      <div id="price"></div> 
    </div>';
  return $slider;
}

/**
 * Returns rendered runners number box
 * @return rendered array
 */
function get_rendered_runner_number_box($nid) {
  
  $productSaver = new ProductNodeSaver($nid);
  $numbers_str = $productSaver->GetNumbersStr(); 
        
  $numbers_box =
    '<label for="product-node-runner-number" class="field-label">' . t('Runner numbers') . ':</label>
    <input name="product-node-runner-number" id="product-node-runner-number" value="'
    . $numbers_str     
    . '"/>';
  
  return $numbers_box;
  
}

/**
 * Gets event title by product node ID
 * @param integer $nid
 * @return string 
 */
function get_event_name_by_product($nid) {
  if (!isset($nid)) {
    return;
  }

  $product = node_load($nid);
  $event_filed = field_get_items('node', $product, 'field_event_reference');
  $eventid = $event_filed[0]['nid'];

  if (!isset($eventid)) {
    return;
  }   
  $event = node_load($eventid);
  return $event->title;

};

/**
 * Gets next product node ID(for the same user on the same event)
 * @param integer $nid
 * @return integer
 */
function get_next_product($nid) {
  if (!isset($nid)) {
    return FALSE;
  }

  $product = node_load($nid);
  $event_filed = field_get_items('node', $product, 'field_event_reference');
  $eventid = $event_filed[0]['nid'];
  if (!isset($eventid)) {
    return FALSE;
  }   

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'product')
        ->propertyCondition('status', 1)
        ->propertyCondition('nid', $nid, '>')
        ->propertyCondition('uid', $product->uid)
        ->propertyOrderBy('nid', 'ASC')          
        ->fieldCondition('field_event_reference', 'nid', $eventid, '=')
        ->range(0, 1);

  $results = $query->execute(); 
  
  if (isset($results['node'])) {
    $nodeid = array_keys($results['node']);
    return $nodeid[0];
  }
  else {
    return FALSE;
  }
};

/**
 * Gets previos product node ID(for the same user on the same event)
 * @param integer $nid
 * @return integer
 */
function get_prev_product($nid) {
  if (!isset($nid)) {
    return FALSE;
  }

  $product = node_load($nid);
  $event_filed = field_get_items('node', $product, 'field_event_reference');
  $eventid = $event_filed[0]['nid'];
  if (!isset($eventid)) {
    return FALSE;
  }   

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'product')
        ->propertyCondition('status', 1)
        ->propertyCondition('nid', $nid, '<')
        ->propertyCondition('uid', $product->uid)
        ->propertyOrderBy('nid', 'DESC')          
        ->fieldCondition('field_event_reference', 'nid', $eventid, '=')
        ->range(0, 1);

  $results = $query->execute(); 
  
  if (isset($results['node'])) {
    $nodeid = array_keys($results['node']);
    return $nodeid[0];
  }
  else {
    return FALSE;
  }
};

function get_product_link($nid, $switch) {
  switch ($switch) {
    case 'PREV':
      $productid = get_prev_product($nid);
      if (!$productid) {
        return;
      }
      return '<a href="/node/' . (string)$productid . '" title="Previous">'. t('<< prev') . '</a>';
      break;
    case 'NEXT':
      $productid = get_next_product($nid);
      if (!$productid) {
        return;
      }
      return '<a href="/node/' . (string)$productid . '" title="Next">' . t('next >>') . '</a>';
      break;
    default :
      
  }
}

/**
 * Gets photo URL by product node ID
 * @param integer $nid
 * @return string 
 */
function get_photo_url($nid) {
  if (!isset($nid)) {
    return FALSE;
  }
  $product = node_load($nid);
  $image_field = field_get_items('node', $product, 'uc_product_image');
  $img_uri = $image_field[0]['uri'];
  if (!isset($img_uri)) {
    return FALSE;
  }     
  $img_url = file_create_url($img_uri);
  return $img_url;
  
}

/**
 * Returns true if the visitor from Russia
 * @return boolean
 */
function is_russia() {
  $ip = ip_address();
  $country_code = ip2country_get_country($ip);
  if ($country_code == "RU") {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
/**
 * 
 * Prints object/array as a table with layered structure.
 * @param object $elem item to print
 * @param integer $max_level number of layers to print
 * @param array $print_nice_stack
 */
function print_nice($elem, $max_level=10, $print_nice_stack = array()) {
  if (is_array($elem) || is_object($elem)) {
    if (in_array(&$elem,$print_nice_stack,true)) {
      echo "<font color=red>RECURSION</font>";
      return;
    }
    $print_nice_stack[]=&$elem;
    if ($max_level<1) {
      echo "<font color=red>riched max level</font>";
      return;
    }
    $max_level--;
    echo "<table border=1 cellspacing=0 cellpadding=3 width=100%>";
    if (is_array($elem)) {
      echo '<tr><td colspan=2 style="background-color:#333333;"><strong><font color=white>ARRAY</font></strong></td></tr>';
    } 
    else {
      echo '<tr><td colspan=2 style="background-color:#333333;"><strong>';
      echo '<font color=white>OBJECT Type: '.get_class($elem).'</font></strong></td></tr>';
    }
    $color=0;
    foreach ($elem as $k => $v) {
      if ($max_level%2) {
        $rgb=($color++%2)?"#888888":"#BBBBBB";
      } else {
        $rgb=($color++%2)?"#8888BB":"#BBBBFF";
      }
      echo '<tr><td valign="top" style="width:40px;background-color:'.$rgb.';">';
      echo '<strong>'.$k."</strong></td><td>";
      print_nice($v,$max_level,$print_nice_stack);
      echo "</td></tr>";
    }
    echo "</table>";
    return;
  }
  if ($elem === null) {
    echo "<font color=green>NULL</font>";
  } elseif ($elem === 0) {
    echo "0";
  } elseif ($elem === true) {
    echo "<font color=green>TRUE</font>";
  } elseif ($elem === false) {
    echo "<font color=green>FALSE</font>";
  } elseif ($elem === "") {
    echo "<font color=green>EMPTY STRING</font>";
  } else {
    echo str_replace("\n","<strong><font color=red>*</font></strong><br>\n",$elem);
  } 
} 