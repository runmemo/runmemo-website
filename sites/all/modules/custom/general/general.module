<?php
/**
 * Init function for adding the external file
 */

function general_init(){
    //to add the js file
    drupal_add_js(drupal_get_path("module","general")."/js/general.js");
    drupal_add_css(drupal_get_path('module', 'general') . '/general.css');
	
}

/**  
 * Create the hook menu for each page 
 * by using this we can map to the related page
 * @return
 * return menu items
 */
function general_menu() {
    
  $items['feedback'] = array(
    'title' => 'Feedback',
    'description' => t('Feedback form.'),
    'page callback' => 'custom_feedback_form',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
	$items['custom-node-delete'] = array(
		'title' => 'node delete',
		'description' => t('node delete.'),
		'page callback' => 'custom_node_delete_page',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
	);

	$items['test-cron'] = array(
		'title' => 'node delete',
		'description' => t('node delete.'),
		'page callback' => 'testing',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK
	);



    return $items;

}


/**
 * Form alter function
 * by using this form_alter function we can alter the form without editing core module
 * @param $form,$form_state,$form_id
 * $form give the form value
 * $form_id is the form id
 */
function general_form_alter(&$form, $form_state, $form_id){
   
    //echo '<pre>';
    //print_r($form['panes']['payment']['details']['cc_exp_month']['#title']);
    //exit;
    
    if($form['#form_id'] == 'uc_cart_checkout_form') {
      $form['panes']['payment']['payment_method'] = '';
      $form['panes']['payment']['details']['cc_policy']['#markup'] = '';
      $form['panes']['payment']['details']['cc_number']['#size'] = '32';
      $form['panes']['payment']['details']['cc_exp_month']['#title'] = 'Expiration Month';
      $form['actions']['continue']['#value'] = '';
    }
  
    if($form['#form_id'] == 'feedback_form'){
        $form['close'] = array('#markup' => '<div id="fb_close"><span id="feedback_title">Feedback</span><a id="fb_close_link" style="cursor:pointer">&nbsp;</a></div>','#weight'=> '-5');
        $form['help']['#weight'] = '-1'; 
		$form['url_hidden'] = array('#type' => 'textfield', '#default_value' => '');
        $form['#validate'][] = 'feedback_form_validate';
		$form['#submit'] = array('custom_feedback_submit'); 
		
    }
    
     if($form['#form_id']=='user_login'){
        $form['actions']['submit']['#value'] = 'Login';
        $form['#validate'][] = 'cookie_check_validate';
    }
    //registration page
    if($form['#form_id']=='user_register_form'){

        $base_path=base_path().'sites/default/help_icon.gif';
        $form['photo_paypal_icon']=array('#markup'=>"<p><span title='Your Paypal account ID' id='paypal_icon' style='float:right;padding-right:102px;padding-top:18px;color:red;'><img src='$base_path'></img></span></p>",'#weight'=>'5');
        //add the form submit function for insert the user role in the user table
        $form['#submit']['']= 'user_role_insertion'; 


    }
    //profile edit page
    if($form['#form_id']=='user_profile_form'){
        global $user;
        $uid=$user->uid;
        $base_path=base_path().'sites/default/help_icon.gif';
        $form['photo_paypal_icon']=array('#markup'=>"<p><span title='Your Paypal account ID' id='paypal_icon' style='float:right;padding-right:102px;padding-top:18px;color:red;'><img src='$base_path'></img></span></p>",'#weight'=>'5');
        $form['field_term'] = '';

    }
}

/**
 *Function for insert the user role in the users table when submit the create account submit button
 * @param $form
 * $form gives form values from the user registration page
 */
function user_role_insertion($form,&$from_state){
	
    //call class function
    $photographer=new photographer_model();
    $user_role=$photographer->get_role_id();
    $role_id=$user_role->rid;

    $uid=$form['#user']->uid;

    //call the class function for update the user role in the user table
    $photographer->user_role_update($role_id,$uid);

    //call the class function for insert the user role in the user roles table
    $photographer->user_role_id_insert($role_id,$uid);

}

/**
 * Form validation
 * @param type $form
 * @param type $form_state 
 */
function feedback_form_validate($form, &$form_state) {
  
  $email = $form['field_email']['und']['0']['value']['#value'];

  if(!(eregi("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$", $email)) && ($email != '')) {
   
    form_set_error('field_email', t('Invalid Email Address'));
    
  }
      
}
 /**
 * Validate callback for user login form submission.
 *
 * If the cookie set previously is not present, redirect.
 */
function cookie_check_validate($form, &$form_state) {
  if (!$_COOKIE) {
    $domain = ini_get('session.cookie_domain') ? ini_get('session.cookie_domain') : $_SERVER['HTTP_HOST'];
    form_set_error('', t('It seems your browser does not accept cookies. To log into this site, you need to accept cookies from the domain @domain.', array('@domain' => $domain)));
  }
}


 /**
 * Custom feedback form.
 *
 * For setting up the overlay.
 */
function custom_feedback_form() {
  
  
  return '<div id="block-feedback-form">
			  <h2><span class="feedback-link">' .$title .'</span></h2>
			  <div class="content">' . drupal_render(drupal_get_form('feedback_form')) . '</div></div>';
			
  
}

/**
* Implements hook_admin_paths().
*/
function general_admin_paths_alter(&$paths) {
  $paths['feedback'] = TRUE;
  $paths['feedback/*'] = TRUE;
  $paths['node/*'] = FALSE;
  $paths['node/add'] = FALSE;
  $paths['node/add/*'] = FALSE;
  $paths['user'] = FALSE;
  $paths['user/*/edit'] = FALSE;
}


/**
 * Form validation
 * @param type $form
 * @param type $form_state 
 */
function custom_feedback_submit($form, &$form_state) {
  global $user;
  $values = $form_state['values'];
  $links = explode("#", $values['url_hidden']);
  
  $entry = new stdClass();
  entity_form_submit_build_entity('feedback', $entry, $form, $form_state);
  $entry->message = $form_state['values']['message'];
  $entry->location = $links[0];
  feedback_save($entry);
  $entry->location_masked  = $links[0];
  $entry->url = $links[0];
  
  feedback_save($entry);
  drupal_set_message(t('Thanks for your feedback!'));
  
}

/**
* custom delete function for node delete.
**/
function custom_node_delete_page() {

	$query = db_select('node', 'n');
	$query->condition('n.type', 'product');
	$query->addField('n', 'nid');
	$results = $query->execute();
	$i = 0;
	foreach($results as $result) {
		node_delete($result->nid);
		$i++;
	}
	return "node deleted sucessfully $i .";
}




/**
 *Function for getting images from local and pushing to s3
 * 
 * 
 */
function general_cron() {


   
   $photographer = new photographer_model();
   $photos_url = $photographer->get_local_photos();
   
   $s3 = amazon_s3_get_instance();
   $bucket= variable_get('amazons3_bucket', '');
   $acl = 'public-read-write';
   
   $path=drupal_realpath('public://');
   
    

    foreach ($photos_url as $photo_url) { 
		
		
	    $thumb_success = $orig_success = $preview_success = "";

	    $thumbnail_local_path = $path.'/styles/thumbnail/public/'.$photo_url->filename;
			$thumb_local_path='public://styles/thumbnail/public/'.$photo_url->filename;
			$thumb_desc_path='styles/thumbnail/s3/'.$photo_url->filename;
		
			$preview_local_path=$path.'/styles/preview-with-watermark/public/'.$photo_url->filename;
			$prev_local_path='public://styles/preview-with-watermark/public/'.$photo_url->filename;
	    $prev_desc_path='styles/preview-with-watermark/s3/'.$photo_url->filename;
		
		/////////////////////////////Pushing the files///////////////////////////////////////////
		$orig_file_path = $photo_url->uri;
		
		if (file_exists($photo_url->uri)) {
			$orig_success = $s3->putObjectFile($photo_url->uri, $bucket, $photo_url->filename, $acl);
		}
		
		if(file_exists($thumbnail_local_path)) {
			$thumb_success = $s3->putObjectFile($thumb_local_path, $bucket, $thumb_desc_path, $acl);
		}
		
		if(file_exists($preview_local_path)) {
			$preview_success = $s3->putObjectFile($prev_local_path, $bucket, $prev_desc_path, $acl);
		}
		
		if($orig_success && $thumb_success && $preview_success) {
			$photographer->update_s3_status($photo_url->entity_id);
			$url = str_replace("public://","s3://",$photo_url->uri);

			$photographer->update_url($photo_url->fid,$url);
			
			file_unmanaged_delete($orig_file_path);
			file_unmanaged_delete($thumb_local_path);
			file_unmanaged_delete($prev_local_path);
		}  
	}
  drupal_flush_all_caches();
}
	
function testing() {


   $photographer = new photographer_model();
   $photos_url = $photographer->get_local_photos();
   $s3 = amazon_s3_get_instance();
   $bucket= variable_get('amazons3_bucket', '');
   $acl = 'public-read-write';
   $path=drupal_realpath('public://');
	 $st = 0;
    foreach ($photos_url as $photo_url) { 
		
		
	
	    	$thumbnail_local_path = $path.'/styles/thumbnail/public/'.$photo_url->filename;
				$thumb_local_path='public://styles/thumbnail/public/'.$photo_url->filename;
				$thumb_desc_path='styles/thumbnail/s3/'.$photo_url->filename;
		
				$preview_local_path=$path.'/styles/preview-with-watermark/public/'.$photo_url->filename;
				$prev_local_path='public://styles/preview-with-watermark/public/'.$photo_url->filename;
	    	$prev_desc_path='styles/preview-with-watermark/s3/'.$photo_url->filename;
		
		/////////////////////////////Pushing the files///////////////////////////////////////////
		$orig_file_path = $photo_url->uri;
		
		if (file_exists($photo_url->uri)) {
			$orig_success = $s3->putObjectFile($photo_url->uri, $bucket, $photo_url->filename, $acl);
		}
		
		if(file_exists($thumbnail_local_path)) {
			$thumb_success = $s3->putObjectFile($thumb_local_path, $bucket, $thumb_desc_path, $acl);
		}
		
		if(file_exists($preview_local_path)) {
			$preview_success = $s3->putObjectFile($prev_local_path, $bucket, $prev_desc_path, $acl);
		}
		
		if($orig_success && $thumb_success && $preview_success) {




			$photographer->update_s3_status($photo_url->entity_id);
			$url = str_replace("public://","s3://",$photo_url->uri);

			

			$photographer->update_url($photo_url->fid,$url);
			
			file_unmanaged_delete($orig_file_path);
			file_unmanaged_delete($thumb_local_path);
			file_unmanaged_delete($prev_local_path);

                     $st++;


		} 


	}
		return $st;

         
   
}




