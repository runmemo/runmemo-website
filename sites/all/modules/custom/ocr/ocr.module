<?php

/**
 * @file
 * Module file for OCR Integration
 *
 * This module provides integration with OCR workers via SQS queues.
 */

require_once libraries_get_path('Amazon') . '/SQS/Client.php';
module_load_include('inc', 'ocr', 'ocr');

/**
 * Implements hook_help()
 */
function ocr_help($path, $arg) {
  if ($path == 'admin/help#ocr') {
    return t('OCR integration module.');
  }
}

/**
 * Implements hook_menu().
 */
function ocr_menu() {
  $items['sendmessage'] = array(
      'title'           =>  'Send Message to OCR',
      'description'     =>  'Send Message to OCR',
      'page callback' => t('send_message'),
      'access arguments' => array(t('access administration pages')),
  );
  $items['receivemessage'] = array(
      'title'           => 'Receive Message from OCR',
      'description'     => 'Receive Message from OCR',
      'page callback' => 'receive_message',
      'access arguments' => array('access administration pages'),
  );
  $items['admin/config/media/ocrqueue'] = array(
      'title'           => 'Queues for OCR',
      'description'     => 'Setting queues for OCR',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('select_ocrqueue'),
      'access arguments' => array('access administration pages'),
  );
  return $items;
}

/**
 *Configuration settings for amazon

 function amazonsqs_service() {

 $aws_access_key = variable_get('aws_access_key', '');
 $aws_secret_key = variable_get('aws_secret_key', '');
 $service = new Amazon_SQS_Client($aws_access_key, $aws_secret_key);
 return $service;
 }
 */

/*
 * Retrieves one or more messages from the specified queue.  For each message returned, the response includes the message body; MD5 digest of the message body; receipt handle, which is the identifier you must provide when deleting the message; and message ID of each message. Messages returned by this action stay in the queue until you delete them. However, once a message is returned to a ReceiveMessage request, it is not returned on subsequent ReceiveMessage requests for the duration of the VisibilityTimeout. If you do not specify a VisibilityTimeout in the request, the overall visibility timeout for the queue is used for the returned messages.
 *
 */


/**
 * Setting OCR queue to use
 */
function select_ocrqueue() {
  $form['requestqueue'] = array('#type' => 'textfield',
      '#title' => 'Message Request Queue',
      '#size' => '20',
      '#required' => 'true',
      '#default_value' => variable_get('ocr-requests-queue', '')
  );
  $form['resultsqueue']  = array('#type' => 'textfield',
      '#title' => 'Message Results Queue',
      '#size' => '20',
      '#required' => 'true',
      '#default_value' => variable_get('ocr-results-queue', '')
  );

  $form['submit'] = array('#type' => 'submit',
      '#title' => 'Submit',
      '#value' => 'Submit'
      );
      return $form;

}
/**
 * Submit function for  select_ocrqueue()
 */
function select_ocrqueue_submit($form, &$form_state) {
  drupal_set_message(t('Message Queues set Successfully'));
  $SqsQueue  = $form_state['values']['requestqueue'];
  $results_queue = $form_state['values']['resultsqueue'];
  variable_set('ocr-requests-queue', $SqsQueue);
  variable_set('ocr-results-queue', $results_queue);
}

/**
 *
 * Sends message to the requests queue with details specified in $file object.
 * @param object $file - contains details of the image file.
 * @param iRequestQueue $queue
 */
function _ocr_send_request($file, SqsQueueInterface $queue = NULL) {
  // sending message to OCR for an uploaded image
  if (is_null($queue)) {
    $requestsQueueURL  = variable_get('ocr_requests_queue_url');
    $queue = new SqsQueue($requestsQueueURL);
  } 
  
  $resultsQueueURL = variable_get('ocr_results_queue_url');
  $bucket = variable_get('image-store-bucket');


  //create message
  $message_arr = array(
    'ExternalReference' => $file->nid,
    'ImageKey' => $file->filename,
    'ImageBucket' => $bucket,
    'OutQueue' => 'http://eu-west-1.queue.amazonaws.com/' . variable_get('ocr-results-queue'), // $resultsQueueURL,
  );
  $message = json_encode($message_arr);

  // send message to the OCR Queue
  $queue->sendMessage($message);
}

/**
 * 
 * Adds nodes pending OCR to the queue.
 */
function _queue_nodes_pending_ocr(SqsQueueInterface $queue = NULL, $dummy = FALSE) {
  
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node', '=')
  ->entityCondition('bundle', 'product')
  ->propertyCondition('status', 1, '=');
  //->fieldCondition('ocr_success','value', array(1,0), 'NOT IN');
   
  $result = $query->execute();
  if (!$result['node'] || empty($result)) {
    return 0;
  }
  foreach ($result['node'] as $nid => $v) {
    $node = node_load($nid);
    // because fieldCondition does not allow to check for NULL values
    // we have to check whether field is null this way
    if (!isset($node->ocr_success[LANGUAGE_NONE]) || is_null($node->ocr_success[LANGUAGE_NONE][0]['value'])) {
     
      $image_field = field_get_items('node', $node, 'uc_product_image', LANGUAGE_NONE);
      if (!$image_field) {
        watchdog('OCR Info', 'Product node does not have an image, nid =' . $node->nid . '.', array(), WATCHDOG_NOTICE);
        return 0;
      }
      
      // Make $file object with nid
      $file = $image_field[0];
      $file['nid'] = $nid;
      $file_obj = (object) $file;
    
      if (strpos($file['uri'], 's3://') !== 0) {
        // file is not in s3 so need to send it there
        _send_file_to_s3($file_obj, $dummy);
      }   
      _ocr_send_request($file_obj, $queue);  
    }
  }
}

/**
 * Implements hook_cron()
 *
 */
function ocr_cron() {
  $queueURL= variable_get('ocr_results_queue_url');
  $queue = new SqsQueue($queueURL);
  $message_counter = 0;
  while ($message = $queue->getMessage()) {
    $message_counter++;
    try {
      $message_body = $message->getBody();
      $results_saver = new OcrResultsSaver($message_body);
      $results_saver->Save();
    } catch (Exception $e) {
      watchdog_exception('OCR Exception', $e);
    }
    $queue->deleteMessage($message);
  }
  // put files that were not processed to the S3 queue ?
  // _queue_nodes_pending_ocr();
}