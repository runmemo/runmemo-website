<?php

/*Hooks*/

/**
 * Implementation of hook_init()
 */
function amazon_s3_init() {
  drupal_add_css(drupal_get_path('module', 'amazon_s3') . '/amazon_s3.css');

  drupal_add_js(drupal_get_path("module","runmemo")."/runmemo.js");

  drupal_add_js(drupal_get_path("module","amazon_s3")."/progress_bar.js");

}

/**
 * Implementation of hook_menu()
 */
function amazon_s3_menu() {
  
  $items['admin/config/amazon-s3'] = array(
    'title' => 'Amazon S3 Configuration',
    'description' => t('Authentication settings for Amazon S3'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_s3_config_form'),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/structure/amazon-s3'] = array(
    'title' => 'Amazon S3 Buckets',
    'description' => t('View the buckets on your Amazon S3 account.'),
    'page callback' => 'amazon_s3_view_buckets',
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/structure/amazon-s3/bucket/%'] = array(
    'title' => 'Bucket Contents',
    'description' => t('View the objects in a bucket on your Amazon S3 account.'),
    'page callback' => 'amazon_s3_view_objects',
    'page arguments' => array(4),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/structure/amazon-s3/bucket/%/delete'] = array(
    'title' => 'Delete Bucket',
    'description' => t('Delete a bucket.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_s3_bucket_delete_confirm_form', 4),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_CALLBACK, 
  );
  
  $items['admin/structure/amazon-s3/bucket/%/%/delete'] = array(
    'title' => 'Delete Object in Bucket',
    'description' => t('Delete an object in a bucket.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_s3_object_delete_confirm_form', 4, 5),
    'access arguments' => array('administer amazon s3'),
    'type' => MENU_CALLBACK,
  );


/*

  //by resource 2 for photographer uploading image
  $items['admin/structure/amazon-s3/bucket/photographer'] = array(
    'title' => 'Upload Your Photos By Selecting Event Name',
    'description' => t('View the objects in a bucket on your Amazon S3 account.'),
    'page callback' => 'amazon_s3_view_objects_photographer',
    'page arguments' => array(4),
    'access arguments' => array('access_photographer'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/amazon-s3/bucket/%'] = array(
    'title' => 'Upload Your Photos By Selecting Event Name',
    'description' => t('View the objects in a bucket on your Amazon S3 account.'),
    'page callback' => 'amazon_s3_view_objects',
    'page arguments' => array(4),
    'access arguments' => array('access_photographer'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/amazon-s3/bucket/%/%/delete'] = array(
    'title' => 'Delete Object in Bucket',
    'description' => t('Delete an object in a bucket.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_s3_object_delete_confirm_form', 4, 5),
    'access arguments' => array('access_photographer'),
    'type' => MENU_CALLBACK,
  );



  //by resource 2 for runner
  $items['runner'] = array(
    'title' => 'Photo Gallery',
    'description' => t('View the objects in a event on your Amazon S3 account.'),
    'page callback' => 'amozon_s3_show_images',
    'page arguments' => array(1),
    'access arguments' => array('access_runner'),
    'type' => MENU_CALLBACK,
  );

*/
  
  return $items;
}

/**
 * Implementation of hook_perm()
 */
function amazon_s3_permission() {

  return array(

    'administer amazon s3' => array(
      'title' => t('Administer Amazon S3'),
      'description' => t('Configuration for Amazon S3.'),
      'restrict access' => TRUE,
    ),

/*
    'access_photographer' => array(
      'title' => t('Access photographer'),
      'description' => t('Access photographer'),
      'restrict access' => TRUE,
    ),


    'access_runner' => array(
      'title' => t('Access runner'),
      'description' => t('Access runner'),
      'restrict access' => TRUE,
    ),
*/
   


  );
}

/**
 * Amazon S3 API Functions
 */

/**
 * Get the instance of the s3 object.
 *
 * @return S3
 */
function amazon_s3_get_instance() {
  static $s3 = NULL;
  if ($s3 == NULL) {
    module_load_include('inc', 'amazon_s3', 's3');
    $aws_access_key = variable_get('aws_access_key', '');
    $aws_secret_key = variable_get('aws_secret_key', '');
    
    if (empty($aws_access_key) OR empty($aws_secret_key)) {
      drupal_set_message('You must ' . l('set your aws access key and secret key', 'admin/config/amazon-s3') . '.', 'error');
    }
    
    $s3 = new S3($aws_access_key, $aws_secret_key);
  }

  

  return $s3;
}

function amazon_s3_get_buckets() {
  $s3 = amazon_s3_get_instance();
  return $s3->listBuckets();
}

function amazon_s3_bucket_create($bucket_name, $access_control = 'private') {
  $s3 = amazon_s3_get_instance();

  return $s3->putBucket($bucket_name, $access_control);
}

function amazon_s3_bucket_delete($bucket) {
  $s3 = amazon_s3_get_instance();
  return $s3->deleteBucket($bucket);
}

function amazon_s3_get_object_url($bucket, $object, $lifetime_in_seconds = 7200) {
  $s3 = amazon_s3_get_instance();
  return $s3->getAuthenticatedURL($bucket, $object, $lifetime_in_seconds);
}

function amazon_s3_object_delete($bucket, $object) {
  $s3 = amazon_s3_get_instance();
  return $s3->deleteObject($bucket, $object);
}

/* by resource 2
function amazon_s3_acl_options() {
  return array(
    'private' => 'Private',
    'public-read' => 'Public Read',
    'public-read-write' => 'Public Read/Write',
    'authenticated-read' => 'Authenticated Read'
  );
}
*/

/**
 * Forms
 */

function amazon_s3_bucket_create_form() {
  $form['bucket'] = array(
    '#type' => 'textfield',
    '#title' => t('Event Name'),
    '#required' => TRUE,
    '#size' => 30,
  );
/*
  $form['access_control'] = array(
    '#type' => 'select',
    '#title' => t('Access Control'),
    '#options' => amazon_s3_acl_options(),
  );
*/
  $form['create'] = array('#type' => 'submit', '#value' => 'Create Bucket');
  return $form;
}

function amazon_s3_bucket_create_form_submit($form, &$form_state) {
 
  $s3 = amazon_s3_get_instance();

  $bucket_name = $form_state['values']['bucket'];

  $access_control = 'public-read';//$form_state['values']['access_control'];

  $bucket_creation_response=amazon_s3_bucket_create($bucket_name, $access_control);

  //by resource 2 to insert the event name in the table event
  if($bucket_creation_response=='false')
  {
	drupal_set_message('Bucket already exists','error');//added by resource 2
  }

  return $bucket_creation_response;


}

function amazon_s3_bucket_delete_confirm_form($form, &$form_state, $bucket) {
  $form = array(
    'bucket' => array('#type' => 'value', '#value' => $bucket),
  );
  $confirmation_message = t('Are you sure you want to delete the bucket %bucket?', array('%bucket' => $bucket));
  $cancel_path = 'admin/structure/amazon-s3/buckets';
  return confirm_form($form, $confirmation_message, $cancel_path);
}

function amazon_s3_bucket_delete_confirm_form_submit($form, &$form_state) {
  $bucket = $form_state['values']['bucket'];
  
  $success = amazon_s3_bucket_delete($bucket);
  
  if ($success) {
    $message = t('Successfully deleted the bucket %bucket.', array('%bucket' => $bucket));
    drupal_set_message($message);
  } else {
    $message = t('Failed to delete the bucket %bucket.', array('%bucket' => $bucket));
    drupal_set_message($message, 'error');
  }
  
  $form_state['redirect'] = "admin/structure/amazon-s3/buckets";
}

function amazon_s3_object_delete_confirm_form($form, &$form_state, $bucket, $object) {
  $form = array(
    'bucket' => array('#type' => 'value', '#value' => $bucket),
    'object' => array('#type' => 'value', '#value' => $object),
  );
  $confirmation_message = t("Are you sure you want to delete the object %object from the bucket %bucket?", array('%object' => $object, '%bucket' => $bucket));
  $cancel_path = "admin/structure/amazon-s3/bucket/$bucket";
  $form = confirm_form($form, $confirmation_message, $cancel_path);
  return $form;
}

function amazon_s3_object_delete_confirm_form_submit($form, &$form_state) {
  $bucket = $form_state['values']['bucket'];
  $object = $form_state['values']['object'];
  
  $success = amazon_s3_object_delete($bucket, $object);
  
  if ($success) {
    $message = t('Successfully deleted the object %object from the bucket %bucket', array('%object' => $object, '%bucket' => $bucket));
    drupal_set_message($message);
  } else {
    $message = t('Failed to delete the object %object from the bucket %bucket', array('%object' => $object, '%bucket' => $bucket));
    drupal_set_message($message, 'error');
  }
  
  $form_state['redirect'] = "admin/structure/amazon-s3/bucket/$bucket";
}

function amazon_s3_file_upload_form($form, &$form_state, $bucket) {
  $form = array();
  $form['#attributes'] = array('enctype' => 'multipart/form-data');


	$form['events_select']=array('#type'=>'select','#title'=>'Select Event','#attributes'=>array('onchange'=>'return select_event();'),'#id'=>'event');

	$form['events_select']['#options']=array('photographer'=>"Select Event");
	$event_name=amazon_s3_get_buckets();
	foreach($event_name as $event_name_value)
	{
		$event_title=$event_name_value;
		$form['events_select']['#options'][$event_title]=$event_title;
	}

	$form['events_select']['#default_value']=$form['events_select']['#options'][$bucket];


  $form['box'] = array(
    '#type' => 'fieldset',
    '#title' => t('Upload File'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['box']['file'] = array(
    '#type' => 'file',
    '#title' => t('File to upload'),
    '#description' => t('Pick a file to upload to the event %bucket.', array('%bucket' => $bucket)),
    '#size' => 40,
  );
/*
  $form['box']['acl'] = array(
    '#type' => 'select',
    '#title' => t('Access Control'),
    '#options' => amazon_s3_acl_options(),
  );
*/
  $form['box']['bucket'] = array('#type' => 'value', '#value' => $bucket);
  $form['box']['upload'] = array('#type' => 'submit', '#value' => 'Upload');
  return $form;
}

function amazon_s3_file_upload_form_submit($form, &$form_state) {
//resource 2
  global $user;

  $uid=$user->uid;

  $s3 = amazon_s3_get_instance();

  //for loop for count the uploaded files resource 2
  for($i=0;$i<count($form['box']['file']['#value']);$i++)
  {
	  $bucket = $form_state['values']['bucket'];
	  $upload_temp_filepath = $form['box']['file']['#value'][$i]['tmppath'];//$upload_temp_filepath = $_FILES['files']['tmp_name']['file'];
	  $object_filename = $form['box']['file']['#value'][$i]['name']; 	//$object_filename = $_FILES['files']['name']['file'];

	 // $object_filename = $uid.'::'.$object_filename_original;

	  $acl = 'public-read';//$form_state['values']['acl'];


	  $success = $s3->putObjectFile($upload_temp_filepath, $bucket, $object_filename, $acl);
	  
	  if ($success) {

/*
		////////////////////////////////////////////////////////////////////////////
	
		//explode the temprory file with
		$temp_file_path=explode('//',$upload_temp_filepath);
		$temp_file_extension=$temp_file_path['1'];	


		//explode the temprory file name
		$temp_file_name=explode('.',$temp_file_extension);

		//expload the original file name
		$original_file_name=explode('.',$object_filename);


		//saved file name in the files folder
		
		$saved_file_name=$temp_file_name[0].'.'.$original_file_name[1];

		$old = '/tmp/'.$temp_file_extension;

		
		$new = '/var/www/runmemo_test/sites/default/files/styles/thumbnail/public/'.$saved_file_name;
		copy($old, $new);

		
	
	//node 

		$node = new stdClass(); // We create a new node object
		$node->type = "product"; // Or any other content type you want
		$node->title = $object_filename;
		$node->language = LANGUAGE_NONE; // Or any language code if Locale module is enabled. More on this below *
		$node->uid = $uid; // Or any id you wish
		node_object_prepare($node); // Set some default values.

		$node->body[$node->language][0]['value'] = 'This is a body text';
		$node->body[$node->language][0]['summary'] = 'Here goes a summary';
		$node->body[$node->language][0]['format'] = 'filtered_html'; 


		$node->sell_price ='75.0000';

		

		$filepath = drupal_realpath($new);
		  $file = (object) array(
		    'uid' => 1,
		    'uri' => $filepath,
		    'filemime' => file_get_mimetype($filepath),
		    'status' => 1,
		  );
		  $file = file_copy($file, 'public://');
		  $node->field_product_image[$node->language][0] = (array)$file;

		$node = node_submit($node); // Prepare node for a submit
		node_save($node);


*/
		/////////////////////////////////////////////////////////////////////////////



	    $message = t('Succesfully uploaded the file %filename to the bucket %bucket.', array('%filename' => $object_filename, '%bucket' => $bucket));
	    drupal_set_message($message);
	  } else {
	    $message = t('Failed to upload the file %filename to the bucket %bucket.', array('%filename' => $object_filename, '%bucket' => $bucket));
	    drupal_set_message($message, 'error');
	  }
	  
  }
  $form_state['redirect'] = "admin/structure/amazon-s3/bucket/$bucket";
}


//for upload the extract the zip file by reource 2
function amazon_s3_file_upload_form1($form, &$form_state, $bucket) {
  $form = array();
  $form['#attributes'] = array('enctype' => 'multipart/form-data');
  $form['box1'] = array(
    '#type' => 'fieldset',
    '#title' => t('Upload Zip File'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#attached'=>array('css' => array(drupal_get_path('module', 'amazon_s3') . '/amazon_s3.css')),
  );
  $form['box1']['file1'] = array(
    '#type' => 'file',
    '#title' => t('File to upload'),
    '#description' => t('Pick a zip file to upload to the event %bucket.', array('%bucket' => $bucket)),
    '#size' => 40,
  );
/*
  $form['box1']['acl1'] = array(
    '#type' => 'select',
    '#title' => t('Access Control'),
    '#options' => amazon_s3_acl_options(),
  ); 
*/
  $form['box1']['bucket1'] = array('#type' => 'value', '#value' => $bucket);
  $form['box1']['upload1'] = array('#type' => 'submit', '#value' => 'Upload','#attributes'=>array('onclick'=>"return CallJS('Demo()')"));
  $form['box1']['progress']=array('#markup'=>"<div id='progress' style='display:none;'></div>");
  return $form;
}
//submit function for zip file upload and extraction by resource 2
function amazon_s3_file_upload_form1_submit($form, &$form_state) {


	
	$s3 = amazon_s3_get_instance();
	$filename = $_FILES["files"]["name"]["file1"];
	$source = $_FILES["files"]["tmp_name"]["file1"];


	$type = $_FILES["files"]["type"]["file1"];
 	
	$acl='public-read';//$form['box1']['acl1']['#value'];
	$bucket=$form_state['build_info']['args']['0'];


	$name = explode(".", $filename);
	$accepted_types = array('application/zip', 'application/x-zip-compressed', 'multipart/x-zip', 'application/x-compressed');
	foreach($accepted_types as $mime_type) {
		if($mime_type == $type) {
			$okay = true;
			break;
		} 
	}
 	
	
	
	$continue = strtolower($name[1]) == 'zip' ? true : false;
	if(!$continue) {
		$message = "The file you are trying to upload is not a .zip file. Please try again.";
		drupal_set_message($message,'error');
	}
 
	if($continue)
	{

		$base_path=$_SERVER['DOCUMENT_ROOT'].base_path()."sites/default/files";

		$target_path = "$base_path/".$filename;  
		if(move_uploaded_file($source, $target_path)) 
		{

			$zip = new ZipArchive();
			$x = $zip->open($target_path);
			if ($x === true)
			{
				$folder=$base_path.'/'.$name[0];
				$zip->extractTo("$folder"); 
			
			
				chmod("$base_path/".$name[0],0777);
			
				$file_exist= "$base_path/".$name[0].'/'.$name[0];
				
				
				if (file_exists($file_exist)) 
				{

					if ($handle = opendir("$base_path/".$name[0].'/'.$name[0])) 
					{
					 	//This is the correct way to loop over the directory. 
						while (false !== ($file = readdir($handle)))
						{
							$name_path=explode('.',$file);

							if(($name_path[1]=='jpg') || ($name_path[1]=='jpeg') )
							{
								if($name_path[0]!='')
								{
									rename("$base_path/$name[0]/$name[0]/$file", "$base_path/$name[0]/$name[0]/$name_path[0].jpeg");
								}
								$file_path1="$base_path/$name[0]/$name[0]/$name_path[0].jpeg";

								if(($file_path1!="$base_path/$name[0]/$name[0]/..jpeg") && ($file_path1!="$base_path/$name[0]/$name[0]/.jpeg") && ($file_path1!=''))
				                                {
									$s3->putObjectFile("$base_path/$name[0]/$name[0]/$name_path[0].jpeg", $bucket, $file, $acl);
								
									

									unlink("$base_path/$name[0]/$name[0]/$name_path[0].jpeg");
				                                }
							}
							else
							{
								if(($file!='.') && ($file!='..'))
								{
									unlink("$base_path/$name[0]/$name[0]/$file");
									drupal_set_message($file.' image was not uploaded because of invalid image extension','error');
								}
					
							}

						  }
						rmdir("$base_path/".$name[0].'/'.$name[0]);
						rmdir("$base_path/".$name[0]);
						closedir($handle);
					}
					
					$message = "Your .zip file was uploaded and unpacked.";
					drupal_set_message($message);
				}
			
				else
				{

					if ($handle = opendir("$base_path/".$name[0])) 
					{
					    	//This is the correct way to loop over the directory. 
						while (false !== ($file = readdir($handle)))
						{
							$name_path=explode('.',$file);

							if(($name_path[1]=='jpg') || ($name_path[1]=='jpeg') )
							{
								if($name_path[0]!='')
								{
									rename("$base_path/$name[0]/$file", "$base_path/$name[0]/$name_path[0].jpeg");
								}
								$file_path1="$base_path/$name[0]/$name_path[0].jpeg";

								if($file_path1!="$base_path/$name[0]/..jpeg" && $file_path1!="$base_path/$name[0]/.jpeg" && $file_path1!='')
				                                {
									$s3->putObjectFile("$base_path/$name[0]/$name_path[0].jpeg", $bucket, $file, $acl);

									unlink("$base_path/$name[0]/$name_path[0].jpeg");
				                                }
							}
							else
							{
								if(($file!='.') && ($file!='..'))
								{
									unlink("$base_path/$name[0]/$file");
									drupal_set_message($file.' image was not uploaded because of invalid image extension','error');
								}
					
							}

						  }
						rmdir("$base_path/".$name[0]);

						closedir($handle);
					}
					$message = "Your .zip file was uploaded and unpacked.";
					drupal_set_message($message);
				}
				
				
			}

			$zip->close();
 
			unlink($target_path);
			
		} 
		else 
		{	
			$message = "There was a problem with the upload. Please try again.";
			drupal_set_message($message);
		}
	}

}


////////////////////////////////////////////////// photographer page

function amazon_s3_file_upload_form_photographer($form, &$form_state, $bucket) {


  $form = array();
  $form['#attributes'] = array('enctype' => 'multipart/form-data');

		$form['events_select']=array('#type'=>'select','#title'=>'Select Event','#attributes'=>array('onchange'=>'return select_event();'),'#id'=>'event');

		$form['events_select']['#options']=array('select_event'=>"Select Event");
		$event_name=amazon_s3_get_buckets();
		foreach($event_name as $event_name_value)
		{
			$event_title=$event_name_value;
			$form['events_select']['#options'][$event_title]=$event_title;
		}

  
  if($bucket!='photographer')//for hide the drag and drop upload field when without select the event
  {
	  $form['box'] = array(
	    '#type' => 'fieldset',
	    '#title' => t('Upload File'),
	    '#collapsible' => FALSE,
	    '#collapsed' => FALSE,
	  );
	  $form['box']['file'] = array(
	    '#type' => 'plupload',
	    '#title' => t('File to upload'),
	    '#description' => t('Pick a file to upload to the event %bucket.', array('%bucket' => $bucket)),
	    '#size' => 40,
	  );
	/*
	  $form['box']['acl'] = array(
	    '#type' => 'select',
	    '#title' => t('Access Control'),
	    '#options' => amazon_s3_acl_options(),
	  );
	*/
	  $form['box']['bucket'] = array('#type' => 'value', '#value' => $bucket);
	  $form['box']['upload'] = array('#type' => 'submit', '#value' => 'Upload');
  }
  return $form;
}


function amazon_s3_file_upload_form_photographer_submit($form, &$form_state) {
//resource 2

  $s3 = amazon_s3_get_instance();

  if($form['events_select']['#value']!='select_event')
  {
	  //for loop for count the uploaded files resource 2
	  for($i=0;$i<count($form['box']['file']['#value']);$i++)
	  {
		  $bucket = $form_state['values']['bucket'];
		  $upload_temp_filepath = $form['box']['file']['#value'][$i]['tmppath'];//$upload_temp_filepath = $_FILES['files']['tmp_name']['file'];
		  $object_filename = $form['box']['file']['#value'][$i]['name']; 	//$object_filename = $_FILES['files']['name']['file'];
		  $acl = 'public-read';//$form_state['values']['acl'];
		  $success = $s3->putObjectFile($upload_temp_filepath, $bucket, $object_filename, $acl);
		  
		  if ($success) {
		    $message = t('Succesfully uploaded the file %filename to the bucket %bucket.', array('%filename' => $object_filename, '%bucket' => $bucket));
		    drupal_set_message($message);
		  } else {
		    $message = t('Failed to upload the file %filename to the bucket %bucket.', array('%filename' => $object_filename, '%bucket' => $bucket));
		    drupal_set_message($message, 'error');
		  }
		  
	  }
   }
   if($form['events_select']['#value']=='select_event')
  {
	drupal_set_message('Please select the event','error');
  }
	  $form_state['redirect'] = "admin/structure/amazon-s3/bucket/photographer";


}


//for upload the extract the zip file by reource 2
function amazon_s3_file_upload_form1_photographer($form, &$form_state, $bucket) {


  $form = array();
  $form['#attributes'] = array('enctype' => 'multipart/form-data');
   if($bucket!='photographer')//for hide the zip file upload field when without select the event
  {
	  $form['box1'] = array(
	    '#type' => 'fieldset',
	    '#title' => t('Upload Zip File'),
	    '#collapsible' => FALSE,
	    '#collapsed' => FALSE,
	  );
	  $form['box1']['file1'] = array(
	    '#type' => 'file',
	    '#title' => t('File to upload'),
	    '#description' => t('Pick a zip file to upload to the event %bucket.', array('%bucket' => $bucket)),
	    '#size' => 40,
	  );
	/*
	  $form['box1']['acl1'] = array(
	    '#type' => 'select',
	    '#title' => t('Access Control'),
	    '#options' => amazon_s3_acl_options(),
	  ); 
	*/
	  $form['box1']['bucket1'] = array('#type' => 'value', '#value' => $bucket);
	  $form['box1']['upload1'] = array('#type' => 'submit', '#value' => 'Upload');
  }
  return $form;
}
//submit function for zip file upload and extraction by resource 2
function amazon_s3_file_upload_form1_photographer_submit($form, &$form_state) {

	
	$s3 = amazon_s3_get_instance();
	$filename = $_FILES["files"]["name"]["file1"];
	$source = $_FILES["files"]["tmp_name"]["file1"];


	$type = $_FILES["files"]["type"]["file1"];
 	
	$acl='public-read';//$form['box1']['acl1']['#value'];
	$bucket=$form_state['build_info']['args']['0'];

	$name = explode(".", $filename);
	$accepted_types = array('application/zip', 'application/x-zip-compressed', 'multipart/x-zip', 'application/x-compressed');
	foreach($accepted_types as $mime_type) {
		if($mime_type == $type) {
			$okay = true;
			break;
		} 
	}
 
	if($bucket!='photographer')
	{
		$continue = strtolower($name[1]) == 'zip' ? true : false;
		if(!$continue) {
			$message = "The file you are trying to upload is not a .zip file. Please try again.";
			drupal_set_message($message,'error');
		}
	 
		if($continue){

			$base_path=$_SERVER['DOCUMENT_ROOT'].base_path()."sites/default/files";

			$target_path = "$base_path/".$filename;  
			if(move_uploaded_file($source, $target_path)) 
			{

				$zip = new ZipArchive();
				$x = $zip->open($target_path);
				if ($x === true)
				{
					$zip->extractTo("$base_path"); 
			
			
					chmod("$base_path/$name[0]",0777);
			
					if ($handle = opendir("$base_path/$name[0]")) 
					{
					 	
					    	//This is the correct way to loop over the directory. 
						while (false !== ($file = readdir($handle)))
						{
							$name_path=explode('.',$file);

							if($name_path[0]!='')
							{
								rename("$base_path/$name[0]/$file", "$base_path/$name[0]/$name_path[0].jpeg");
							}
							$file_path1="$base_path/$name[0]/$name_path[0].jpeg";

							if($file_path1!="$base_path/$name[0]/..jpeg" && $file_path1!="$base_path/$name[0]/.jpeg" && $file_path1!='')
		                                        {
								$s3->putObjectFile("$base_path/$name[0]/$name_path[0].jpeg", $bucket, $file, $acl);

								unlink("$base_path/$name[0]/$name_path[0].jpeg");
		                                        }

						  }
					}
			
					rmdir("$base_path/$name[0]");

					closedir($handle);
				}

				$zip->close();
	 
				unlink($target_path);
			
				$message = "Your .zip file was uploaded and unpacked.";
				drupal_set_message($message);
			} 
			else 
			{	
				$message = "There was a problem with the upload. Please try again.";
				drupal_set_message($message);
			}
		}
	}
	if($bucket='photographer')
	{

		drupal_set_message('Please select the event','error');

	}

}

////////////////////////////////////////////////photographer page end



function amazon_s3_config_form() {
  $form['aws_access_key'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('aws_access_key', ''),
    '#description' => t('Use your Access Key ID as the value of the AWSAccessKeyId parameter in requests you send to Amazon Web Services (when required). Your Access Key ID identifies you as the party responsible for the request.'),
  );
  $form['aws_secret_key'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('aws_secret_key', ''),
    '#$target_pathdescription' => t('<p>Since your Access Key ID is not encrypted in requests to AWS, it could be discovered and used by anyone. Services that are not free require you to provide additional information, a request signature, to verify that a request containing your unique Access Key ID could only have come from you.</p>
                        <p>You use your Secret Access Key to calculate a signature to include in requests to web services that require authenticated requests. To learn more about request signatures, including when to use them and how you calculate them, please refer to the technical documentation for the specific web service(s) you are using. </p>
                        <p>
                        <strong>IMPORTANT:</strong>
                        Your Secret Access Key is a secret, and should be known only by you and AWS. You should never include your Secret Access Key in your requests to AWS. You should never e-mail your Secret Access Key to anyone. It is important to keep your Secret Access Key confidential to protect your account.
                        </p>'),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => 'Save');
  return $form;
}

function amazon_s3_config_form_submit($form, &$form_state) {
  variable_set('aws_access_key', trim($form_state['values']['aws_access_key']));
  variable_set('aws_secret_key', trim($form_state['values']['aws_secret_key']));
  drupal_set_message('Successfully saved changes.');
}

/**
 * Page Callbacks for hook_menu
*/



function amazon_s3_view_buckets() {
  $bucket_names = amazon_s3_get_buckets();

  $buckets = array();
  foreach ($bucket_names as $bucket_name) {
    $buckets[] = array(
      'name' => $bucket_name,
      //'view_objects' => l('View Objects', "admin/structure/amazon-s3/bucket/$bucket_name"),
     // 'delete' => l('Delete', "admin/structure/amazon-s3/bucket/$bucket_name/delete"), //hided by resource 2 for hide option delete the bucket
    );
  }


  $table = theme('table', array('header' => array('Name'), 'rows' => $buckets));//resource 2 array('Name', 'View Objects', 'Delete')
  $bucket_create_form = drupal_render(drupal_get_form('amazon_s3_bucket_create_form'));
  return $bucket_create_form . $table;
}

function amazon_s3_view_objects($bucket) {

  $s3 = amazon_s3_get_instance();
  $objects = $s3->getBucket($bucket, NULL, NULL, 100);


  foreach ($objects as &$object) {
    $object['time'] = format_date($object['time'], 'custom', "F j, Y, g:i a");
    $object['size'] = format_size($object['size']);
    $object['download'] = l('Download', amazon_s3_get_object_url($bucket, $object['name']));
   // $object['delete'] = l('Delete', "admin/structure/amazon-s3/bucket/$bucket/{$object['name']}/delete"); //by resource 2
  }
  $header = array('Name', 'Time', 'Size', 'Hash', 'Download');//remove delete header by resource 2

  if(count($objects)!='0')
  {
  	$table = theme('table', array('header' => $header, 'rows' => $objects));
  }
  $file_upload_form = drupal_render(drupal_get_form('amazon_s3_file_upload_form', $bucket));
  
  $file_upload_form1 = drupal_render(drupal_get_form('amazon_s3_file_upload_form1', $bucket));//by resource 2 for zip file upload function


$style="<table border='0'><tr><td>$file_upload_form</td><td>$file_upload_form1</td></tr></table>";

  if(count($objects)!='0')
 	 return $style;//hide the table by resource 2in the file uploading page return $file_upload_form .$file_upload_form1.$table;
  else
	return $style;
}


//by resource 2 for photographer file uploading
function amazon_s3_view_objects_photographer($bucket) {


  $s3 = amazon_s3_get_instance();
  $objects = $s3->getBucket($bucket, NULL, NULL, 100);

  foreach ($objects as &$object) {
    $object['time'] = format_date($object['time'], 'custom', "F j, Y, g:i a");
    $object['size'] = format_size($object['size']);
    $object['download'] = l('Download', amazon_s3_get_object_url($bucket, $object['name']));
    $object['delete'] = l('Delete', "admin/structure/amazon-s3/bucket/$bucket/{$object['name']}/delete");
  }
  $header = array('Name', 'Time', 'Size', 'Hash', 'Download', 'Delete');
  if(count($objects)!='0')
  {
  	$table = theme('table', array('header' => $header, 'rows' => $objects));
  }
  $file_upload_form = drupal_render(drupal_get_form('amazon_s3_file_upload_form_photographer', $bucket));
  
  $file_upload_form1 = drupal_render(drupal_get_form('amazon_s3_file_upload_form1_photographer', $bucket));//by resource 2 for zip file upload function


  if(count($objects)!='0')
 	 return $file_upload_form .$file_upload_form1;//hide the object image name table by resource 2  return $file_upload_form .$file_upload_form1. $table
  else
	return $file_upload_form .$file_upload_form1;
}





/*


function select_event_runner($form, &$form_state, $bucket)
{


	$form['setfield']=array(
	    '#type' => 'fieldset',
	    '#title' => t(''),
	    '#collapsible' => FALSE,
	    '#collapsed' => FALSE,
	    '#attached'=>array('css' => array(drupal_get_path('module', 'amazon_s3') . '/amazon_s3.css')),
	    
	  );

	//select event in the runner side
	$form['setfield']['events_select_runner']=array('#type'=>'select','#title'=>'Get My Photos','#attributes'=>array('onchange'=>'return select_event_runner();'),'#id'=>'event_runner');

	$form['setfield']['events_select_runner']['#options']=array('select_event'=>"Select Event");
	$event_name=amazon_s3_get_buckets();
	foreach($event_name as $event_name_value)
	{
		$event_title=$event_name_value;
		$form['setfield']['events_select_runner']['#options'][$event_title]=$event_title;
	}
	if(isset($bucket) && ($bucket!=''))
	{
		$form['setfield']['events_select_runner']['#default_value']=$form['setfield']['events_select_runner']['#options'][$bucket];
	}
	
	//text field for get the runner number
	$form['setfield']['runner_number']=array('#type'=>'textfield','#title'=>'','#size'=>'20','#id'=>'runner_number','#value'=>'My Number','#attributes'=>array('onclick'=>'return my_number_hide();','onblur'=>'my_number_show();'),'#prefix'=>"<div style='float:left'></div>");

  	//submit get my photo in the runner side
	$form['setfield']['search']=array('#type'=>'submit','#value'=>'search','#prefix'=>"<div style='float:right;margin-left:15px;'></div>");



	//for sell the photos in the runner side
	$form['sellfield']=array(
	    '#type' => 'fieldset',
	    '#title' => t(''),
	    '#collapsible' => FALSE,
	    '#collapsed' => FALSE,
	    '#attached'=>array('css' => array(drupal_get_path('module', 'amazon_s3') . '/amazon_s3.css')),
	    
	  );

	$form['sellfield']['events_select_runner']=array('#type'=>'select','#title'=>'Sell My Photos','#attributes'=>array('onchange'=>'return select_event_runner_sell();'),'#id'=>'event_runner_sell');

	$form['sellfield']['events_select_runner']['#options']=array('select_event'=>"Select Event");
	$event_name_sell=amazon_s3_get_buckets();
	foreach($event_name_sell as $event_name_value_sell)
	{
		$event_title_sell=$event_name_value_sell;
		$form['sellfield']['events_select_runner']['#options'][$event_title_sell]=$event_title_sell;
	}

	$form['sellfield']['get_started']=array('#type'=>'submit','#value'=>'Get Started');
	

	

	return $form;

}




function amozon_s3_show_images($bucket)
{

	
	
	$s3 = amazon_s3_get_instance();
	$objects = $s3->getBucket($bucket, NULL, NULL, 100);

	
	foreach ($objects as &$object) {
	$temp_link[]=amazon_s3_get_object_url($bucket, $object['name']);
	}

	$table='<table>';
	for($i=0;$i<count($objects);$i+=5)
	{

		$table.='<tr>';
		if(isset($temp_link[$i]) && ($temp_link[$i]!=''))
	 		$table.="<td><img src='$temp_link[$i]' alt='image' width=100px height=100px  />	</td>";

		if(isset($temp_link[$i+1]) && ($temp_link[$i+1]!=''))
		{
			$j=$i+1;
			$table.="<td><img src='$temp_link[$j]' alt='image' width=100px height=100px  />	</td>";

		}

		if(isset($temp_link[$i+2]) && ($temp_link[$i+2]!=''))
		{
			$k=$i+2;
			$table.="<td><img src='$temp_link[$k]' alt='image' width=100px height=100px  />	</td>";
		}
	
		if(isset($temp_link[$i+3]) && ($temp_link[$i+3]!=''))
		{
			$m=$i+3;
			$table.="<td><img src='$temp_link[$m]' alt='image' width=100px height=100px  onmouseover='showimg(this.src,this.id,this.name);'  id='imageshow$m' name='original$m' /><img src='' width=200px height=200px id='original$m' onmouseout='hideimg(this.src,this.id,this.name)' name='imageshow$m' style='display:none'/>
	</td>";
		}
	
	
		if(isset($temp_link[$i+4]) && ($temp_link[$i+4]!=''))
		{
			$n=$i+4;
			$table.="<td><img src='$temp_link[$n]' alt='image' width=100px height=100px  onmouseover='showimg(this.src,this.id,this.name);'  id='imageshow$n' name='original$n' /><img src='' width=200px height=200px id='original$n' onmouseout='hideimg(this.src,this.id,this.name)' name='imageshow$n' style='display:none'/>
	</td>";
		}
			

		$table.="</tr>";
	
	}
$table.='</table>';

$select_event_runner = drupal_render(drupal_get_form('select_event_runner', $bucket));

$style="<span style='float:left'>$select_event_runner</span><span style='float:left'>$table</span>";


return $style;

}

*/




