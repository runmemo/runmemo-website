<?php

/**
 * @file
 *   Main module file for Modernizr
 */

// Regular expression to determine which version of Modernizr is installed
define('MODERNIZR_VERSION_REGEX', '/Modernizr [v]?([\d\.]*)/');

// Several drupal_add_js() calls use this value to maintain
// consistency between the position of the library and its settings
define('MODERNIZR_SCRIPT_GROUP', JS_LIBRARY - 10);

// Several drupal_add_js() calls use this value to maintain
// consistency between the position of the library and its settings
define('MODERNIZR_SCRIPT_WEIGHT', -100);


/**
 * Implements hook_init().
 */
function modernizr_init() {

  // We need Modernizr to load as soon as possible, because it can affect
  // the presentation of a page. The options below ensure that it happens.
  drupal_add_js(
    modernizr_get_path(),
    array(
      'type' => 'file',
      'scope' => 'header',
      'group' => MODERNIZR_SCRIPT_GROUP,
      'every_page' => TRUE,
      'weight' => MODERNIZR_SCRIPT_WEIGHT,
      'preprocess' => 0,
    )
  );

  // We want Modernizr.load() commands to be issued immediately after the call to Modernizr
  // so that they download while the page renders. The options below will format the config
  // as inline JS.
  if ($output = _modernizr_load_generate()) {
    drupal_add_js(
      $output,
      array(
        'type' => 'inline',
        'scope' => 'header',
        'group' => MODERNIZR_SCRIPT_GROUP,
        'every_page' => TRUE,
        'weight' => MODERNIZR_SCRIPT_WEIGHT + 1,
        'preprocess' => 0,
      )
    );
  }
}

/**
 * Implements hook_permission().
 */
function modernizr_permission() {
  return array(
    'administer modernizr' => array(
      'title' => t('Administer Modernizr'),
      'description' => t('Perform administration tasks for Modernizr.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function modernizr_menu() {
  $items = array();

  $items['admin/config/development/modernizr'] = array(
    'title' => 'Modernizr settings',
    'description' => t('Queries Drupal for Modernizr dependencies and generates a custom link to the Modernizr builder.'),
    'page callback' => 'modernizr_generate_url',
    'file' => 'modernizr.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer modernizr'),
  );

  return $items;
}

/**
 * Implements hook_libraries_info().
 *
 * Note: the 'js' array in the 'files' section is intentionally left empty.
 * The reason is that the modernizr js should not be loaded directly by
 * Drupal.
 *
 * @return array
 */
function modernizr_libraries_info() {
  $libraries = array();

  $libraries['modernizr'] = array(
    'name' => t('Modernizr'),
    'vendor url' => 'http://modernizr.com',
    'download url' => 'http://modernizr.com',
    'version arguments' => array(
      'file' => 'modernizr.min.js',
      'pattern' => MODERNIZR_VERSION_REGEX,
    ),
    'files' => array(
      'js' => array(
        // This array is intentionally left blank.
      ),
    ),
  );

  return $libraries;
}

/**
 * Returns the full path of modernizr, along with the filename.
 *
 * @return string
 */
function modernizr_get_path() {
  $path = &drupal_static(__FUNCTION__);

  if ($path === NULL) {
    $paths = array();

    if (module_exists('libraries')) {
      $library_path = libraries_get_path('modernizr');
      if (file_exists($library_path)) {
        $paths[] = $library_path;
      }
    }

    $paths[] = drupal_get_path('module', 'modernizr');

    foreach ($paths as $p) {
      if ($files = file_scan_directory($p, '/^modernizr[a-z0-9\.-]*\.js$/')) {
        $path = reset($files)->uri;
        break;
      }
    }
  }

  return $path;
}

/**
 * Guesses the modernizr library version.
 *
 * This function is using a regex, which
 * assumes that the format of the version
 * string won't change. If it changes,
 * feel free to submit a bug report.
 *
 * @return mixed The version number if
 * exists, or a boolean FALSE if it can't be
 * determined.
 */
function modernizr_get_version($reset = FALSE) {
  $version = &drupal_static(__FUNCTION__);

  if ($version === NULL || $reset == TRUE) {
    if ($cached = cache_get('modernizr_version') && isset($cached->data) && $reset != TRUE) {
      $version = $cached->data;
    }
    else {
      $version = FALSE;
      $modernizr_path = modernizr_get_path();
      if (file_exists($modernizr_path)) {
        $modernizr = file_get_contents($modernizr_path);

        $matches = array();
        preg_match(MODERNIZR_VERSION_REGEX, $modernizr, $matches);

        if (isset($matches[1])) {
          $version = $matches[1];
          if ($version) {
            cache_set('modernizr_version', $version);
          }
        }

        unset($modernizr);
      }
    }
  }

  return $version;
}

/**
 * Implements MODULE_preprocess_html().
 *
 * Reads async-loaded CSS/JS from theme .info files. Stores info in variable.
 * Prints Modernizr.load() calls into drupal_add_js() as inline settings.
 *
 * @TODO: make use of drupal_static()
 */
function modernizr_preprocess_html(&$vars, $hook) {
  global $base_url;
  $load = array();
  $num_tests = 0;

  // Make a list of base themes and the current theme.
  $themes = $GLOBALS['base_theme_info'];
  $themes[] = $GLOBALS['theme_info'];
  foreach (array_keys($themes) as $key) {
    $theme_path = dirname($themes[$key]->filename) . '/';
    if (isset($themes[$key]->info['modernizr'])) {
      // Loop through Modernizr calls and assemble Load variable.
      foreach (array_keys($themes[$key]->info['modernizr']) as $test) {
        $load[$num_tests]['test'] = $test;
        foreach (array_keys($themes[$key]->info['modernizr'][$test]) as $action) {
          foreach ($themes[$key]->info['modernizr'][$test][$action] as $asset) {

            // First figure out which property we're reading.
            // callback/complete need different processing than yep/nope/both/load
            $functions = array('callback','complete');

            // Is this a function or a resource?
            if (in_array($action, $functions)) {
              // It's a function
              $load[$num_tests][$action][] = _modernizr_sanitize_callback($asset);
            }
            else {
              // It's a resource
              $load[$num_tests][$action][] = _modernizr_sanitize_resource($asset, $theme_path);
            }
          }
        }
        $num_tests++;
      }
    }
  }

  // store in DB
  variable_set('modernizr_load',$load);
}

/**
 * Helper function to render the Modernizr.load() calls.
 */
function _modernizr_load_generate() {
  $output = FALSE;

  // Get Modernizr.load() calls from the active theme.
  $theme = variable_get('modernizr_load', array());

  // Collect data from modules that implement hook_modernizr_load().
  $modules = modernizr_load_list();

  // Combine the data from the .info file and the Drupal modules.
  // Themes go first because they are more visual and in most cases
  // it's probably best to load them first. Modules whose assets
  // truly need to be loaded first have hook_modernizr_load_alter()
  // at their disposal.
  $testObjects = array_merge($theme, $modules);

  // Build the Modernizr.load() commands.
  if (count($testObjects)) {
    $num_tests = 1;
    $output .= 'Modernizr.load([';
    foreach ($testObjects as $load) {
      $output .= ($num_tests > 1) ? ',' : '';
      $output .= '{'."\n";
      $output .= '  test: '. $load['test'] .','."\n";

      // Print each action and its resources
      $actions = array('yep','nope','both','load');
      foreach ($actions as $action) {
        if (isset($load[$action])) {

          // Begin output for this action
          $output .= '  '. sprintf('%-4s',$action) .': ';

          // How many resources for this action?
          if (count($load[$action]) == 1) {
            // Single resource
            $output .= "'". $load[$action][0] ."',\n";
          }
          else {
            // Multiple resources
            $output .= '[';
            foreach ($load[$action] as $resource) {
              $output .= "'". $resource ."',";
            }
            // Truncate last comma
            $output = substr($output, 0, -1);
            $output .= "],\n";
          }
        }
      }

      // Output these two properties without quotes around the output
      $callbacks = array('callback','complete');
      foreach ($callbacks as $action) {
        if (isset($load[$action])) {

          // Begin output for this action
          $output .= '  '. sprintf('%-4s',$action) .': ';

          // How many callbacks for this action?
          if (count($load[$action]) == 1) {
            // Single resource
            $output .= $load[$action][0] .",\n";
          }
          else {
            // Multiple resources
            $output .= '[';
            foreach ($load[$action] as $callback) {
              $output .= $callback .",";
            }
            // Truncate last comma
            $output = substr($output, 0, -1);
            $output .= "],\n";
          }
        }
      }

      // Truncate last comma
      $output = substr($output, 0, -1);
      $output .= "\n}";
      $num_tests++;
    }

    // If more than one test was registered, finish the Array notation.
    // Finally, close the Modernizr.load() function parenthesis.
    $output .= ($num_tests > 1) ? ']' : '';
    $output .= ');';
  }

  return $output;
}

/**
 * Implements MODULE_preprocess_maintenance_page().
 */
function modernizr_preprocess_maintenance_page(&$vars, $hook) {
  modernizr_preprocess_html($vars, $hook);
}

/**
 * Helper function to sanitize Modernizr.load() callbacks
 */
function _modernizr_sanitize_callback($callback) {
  global $base_url;
  $output = '';
  $function_regex = '/^function(\s)*\(\)(\s)*\{(.*)\}$/';

  // Save the people who don't wrap their code in anonymous functions.
  // Yes, an extra semi-colon has been added for safety :)
  $output = (preg_match($function_regex, $callback)) ? $callback : 'function(){'. $callback .';}';

  return $output;
}

/**
 * Helper function to sanitize Modernizr.load() assets
 */
function _modernizr_sanitize_resource($resource, $theme_path) {
  global $base_url;
  $output = '';

  // If a path starts with 'sites' we assume they know exactly where they're going.
  // Otherwise, they seem like relative URLs so append theme path.
  $output = (strpos($resource,'sites/') !== FALSE) ? $resource : $base_url .'/'. $theme_path . $resource;

  return $output;
}

/**
 * Asks other Drupal modules which Modernizr tests they need.
 *
 * @return array
 */
function modernizr_api_list($reset = FALSE) {
  $tests = &drupal_static(__FUNCTION__);
  if (!isset($tests) || $reset) {
    $tests = module_invoke_all('modernizr_info');
    drupal_alter('modernizr_info', $tests);
  }

  // See module_implements() for an explanation of this cast.
  return (array) $tests;
}

/**
 * Implements hook_modernizr_info().
 *
 * This function implements its own hook to ensure that any custom Modernizr
 * builds downloaded from either the settings screen or drush commands contain
 * the essential components needed to support the module's functionality.
 *
 * cssclasses
 * - Automatically adds cssclasses to download links since most users want this.
 *
 * html5shiv w/ printshiv
 * - Includes some utility JS that allows IE to recognize HTML5 elements
 *
 * load
 * - Includes yepnope.js as Modernizr.load() - allows conditional async CSS/JS loading.
 */
function modernizr_modernizr_info() {
  $items = array();

  $items['cssclasses'] = array(
    'type'   => 'extras',
    'module' => 'Modernizr',
    'desc' => 'Allows Modernizr to inject CSS classes into &lt;html&gt;',
  );
  $items['printshiv'] = array(
    'type'   => 'extras',
    'module' => 'Modernizr',
    'desc' => 'Provides html5shiv w/ printshiv (for browsers that do not support HTML5 tags)',
  );
  $items['load'] = array(
    'type'   => 'extras',
    'module' => 'Modernizr',
    'desc' => 'Provides yepnope.js, an asynchronous CSS/JS loader that allows use of Modernizr.load()',
  );

  return $items;
}

/**
 * Asks other Drupal modules for Modernizr.load() commands.
 *
 * @return array
 */
function modernizr_load_list($reset = FALSE) {
  $load = &drupal_static(__FUNCTION__);
  if (!isset($load) || $reset) {
    $load = module_invoke_all('modernizr_load');
    drupal_alter('modernizr_load', $load);
  }

  return $load;
}
